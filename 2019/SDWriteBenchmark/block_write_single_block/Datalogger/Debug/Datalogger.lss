
Datalogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a240  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  0000a240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b04  20000098  0000a2d8  00020094  2**3
                  ALLOC
  3 .stack        00002004  20000b9c  0000addc  00020094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0006197f  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006df0  00000000  00000000  00081a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000122cf  00000000  00000000  00088884  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c08  00000000  00000000  0009ab53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001360  00000000  00000000  0009b75b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00025e19  00000000  00000000  0009cabb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019faf  00000000  00000000  000c28d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a37f7  00000000  00000000  000dc883  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002a7c  00000000  00000000  0018007c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 2b 00 20 3d 61 00 00 39 61 00 00 39 61 00 00     .+. =a..9a..9a..
	...
      2c:	39 61 00 00 00 00 00 00 00 00 00 00 39 61 00 00     9a..........9a..
      3c:	01 62 00 00 39 61 00 00 39 61 00 00 39 61 00 00     .b..9a..9a..9a..
      4c:	39 61 00 00 39 61 00 00 39 61 00 00 39 61 00 00     9a..9a..9a..9a..
      5c:	39 61 00 00 39 61 00 00 bd 51 00 00 cd 51 00 00     9a..9a...Q...Q..
      6c:	dd 51 00 00 ed 51 00 00 00 00 00 00 00 00 00 00     .Q...Q..........
      7c:	dd 0d 00 00 39 61 00 00 39 61 00 00 39 61 00 00     ....9a..9a..9a..
      8c:	39 61 00 00 39 61 00 00 39 61 00 00 39 61 00 00     9a..9a..9a..9a..
      9c:	39 61 00 00 39 61 00 00 39 61 00 00 39 61 00 00     9a..9a..9a..9a..
      ac:	39 61 00 00 39 61 00 00 39 61 00 00 39 61 00 00     9a..9a..9a..9a..

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000098 	.word	0x20000098
      dc:	00000000 	.word	0x00000000
      e0:	0000a240 	.word	0x0000a240

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000009c 	.word	0x2000009c
     110:	0000a240 	.word	0x0000a240
     114:	0000a240 	.word	0x0000a240
     118:	00000000 	.word	0x00000000

0000011c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     11c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     11e:	4b07      	ldr	r3, [pc, #28]	; (13c <sd_mmc_configure_slot+0x20>)
     120:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     122:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     124:	5ccb      	ldrb	r3, [r1, r3]
     126:	1e5a      	subs	r2, r3, #1
     128:	4193      	sbcs	r3, r2
     12a:	b2db      	uxtb	r3, r3
     12c:	7c4a      	ldrb	r2, [r1, #17]
     12e:	6809      	ldr	r1, [r1, #0]
     130:	4803      	ldr	r0, [pc, #12]	; (140 <sd_mmc_configure_slot+0x24>)
     132:	7800      	ldrb	r0, [r0, #0]
     134:	4c03      	ldr	r4, [pc, #12]	; (144 <sd_mmc_configure_slot+0x28>)
     136:	47a0      	blx	r4
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	200000b4 	.word	0x200000b4
     140:	200000bd 	.word	0x200000bd
     144:	00005571 	.word	0x00005571

00000148 <sd_mmc_select_slot>:
{
     148:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     14a:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     14c:	2800      	cmp	r0, #0
     14e:	d001      	beq.n	154 <sd_mmc_select_slot+0xc>
}
     150:	0018      	movs	r0, r3
     152:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     154:	4b39      	ldr	r3, [pc, #228]	; (23c <sd_mmc_select_slot+0xf4>)
     156:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     158:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     15a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     15c:	2a00      	cmp	r2, #0
     15e:	d105      	bne.n	16c <sd_mmc_select_slot+0x24>
		return &(ports[port_index]->Group[group_index]);
     160:	094b      	lsrs	r3, r1, #5
     162:	01db      	lsls	r3, r3, #7
     164:	2282      	movs	r2, #130	; 0x82
     166:	05d2      	lsls	r2, r2, #23
     168:	4694      	mov	ip, r2
     16a:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     16c:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     16e:	221f      	movs	r2, #31
     170:	400a      	ands	r2, r1
     172:	2301      	movs	r3, #1
     174:	4093      	lsls	r3, r2
     176:	4218      	tst	r0, r3
     178:	d010      	beq.n	19c <sd_mmc_select_slot+0x54>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     17a:	4b30      	ldr	r3, [pc, #192]	; (23c <sd_mmc_select_slot+0xf4>)
     17c:	7b9b      	ldrb	r3, [r3, #14]
     17e:	2b01      	cmp	r3, #1
     180:	d004      	beq.n	18c <sd_mmc_select_slot+0x44>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     182:	2204      	movs	r2, #4
     184:	4b2d      	ldr	r3, [pc, #180]	; (23c <sd_mmc_select_slot+0xf4>)
     186:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     188:	2302      	movs	r3, #2
     18a:	e7e1      	b.n	150 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     18c:	4b2c      	ldr	r3, [pc, #176]	; (240 <sd_mmc_select_slot+0xf8>)
     18e:	781b      	ldrb	r3, [r3, #0]
     190:	2b00      	cmp	r3, #0
     192:	d0f6      	beq.n	182 <sd_mmc_select_slot+0x3a>
		SysTick->CTRL = 0;
     194:	2200      	movs	r2, #0
     196:	4b2b      	ldr	r3, [pc, #172]	; (244 <sd_mmc_select_slot+0xfc>)
     198:	601a      	str	r2, [r3, #0]
     19a:	e7f2      	b.n	182 <sd_mmc_select_slot+0x3a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     19c:	4b27      	ldr	r3, [pc, #156]	; (23c <sd_mmc_select_slot+0xf4>)
     19e:	7b9a      	ldrb	r2, [r3, #14]
     1a0:	2a04      	cmp	r2, #4
     1a2:	d005      	beq.n	1b0 <sd_mmc_select_slot+0x68>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     1a4:	2a01      	cmp	r2, #1
     1a6:	d024      	beq.n	1f2 <sd_mmc_select_slot+0xaa>
		return SD_MMC_ERR_UNUSABLE;
     1a8:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     1aa:	2a03      	cmp	r2, #3
     1ac:	d0d0      	beq.n	150 <sd_mmc_select_slot+0x8>
     1ae:	e036      	b.n	21e <sd_mmc_select_slot+0xd6>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     1b0:	3a03      	subs	r2, #3
     1b2:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     1b4:	4b23      	ldr	r3, [pc, #140]	; (244 <sd_mmc_select_slot+0xfc>)
     1b6:	681b      	ldr	r3, [r3, #0]
     1b8:	2b00      	cmp	r3, #0
     1ba:	d008      	beq.n	1ce <sd_mmc_select_slot+0x86>
		sd_mmc_sam_systick_used = false;
     1bc:	2200      	movs	r2, #0
     1be:	4b20      	ldr	r3, [pc, #128]	; (240 <sd_mmc_select_slot+0xf8>)
     1c0:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     1c2:	20fa      	movs	r0, #250	; 0xfa
     1c4:	0080      	lsls	r0, r0, #2
     1c6:	4b20      	ldr	r3, [pc, #128]	; (248 <sd_mmc_select_slot+0x100>)
     1c8:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     1ca:	2302      	movs	r3, #2
     1cc:	e7c0      	b.n	150 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     1ce:	2401      	movs	r4, #1
     1d0:	4b1b      	ldr	r3, [pc, #108]	; (240 <sd_mmc_select_slot+0xf8>)
     1d2:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1d4:	2000      	movs	r0, #0
     1d6:	4b1d      	ldr	r3, [pc, #116]	; (24c <sd_mmc_select_slot+0x104>)
     1d8:	4798      	blx	r3
     1da:	21fa      	movs	r1, #250	; 0xfa
     1dc:	0149      	lsls	r1, r1, #5
     1de:	4b1c      	ldr	r3, [pc, #112]	; (250 <sd_mmc_select_slot+0x108>)
     1e0:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     1e2:	23fa      	movs	r3, #250	; 0xfa
     1e4:	009b      	lsls	r3, r3, #2
     1e6:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1e8:	4b16      	ldr	r3, [pc, #88]	; (244 <sd_mmc_select_slot+0xfc>)
     1ea:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     1ec:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     1ee:	2302      	movs	r3, #2
     1f0:	e7ae      	b.n	150 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     1f2:	4b13      	ldr	r3, [pc, #76]	; (240 <sd_mmc_select_slot+0xf8>)
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d007      	beq.n	20a <sd_mmc_select_slot+0xc2>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     1fa:	4b12      	ldr	r3, [pc, #72]	; (244 <sd_mmc_select_slot+0xfc>)
     1fc:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     1fe:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     200:	03d2      	lsls	r2, r2, #15
     202:	d5a5      	bpl.n	150 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     204:	2200      	movs	r2, #0
     206:	4b0f      	ldr	r3, [pc, #60]	; (244 <sd_mmc_select_slot+0xfc>)
     208:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     20a:	4b0c      	ldr	r3, [pc, #48]	; (23c <sd_mmc_select_slot+0xf4>)
     20c:	2202      	movs	r2, #2
     20e:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     210:	4a10      	ldr	r2, [pc, #64]	; (254 <sd_mmc_select_slot+0x10c>)
     212:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     214:	2201      	movs	r2, #1
     216:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     218:	2100      	movs	r1, #0
     21a:	3221      	adds	r2, #33	; 0x21
     21c:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     21e:	2200      	movs	r2, #0
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <sd_mmc_select_slot+0x110>)
     222:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     224:	4c05      	ldr	r4, [pc, #20]	; (23c <sd_mmc_select_slot+0xf4>)
     226:	4b0d      	ldr	r3, [pc, #52]	; (25c <sd_mmc_select_slot+0x114>)
     228:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     22a:	4b0d      	ldr	r3, [pc, #52]	; (260 <sd_mmc_select_slot+0x118>)
     22c:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     22e:	7ba3      	ldrb	r3, [r4, #14]
     230:	3b02      	subs	r3, #2
     232:	425a      	negs	r2, r3
     234:	4153      	adcs	r3, r2
     236:	b2db      	uxtb	r3, r3
     238:	e78a      	b.n	150 <sd_mmc_select_slot+0x8>
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	20000000 	.word	0x20000000
     240:	200000bc 	.word	0x200000bc
     244:	e000e010 	.word	0xe000e010
     248:	0000523d 	.word	0x0000523d
     24c:	00005f05 	.word	0x00005f05
     250:	00006479 	.word	0x00006479
     254:	00061a80 	.word	0x00061a80
     258:	200000bd 	.word	0x200000bd
     25c:	200000b4 	.word	0x200000b4
     260:	0000011d 	.word	0x0000011d

00000264 <sd_mmc_cmd13>:
{
     264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     266:	4d0b      	ldr	r5, [pc, #44]	; (294 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     268:	4f0b      	ldr	r7, [pc, #44]	; (298 <sd_mmc_cmd13+0x34>)
			if (!(driver_get_response() & 0xFF)) {
     26a:	4e0c      	ldr	r6, [pc, #48]	; (29c <sd_mmc_cmd13+0x38>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     26c:	2100      	movs	r1, #0
     26e:	480c      	ldr	r0, [pc, #48]	; (2a0 <sd_mmc_cmd13+0x3c>)
     270:	47b8      	blx	r7
     272:	1e04      	subs	r4, r0, #0
     274:	d00b      	beq.n	28e <sd_mmc_cmd13+0x2a>
			if (!(driver_get_response() & 0xFF)) {
     276:	47b0      	blx	r6
     278:	23ff      	movs	r3, #255	; 0xff
     27a:	4203      	tst	r3, r0
     27c:	d007      	beq.n	28e <sd_mmc_cmd13+0x2a>
     27e:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     280:	2d00      	cmp	r5, #0
     282:	d1f3      	bne.n	26c <sd_mmc_cmd13+0x8>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
     284:	4907      	ldr	r1, [pc, #28]	; (2a4 <sd_mmc_cmd13+0x40>)
     286:	4808      	ldr	r0, [pc, #32]	; (2a8 <sd_mmc_cmd13+0x44>)
     288:	4b08      	ldr	r3, [pc, #32]	; (2ac <sd_mmc_cmd13+0x48>)
     28a:	4798      	blx	r3
			return false;
     28c:	2400      	movs	r4, #0
}
     28e:	0020      	movs	r0, r4
     290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     292:	46c0      	nop			; (mov r8, r8)
     294:	00030d41 	.word	0x00030d41
     298:	000057b5 	.word	0x000057b5
     29c:	000057cd 	.word	0x000057cd
     2a0:	00001b0d 	.word	0x00001b0d
     2a4:	0000955c 	.word	0x0000955c
     2a8:	000096f4 	.word	0x000096f4
     2ac:	000080ed 	.word	0x000080ed

000002b0 <sd_mmc_cmd9_spi>:
{
     2b0:	b510      	push	{r4, lr}
     2b2:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     2b4:	4b0c      	ldr	r3, [pc, #48]	; (2e8 <sd_mmc_cmd9_spi+0x38>)
     2b6:	681b      	ldr	r3, [r3, #0]
     2b8:	8999      	ldrh	r1, [r3, #12]
     2ba:	0409      	lsls	r1, r1, #16
     2bc:	2301      	movs	r3, #1
     2be:	9300      	str	r3, [sp, #0]
     2c0:	2210      	movs	r2, #16
     2c2:	480a      	ldr	r0, [pc, #40]	; (2ec <sd_mmc_cmd9_spi+0x3c>)
     2c4:	4c0a      	ldr	r4, [pc, #40]	; (2f0 <sd_mmc_cmd9_spi+0x40>)
     2c6:	47a0      	blx	r4
     2c8:	2800      	cmp	r0, #0
     2ca:	d101      	bne.n	2d0 <sd_mmc_cmd9_spi+0x20>
}
     2cc:	b002      	add	sp, #8
     2ce:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     2d0:	4b05      	ldr	r3, [pc, #20]	; (2e8 <sd_mmc_cmd9_spi+0x38>)
     2d2:	6818      	ldr	r0, [r3, #0]
     2d4:	3012      	adds	r0, #18
     2d6:	2101      	movs	r1, #1
     2d8:	4b06      	ldr	r3, [pc, #24]	; (2f4 <sd_mmc_cmd9_spi+0x44>)
     2da:	4798      	blx	r3
     2dc:	2800      	cmp	r0, #0
     2de:	d0f5      	beq.n	2cc <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     2e0:	4b05      	ldr	r3, [pc, #20]	; (2f8 <sd_mmc_cmd9_spi+0x48>)
     2e2:	4798      	blx	r3
     2e4:	e7f2      	b.n	2cc <sd_mmc_cmd9_spi+0x1c>
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	200000b4 	.word	0x200000b4
     2ec:	00081109 	.word	0x00081109
     2f0:	00005625 	.word	0x00005625
     2f4:	00005851 	.word	0x00005851
     2f8:	000058dd 	.word	0x000058dd

000002fc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     2fc:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     2fe:	4b04      	ldr	r3, [pc, #16]	; (310 <sd_mmc_deselect_slot+0x14>)
     300:	781b      	ldrb	r3, [r3, #0]
     302:	2b00      	cmp	r3, #0
     304:	d000      	beq.n	308 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     306:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     308:	2000      	movs	r0, #0
     30a:	4b02      	ldr	r3, [pc, #8]	; (314 <sd_mmc_deselect_slot+0x18>)
     30c:	4798      	blx	r3
}
     30e:	e7fa      	b.n	306 <sd_mmc_deselect_slot+0xa>
     310:	200000bd 	.word	0x200000bd
     314:	000055c5 	.word	0x000055c5

00000318 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     318:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     31a:	2204      	movs	r2, #4
     31c:	4b03      	ldr	r3, [pc, #12]	; (32c <sd_mmc_init+0x14>)
     31e:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     320:	32fb      	adds	r2, #251	; 0xfb
     322:	4b03      	ldr	r3, [pc, #12]	; (330 <sd_mmc_init+0x18>)
     324:	701a      	strb	r2, [r3, #0]
	driver_init();
     326:	4b03      	ldr	r3, [pc, #12]	; (334 <sd_mmc_init+0x1c>)
     328:	4798      	blx	r3
}
     32a:	bd10      	pop	{r4, pc}
     32c:	20000000 	.word	0x20000000
     330:	200000bd 	.word	0x200000bd
     334:	00005469 	.word	0x00005469

00000338 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     338:	b5f0      	push	{r4, r5, r6, r7, lr}
     33a:	46c6      	mov	lr, r8
     33c:	b500      	push	{lr}
     33e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     340:	4bb0      	ldr	r3, [pc, #704]	; (604 <sd_mmc_check+0x2cc>)
     342:	4798      	blx	r3
     344:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     346:	2801      	cmp	r0, #1
     348:	d006      	beq.n	358 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     34a:	4baf      	ldr	r3, [pc, #700]	; (608 <sd_mmc_check+0x2d0>)
     34c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     34e:	0020      	movs	r0, r4
     350:	b008      	add	sp, #32
     352:	bc04      	pop	{r2}
     354:	4690      	mov	r8, r2
     356:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     358:	4bac      	ldr	r3, [pc, #688]	; (60c <sd_mmc_check+0x2d4>)
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	2201      	movs	r2, #1
     35e:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     360:	2200      	movs	r2, #0
     362:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     364:	819a      	strh	r2, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");
     366:	48aa      	ldr	r0, [pc, #680]	; (610 <sd_mmc_check+0x2d8>)
     368:	4baa      	ldr	r3, [pc, #680]	; (614 <sd_mmc_check+0x2dc>)
     36a:	4798      	blx	r3
	driver_send_clock();
     36c:	4baa      	ldr	r3, [pc, #680]	; (618 <sd_mmc_check+0x2e0>)
     36e:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     370:	2100      	movs	r1, #0
     372:	2088      	movs	r0, #136	; 0x88
     374:	0140      	lsls	r0, r0, #5
     376:	4ba9      	ldr	r3, [pc, #676]	; (61c <sd_mmc_check+0x2e4>)
     378:	4798      	blx	r3
     37a:	2800      	cmp	r0, #0
     37c:	d10a      	bne.n	394 <sd_mmc_check+0x5c>
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
     37e:	48a8      	ldr	r0, [pc, #672]	; (620 <sd_mmc_check+0x2e8>)
     380:	4ba4      	ldr	r3, [pc, #656]	; (614 <sd_mmc_check+0x2dc>)
     382:	4798      	blx	r3
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     384:	4ba1      	ldr	r3, [pc, #644]	; (60c <sd_mmc_check+0x2d4>)
     386:	681b      	ldr	r3, [r3, #0]
     388:	2203      	movs	r2, #3
     38a:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     38c:	4b9e      	ldr	r3, [pc, #632]	; (608 <sd_mmc_check+0x2d0>)
     38e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     390:	2403      	movs	r4, #3
     392:	e7dc      	b.n	34e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     394:	21d5      	movs	r1, #213	; 0xd5
     396:	0049      	lsls	r1, r1, #1
     398:	48a2      	ldr	r0, [pc, #648]	; (624 <sd_mmc_check+0x2ec>)
     39a:	4ba0      	ldr	r3, [pc, #640]	; (61c <sd_mmc_check+0x2e4>)
     39c:	4798      	blx	r3
	*v2 = 0;
     39e:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     3a0:	2800      	cmp	r0, #0
     3a2:	d128      	bne.n	3f6 <sd_mmc_check+0xbe>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     3a4:	4b99      	ldr	r3, [pc, #612]	; (60c <sd_mmc_check+0x2d4>)
     3a6:	681b      	ldr	r3, [r3, #0]
     3a8:	7bdb      	ldrb	r3, [r3, #15]
     3aa:	07db      	lsls	r3, r3, #31
     3ac:	d500      	bpl.n	3b0 <sd_mmc_check+0x78>
     3ae:	e231      	b.n	814 <sd_mmc_check+0x4dc>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     3b0:	4b96      	ldr	r3, [pc, #600]	; (60c <sd_mmc_check+0x2d4>)
     3b2:	681b      	ldr	r3, [r3, #0]
     3b4:	7bda      	ldrb	r2, [r3, #15]
     3b6:	2309      	movs	r3, #9
     3b8:	4013      	ands	r3, r2
     3ba:	2b01      	cmp	r3, #1
     3bc:	d10f      	bne.n	3de <sd_mmc_check+0xa6>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     3be:	2180      	movs	r1, #128	; 0x80
     3c0:	0089      	lsls	r1, r1, #2
     3c2:	4899      	ldr	r0, [pc, #612]	; (628 <sd_mmc_check+0x2f0>)
     3c4:	4b95      	ldr	r3, [pc, #596]	; (61c <sd_mmc_check+0x2e4>)
     3c6:	4798      	blx	r3
     3c8:	2800      	cmp	r0, #0
     3ca:	d0d8      	beq.n	37e <sd_mmc_check+0x46>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     3cc:	4b8f      	ldr	r3, [pc, #572]	; (60c <sd_mmc_check+0x2d4>)
     3ce:	681b      	ldr	r3, [r3, #0]
     3d0:	7bdb      	ldrb	r3, [r3, #15]
     3d2:	07db      	lsls	r3, r3, #31
     3d4:	d503      	bpl.n	3de <sd_mmc_check+0xa6>
		if (!sd_mmc_cmd13()) {
     3d6:	4b95      	ldr	r3, [pc, #596]	; (62c <sd_mmc_check+0x2f4>)
     3d8:	4798      	blx	r3
     3da:	2800      	cmp	r0, #0
     3dc:	d0cf      	beq.n	37e <sd_mmc_check+0x46>
	sd_mmc_configure_slot();
     3de:	4b94      	ldr	r3, [pc, #592]	; (630 <sd_mmc_check+0x2f8>)
     3e0:	4798      	blx	r3
		sd_mmc_debug("SD/MMC card ready\n\r");
     3e2:	4894      	ldr	r0, [pc, #592]	; (634 <sd_mmc_check+0x2fc>)
     3e4:	4b8b      	ldr	r3, [pc, #556]	; (614 <sd_mmc_check+0x2dc>)
     3e6:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     3e8:	4b88      	ldr	r3, [pc, #544]	; (60c <sd_mmc_check+0x2d4>)
     3ea:	681b      	ldr	r3, [r3, #0]
     3ec:	2200      	movs	r2, #0
     3ee:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     3f0:	4b85      	ldr	r3, [pc, #532]	; (608 <sd_mmc_check+0x2d0>)
     3f2:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     3f4:	e7ab      	b.n	34e <sd_mmc_check+0x16>
	resp = driver_get_response();
     3f6:	4b90      	ldr	r3, [pc, #576]	; (638 <sd_mmc_check+0x300>)
     3f8:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     3fa:	1c43      	adds	r3, r0, #1
     3fc:	d100      	bne.n	400 <sd_mmc_check+0xc8>
     3fe:	e207      	b.n	810 <sd_mmc_check+0x4d8>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     400:	0503      	lsls	r3, r0, #20
     402:	0d1b      	lsrs	r3, r3, #20
     404:	22d5      	movs	r2, #213	; 0xd5
     406:	0052      	lsls	r2, r2, #1
     408:	4293      	cmp	r3, r2
     40a:	d005      	beq.n	418 <sd_mmc_check+0xe0>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
     40c:	0002      	movs	r2, r0
     40e:	498b      	ldr	r1, [pc, #556]	; (63c <sd_mmc_check+0x304>)
     410:	488b      	ldr	r0, [pc, #556]	; (640 <sd_mmc_check+0x308>)
     412:	4b80      	ldr	r3, [pc, #512]	; (614 <sd_mmc_check+0x2dc>)
     414:	4798      	blx	r3
     416:	e7b2      	b.n	37e <sd_mmc_check+0x46>
	sd_mmc_debug("SD card V2\n\r");
     418:	488a      	ldr	r0, [pc, #552]	; (644 <sd_mmc_check+0x30c>)
     41a:	4b7e      	ldr	r3, [pc, #504]	; (614 <sd_mmc_check+0x2dc>)
     41c:	4798      	blx	r3
	*v2 = 1;
     41e:	2601      	movs	r6, #1
     420:	e7c0      	b.n	3a4 <sd_mmc_check+0x6c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
     422:	4989      	ldr	r1, [pc, #548]	; (648 <sd_mmc_check+0x310>)
     424:	4889      	ldr	r0, [pc, #548]	; (64c <sd_mmc_check+0x314>)
     426:	4b7b      	ldr	r3, [pc, #492]	; (614 <sd_mmc_check+0x2dc>)
     428:	4798      	blx	r3
			sd_mmc_debug("Start MMC Install\n\r");
     42a:	4889      	ldr	r0, [pc, #548]	; (650 <sd_mmc_check+0x318>)
     42c:	4b79      	ldr	r3, [pc, #484]	; (614 <sd_mmc_check+0x2dc>)
     42e:	4798      	blx	r3
			sd_mmc_card->type = CARD_TYPE_MMC;
     430:	4b76      	ldr	r3, [pc, #472]	; (60c <sd_mmc_check+0x2d4>)
     432:	681b      	ldr	r3, [r3, #0]
     434:	2202      	movs	r2, #2
     436:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     438:	2100      	movs	r1, #0
     43a:	2088      	movs	r0, #136	; 0x88
     43c:	0140      	lsls	r0, r0, #5
     43e:	4b77      	ldr	r3, [pc, #476]	; (61c <sd_mmc_check+0x2e4>)
     440:	4798      	blx	r3
     442:	2800      	cmp	r0, #0
     444:	d09b      	beq.n	37e <sd_mmc_check+0x46>
     446:	4d83      	ldr	r5, [pc, #524]	; (654 <sd_mmc_check+0x31c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     448:	4f74      	ldr	r7, [pc, #464]	; (61c <sd_mmc_check+0x2e4>)
		resp = driver_get_response();
     44a:	4e7b      	ldr	r6, [pc, #492]	; (638 <sd_mmc_check+0x300>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     44c:	2100      	movs	r1, #0
     44e:	4882      	ldr	r0, [pc, #520]	; (658 <sd_mmc_check+0x320>)
     450:	47b8      	blx	r7
     452:	2800      	cmp	r0, #0
     454:	d100      	bne.n	458 <sd_mmc_check+0x120>
     456:	e096      	b.n	586 <sd_mmc_check+0x24e>
		resp = driver_get_response();
     458:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     45a:	07c3      	lsls	r3, r0, #31
     45c:	d400      	bmi.n	460 <sd_mmc_check+0x128>
     45e:	e099      	b.n	594 <sd_mmc_check+0x25c>
		if (retry-- == 0) {
     460:	3d01      	subs	r5, #1
     462:	d2f3      	bcs.n	44c <sd_mmc_check+0x114>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
     464:	497d      	ldr	r1, [pc, #500]	; (65c <sd_mmc_check+0x324>)
     466:	487e      	ldr	r0, [pc, #504]	; (660 <sd_mmc_check+0x328>)
     468:	4b6a      	ldr	r3, [pc, #424]	; (614 <sd_mmc_check+0x2dc>)
     46a:	4798      	blx	r3
     46c:	e787      	b.n	37e <sd_mmc_check+0x46>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
     46e:	4976      	ldr	r1, [pc, #472]	; (648 <sd_mmc_check+0x310>)
     470:	487c      	ldr	r0, [pc, #496]	; (664 <sd_mmc_check+0x32c>)
     472:	4b68      	ldr	r3, [pc, #416]	; (614 <sd_mmc_check+0x2dc>)
     474:	4798      	blx	r3
     476:	e7d8      	b.n	42a <sd_mmc_check+0xf2>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     478:	2100      	movs	r1, #0
     47a:	487b      	ldr	r0, [pc, #492]	; (668 <sd_mmc_check+0x330>)
     47c:	4b67      	ldr	r3, [pc, #412]	; (61c <sd_mmc_check+0x2e4>)
     47e:	4798      	blx	r3
     480:	2800      	cmp	r0, #0
     482:	d07b      	beq.n	57c <sd_mmc_check+0x244>
	if ((driver_get_response() & OCR_CCS) != 0) {
     484:	4b6c      	ldr	r3, [pc, #432]	; (638 <sd_mmc_check+0x300>)
     486:	4798      	blx	r3
     488:	0043      	lsls	r3, r0, #1
     48a:	d505      	bpl.n	498 <sd_mmc_check+0x160>
		sd_mmc_card->type |= CARD_TYPE_HC;
     48c:	4b5f      	ldr	r3, [pc, #380]	; (60c <sd_mmc_check+0x2d4>)
     48e:	681a      	ldr	r2, [r3, #0]
     490:	7bd3      	ldrb	r3, [r2, #15]
     492:	2108      	movs	r1, #8
     494:	430b      	orrs	r3, r1
     496:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     498:	2100      	movs	r1, #0
     49a:	4874      	ldr	r0, [pc, #464]	; (66c <sd_mmc_check+0x334>)
     49c:	4b5f      	ldr	r3, [pc, #380]	; (61c <sd_mmc_check+0x2e4>)
     49e:	4798      	blx	r3
     4a0:	2800      	cmp	r0, #0
     4a2:	d100      	bne.n	4a6 <sd_mmc_check+0x16e>
     4a4:	e76b      	b.n	37e <sd_mmc_check+0x46>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     4a6:	4b59      	ldr	r3, [pc, #356]	; (60c <sd_mmc_check+0x2d4>)
     4a8:	681b      	ldr	r3, [r3, #0]
     4aa:	7bdb      	ldrb	r3, [r3, #15]
     4ac:	07da      	lsls	r2, r3, #31
     4ae:	d400      	bmi.n	4b2 <sd_mmc_check+0x17a>
     4b0:	e1d1      	b.n	856 <sd_mmc_check+0x51e>
		if (!sd_mmc_cmd9_spi()) {
     4b2:	4b6f      	ldr	r3, [pc, #444]	; (670 <sd_mmc_check+0x338>)
     4b4:	4798      	blx	r3
     4b6:	2800      	cmp	r0, #0
     4b8:	d100      	bne.n	4bc <sd_mmc_check+0x184>
     4ba:	e760      	b.n	37e <sd_mmc_check+0x46>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     4bc:	4b53      	ldr	r3, [pc, #332]	; (60c <sd_mmc_check+0x2d4>)
     4be:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4c0:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     4c2:	2107      	movs	r1, #7
     4c4:	4019      	ands	r1, r3
     4c6:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     4c8:	486a      	ldr	r0, [pc, #424]	; (674 <sd_mmc_check+0x33c>)
     4ca:	5808      	ldr	r0, [r1, r0]
     4cc:	21fa      	movs	r1, #250	; 0xfa
     4ce:	0089      	lsls	r1, r1, #2
     4d0:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     4d2:	065b      	lsls	r3, r3, #25
     4d4:	0f1b      	lsrs	r3, r3, #28
     4d6:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     4d8:	4867      	ldr	r0, [pc, #412]	; (678 <sd_mmc_check+0x340>)
     4da:	581b      	ldr	r3, [r3, r0]
     4dc:	434b      	muls	r3, r1
     4de:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     4e0:	7c93      	ldrb	r3, [r2, #18]
     4e2:	099b      	lsrs	r3, r3, #6
     4e4:	d000      	beq.n	4e8 <sd_mmc_check+0x1b0>
     4e6:	e163      	b.n	7b0 <sd_mmc_check+0x478>
     4e8:	7e91      	ldrb	r1, [r2, #26]
     4ea:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4ec:	7e53      	ldrb	r3, [r2, #25]
     4ee:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4f0:	7e10      	ldrb	r0, [r2, #24]
     4f2:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4f4:	4303      	orrs	r3, r0
     4f6:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4f8:	7f10      	ldrb	r0, [r2, #28]
     4fa:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4fc:	7ed1      	ldrb	r1, [r2, #27]
     4fe:	0049      	lsls	r1, r1, #1
     500:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     502:	051b      	lsls	r3, r3, #20
     504:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     506:	3301      	adds	r3, #1
     508:	2107      	movs	r1, #7
     50a:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     50c:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     50e:	408b      	lsls	r3, r1
     510:	7dd0      	ldrb	r0, [r2, #23]
     512:	210f      	movs	r1, #15
     514:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     516:	408b      	lsls	r3, r1
				/ 1024;
     518:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     51a:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     51c:	8991      	ldrh	r1, [r2, #12]
     51e:	0409      	lsls	r1, r1, #16
     520:	4856      	ldr	r0, [pc, #344]	; (67c <sd_mmc_check+0x344>)
     522:	4b3e      	ldr	r3, [pc, #248]	; (61c <sd_mmc_check+0x2e4>)
     524:	4798      	blx	r3
     526:	2800      	cmp	r0, #0
     528:	d100      	bne.n	52c <sd_mmc_check+0x1f4>
     52a:	e728      	b.n	37e <sd_mmc_check+0x46>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     52c:	2301      	movs	r3, #1
     52e:	9300      	str	r3, [sp, #0]
     530:	2208      	movs	r2, #8
     532:	2100      	movs	r1, #0
     534:	4852      	ldr	r0, [pc, #328]	; (680 <sd_mmc_check+0x348>)
     536:	4d53      	ldr	r5, [pc, #332]	; (684 <sd_mmc_check+0x34c>)
     538:	47a8      	blx	r5
     53a:	2800      	cmp	r0, #0
     53c:	d100      	bne.n	540 <sd_mmc_check+0x208>
     53e:	e71e      	b.n	37e <sd_mmc_check+0x46>
	if (!driver_start_read_blocks(scr, 1)) {
     540:	2101      	movs	r1, #1
     542:	a806      	add	r0, sp, #24
     544:	4b50      	ldr	r3, [pc, #320]	; (688 <sd_mmc_check+0x350>)
     546:	4798      	blx	r3
     548:	2800      	cmp	r0, #0
     54a:	d100      	bne.n	54e <sd_mmc_check+0x216>
     54c:	e717      	b.n	37e <sd_mmc_check+0x46>
	if (!driver_wait_end_of_read_blocks()) {
     54e:	4b4f      	ldr	r3, [pc, #316]	; (68c <sd_mmc_check+0x354>)
     550:	4798      	blx	r3
     552:	2800      	cmp	r0, #0
     554:	d100      	bne.n	558 <sd_mmc_check+0x220>
     556:	e712      	b.n	37e <sd_mmc_check+0x46>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     558:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     55a:	781b      	ldrb	r3, [r3, #0]
     55c:	220f      	movs	r2, #15
     55e:	4013      	ands	r3, r2
     560:	2b01      	cmp	r3, #1
     562:	d100      	bne.n	566 <sd_mmc_check+0x22e>
     564:	e140      	b.n	7e8 <sd_mmc_check+0x4b0>
     566:	2b00      	cmp	r3, #0
     568:	d100      	bne.n	56c <sd_mmc_check+0x234>
     56a:	e130      	b.n	7ce <sd_mmc_check+0x496>
     56c:	2b02      	cmp	r3, #2
     56e:	d100      	bne.n	572 <sd_mmc_check+0x23a>
     570:	e13f      	b.n	7f2 <sd_mmc_check+0x4ba>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     572:	4b26      	ldr	r3, [pc, #152]	; (60c <sd_mmc_check+0x2d4>)
     574:	681b      	ldr	r3, [r3, #0]
     576:	2210      	movs	r2, #16
     578:	741a      	strb	r2, [r3, #16]
     57a:	e12c      	b.n	7d6 <sd_mmc_check+0x49e>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
     57c:	4932      	ldr	r1, [pc, #200]	; (648 <sd_mmc_check+0x310>)
     57e:	4844      	ldr	r0, [pc, #272]	; (690 <sd_mmc_check+0x358>)
     580:	4b24      	ldr	r3, [pc, #144]	; (614 <sd_mmc_check+0x2dc>)
     582:	4798      	blx	r3
     584:	e751      	b.n	42a <sd_mmc_check+0xf2>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
     586:	4a33      	ldr	r2, [pc, #204]	; (654 <sd_mmc_check+0x31c>)
     588:	1b52      	subs	r2, r2, r5
     58a:	4934      	ldr	r1, [pc, #208]	; (65c <sd_mmc_check+0x324>)
     58c:	4841      	ldr	r0, [pc, #260]	; (694 <sd_mmc_check+0x35c>)
     58e:	4b21      	ldr	r3, [pc, #132]	; (614 <sd_mmc_check+0x2dc>)
     590:	4798      	blx	r3
     592:	e6f4      	b.n	37e <sd_mmc_check+0x46>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     594:	2100      	movs	r1, #0
     596:	4834      	ldr	r0, [pc, #208]	; (668 <sd_mmc_check+0x330>)
     598:	4b20      	ldr	r3, [pc, #128]	; (61c <sd_mmc_check+0x2e4>)
     59a:	4798      	blx	r3
     59c:	2800      	cmp	r0, #0
     59e:	d025      	beq.n	5ec <sd_mmc_check+0x2b4>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     5a0:	4b25      	ldr	r3, [pc, #148]	; (638 <sd_mmc_check+0x300>)
     5a2:	4798      	blx	r3
     5a4:	23c0      	movs	r3, #192	; 0xc0
     5a6:	05db      	lsls	r3, r3, #23
     5a8:	4018      	ands	r0, r3
     5aa:	2380      	movs	r3, #128	; 0x80
     5ac:	05db      	lsls	r3, r3, #23
     5ae:	4298      	cmp	r0, r3
     5b0:	d021      	beq.n	5f6 <sd_mmc_check+0x2be>
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     5b2:	2100      	movs	r1, #0
     5b4:	482d      	ldr	r0, [pc, #180]	; (66c <sd_mmc_check+0x334>)
     5b6:	4b19      	ldr	r3, [pc, #100]	; (61c <sd_mmc_check+0x2e4>)
     5b8:	4798      	blx	r3
     5ba:	2800      	cmp	r0, #0
     5bc:	d100      	bne.n	5c0 <sd_mmc_check+0x288>
     5be:	e6de      	b.n	37e <sd_mmc_check+0x46>
	if (!sd_mmc_cmd9_spi()) {
     5c0:	4b2b      	ldr	r3, [pc, #172]	; (670 <sd_mmc_check+0x338>)
     5c2:	4798      	blx	r3
     5c4:	2800      	cmp	r0, #0
     5c6:	d100      	bne.n	5ca <sd_mmc_check+0x292>
     5c8:	e6d9      	b.n	37e <sd_mmc_check+0x46>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     5ca:	4b10      	ldr	r3, [pc, #64]	; (60c <sd_mmc_check+0x2d4>)
     5cc:	681a      	ldr	r2, [r3, #0]
     5ce:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     5d0:	069b      	lsls	r3, r3, #26
     5d2:	0f1b      	lsrs	r3, r3, #28
     5d4:	2b02      	cmp	r3, #2
     5d6:	d100      	bne.n	5da <sd_mmc_check+0x2a2>
     5d8:	e0ca      	b.n	770 <sd_mmc_check+0x438>
     5da:	d95d      	bls.n	698 <sd_mmc_check+0x360>
     5dc:	2b03      	cmp	r3, #3
     5de:	d100      	bne.n	5e2 <sd_mmc_check+0x2aa>
     5e0:	e0c9      	b.n	776 <sd_mmc_check+0x43e>
     5e2:	2b04      	cmp	r3, #4
     5e4:	d15a      	bne.n	69c <sd_mmc_check+0x364>
		sd_mmc_card->version = CARD_VER_MMC_4;
     5e6:	2340      	movs	r3, #64	; 0x40
     5e8:	7413      	strb	r3, [r2, #16]
     5ea:	e059      	b.n	6a0 <sd_mmc_check+0x368>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
     5ec:	491b      	ldr	r1, [pc, #108]	; (65c <sd_mmc_check+0x324>)
     5ee:	4828      	ldr	r0, [pc, #160]	; (690 <sd_mmc_check+0x358>)
     5f0:	4b08      	ldr	r3, [pc, #32]	; (614 <sd_mmc_check+0x2dc>)
     5f2:	4798      	blx	r3
     5f4:	e6c3      	b.n	37e <sd_mmc_check+0x46>
		sd_mmc_card->type |= CARD_TYPE_HC;
     5f6:	4b05      	ldr	r3, [pc, #20]	; (60c <sd_mmc_check+0x2d4>)
     5f8:	681a      	ldr	r2, [r3, #0]
     5fa:	7bd1      	ldrb	r1, [r2, #15]
     5fc:	2308      	movs	r3, #8
     5fe:	430b      	orrs	r3, r1
     600:	73d3      	strb	r3, [r2, #15]
     602:	e7d6      	b.n	5b2 <sd_mmc_check+0x27a>
     604:	00000149 	.word	0x00000149
     608:	000002fd 	.word	0x000002fd
     60c:	200000b4 	.word	0x200000b4
     610:	000095ac 	.word	0x000095ac
     614:	000080ed 	.word	0x000080ed
     618:	000055ed 	.word	0x000055ed
     61c:	000057b5 	.word	0x000057b5
     620:	000096a8 	.word	0x000096a8
     624:	00005508 	.word	0x00005508
     628:	00001110 	.word	0x00001110
     62c:	00000265 	.word	0x00000265
     630:	0000011d 	.word	0x0000011d
     634:	000096e0 	.word	0x000096e0
     638:	000057cd 	.word	0x000057cd
     63c:	00009554 	.word	0x00009554
     640:	000095c4 	.word	0x000095c4
     644:	000095ec 	.word	0x000095ec
     648:	00009544 	.word	0x00009544
     64c:	000095fc 	.word	0x000095fc
     650:	000096cc 	.word	0x000096cc
     654:	00001bee 	.word	0x00001bee
     658:	00001101 	.word	0x00001101
     65c:	00009534 	.word	0x00009534
     660:	0000968c 	.word	0x0000968c
     664:	00009610 	.word	0x00009610
     668:	0000053a 	.word	0x0000053a
     66c:	0000113b 	.word	0x0000113b
     670:	000002b1 	.word	0x000002b1
     674:	00009710 	.word	0x00009710
     678:	0000972c 	.word	0x0000972c
     67c:	00001137 	.word	0x00001137
     680:	00081133 	.word	0x00081133
     684:	00005625 	.word	0x00005625
     688:	00005851 	.word	0x00005851
     68c:	000058dd 	.word	0x000058dd
     690:	00009654 	.word	0x00009654
     694:	00009668 	.word	0x00009668
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     698:	2b01      	cmp	r3, #1
     69a:	d066      	beq.n	76a <sd_mmc_check+0x432>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     69c:	2312      	movs	r3, #18
     69e:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     6a0:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     6a2:	0659      	lsls	r1, r3, #25
     6a4:	0f09      	lsrs	r1, r1, #28
     6a6:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     6a8:	2007      	movs	r0, #7
     6aa:	4003      	ands	r3, r0
     6ac:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     6ae:	486d      	ldr	r0, [pc, #436]	; (864 <sd_mmc_check+0x52c>)
     6b0:	5818      	ldr	r0, [r3, r0]
     6b2:	23fa      	movs	r3, #250	; 0xfa
     6b4:	009b      	lsls	r3, r3, #2
     6b6:	4343      	muls	r3, r0
     6b8:	486b      	ldr	r0, [pc, #428]	; (868 <sd_mmc_check+0x530>)
     6ba:	5809      	ldr	r1, [r1, r0]
     6bc:	434b      	muls	r3, r1
     6be:	6013      	str	r3, [r2, #0]
     6c0:	7e91      	ldrb	r1, [r2, #26]
     6c2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     6c4:	7e53      	ldrb	r3, [r2, #25]
     6c6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     6c8:	7e10      	ldrb	r0, [r2, #24]
     6ca:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     6cc:	4303      	orrs	r3, r0
     6ce:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     6d0:	051b      	lsls	r3, r3, #20
     6d2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     6d4:	4965      	ldr	r1, [pc, #404]	; (86c <sd_mmc_check+0x534>)
     6d6:	428b      	cmp	r3, r1
     6d8:	d00f      	beq.n	6fa <sd_mmc_check+0x3c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     6da:	7f10      	ldrb	r0, [r2, #28]
     6dc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     6de:	7ed1      	ldrb	r1, [r2, #27]
     6e0:	0049      	lsls	r1, r1, #1
     6e2:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     6e4:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     6e6:	2007      	movs	r0, #7
     6e8:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     6ea:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     6ec:	408b      	lsls	r3, r1
     6ee:	7dd1      	ldrb	r1, [r2, #23]
     6f0:	3008      	adds	r0, #8
     6f2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     6f4:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     6f6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     6f8:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     6fa:	7c13      	ldrb	r3, [r2, #16]
     6fc:	2b3f      	cmp	r3, #63	; 0x3f
     6fe:	d947      	bls.n	790 <sd_mmc_check+0x458>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     700:	2100      	movs	r1, #0
     702:	9100      	str	r1, [sp, #0]
     704:	2301      	movs	r3, #1
     706:	2280      	movs	r2, #128	; 0x80
     708:	0092      	lsls	r2, r2, #2
     70a:	4859      	ldr	r0, [pc, #356]	; (870 <sd_mmc_check+0x538>)
     70c:	4d59      	ldr	r5, [pc, #356]	; (874 <sd_mmc_check+0x53c>)
     70e:	47a8      	blx	r5
     710:	2800      	cmp	r0, #0
     712:	d100      	bne.n	716 <sd_mmc_check+0x3de>
     714:	e633      	b.n	37e <sd_mmc_check+0x46>
     716:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     718:	4e57      	ldr	r6, [pc, #348]	; (878 <sd_mmc_check+0x540>)
     71a:	a805      	add	r0, sp, #20
     71c:	47b0      	blx	r6
     71e:	2800      	cmp	r0, #0
     720:	d100      	bne.n	724 <sd_mmc_check+0x3ec>
     722:	e62c      	b.n	37e <sd_mmc_check+0x46>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     724:	3501      	adds	r5, #1
     726:	b2ad      	uxth	r5, r5
     728:	2d32      	cmp	r5, #50	; 0x32
     72a:	d1f6      	bne.n	71a <sd_mmc_check+0x3e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     72c:	4b53      	ldr	r3, [pc, #332]	; (87c <sd_mmc_check+0x544>)
     72e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     730:	7e8a      	ldrb	r2, [r1, #26]
     732:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     734:	7e4b      	ldrb	r3, [r1, #25]
     736:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     738:	7e09      	ldrb	r1, [r1, #24]
     73a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     73c:	430b      	orrs	r3, r1
     73e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     740:	051b      	lsls	r3, r3, #20
     742:	0d1b      	lsrs	r3, r3, #20
     744:	4a49      	ldr	r2, [pc, #292]	; (86c <sd_mmc_check+0x534>)
     746:	4293      	cmp	r3, r2
     748:	d120      	bne.n	78c <sd_mmc_check+0x454>
			if (!driver_read_word(&sec_count)) {
     74a:	4e4b      	ldr	r6, [pc, #300]	; (878 <sd_mmc_check+0x540>)
     74c:	a806      	add	r0, sp, #24
     74e:	47b0      	blx	r6
     750:	2800      	cmp	r0, #0
     752:	d100      	bne.n	756 <sd_mmc_check+0x41e>
     754:	e613      	b.n	37e <sd_mmc_check+0x46>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     756:	3501      	adds	r5, #1
     758:	b2ad      	uxth	r5, r5
     75a:	2d35      	cmp	r5, #53	; 0x35
     75c:	d9f6      	bls.n	74c <sd_mmc_check+0x414>
		sd_mmc_card->capacity = sec_count / 2;
     75e:	4b47      	ldr	r3, [pc, #284]	; (87c <sd_mmc_check+0x544>)
     760:	681a      	ldr	r2, [r3, #0]
     762:	9b06      	ldr	r3, [sp, #24]
     764:	085b      	lsrs	r3, r3, #1
     766:	6053      	str	r3, [r2, #4]
     768:	e010      	b.n	78c <sd_mmc_check+0x454>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     76a:	2314      	movs	r3, #20
     76c:	7413      	strb	r3, [r2, #16]
     76e:	e797      	b.n	6a0 <sd_mmc_check+0x368>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     770:	2322      	movs	r3, #34	; 0x22
     772:	7413      	strb	r3, [r2, #16]
     774:	e794      	b.n	6a0 <sd_mmc_check+0x368>
		sd_mmc_card->version = CARD_VER_MMC_3;
     776:	2330      	movs	r3, #48	; 0x30
     778:	7413      	strb	r3, [r2, #16]
     77a:	e791      	b.n	6a0 <sd_mmc_check+0x368>
		if (!driver_read_word(&sec_count)) {
     77c:	a806      	add	r0, sp, #24
     77e:	4b3e      	ldr	r3, [pc, #248]	; (878 <sd_mmc_check+0x540>)
     780:	4798      	blx	r3
     782:	2800      	cmp	r0, #0
     784:	d100      	bne.n	788 <sd_mmc_check+0x450>
     786:	e5fa      	b.n	37e <sd_mmc_check+0x46>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     788:	3501      	adds	r5, #1
     78a:	b2ad      	uxth	r5, r5
     78c:	2d7f      	cmp	r5, #127	; 0x7f
     78e:	d9f5      	bls.n	77c <sd_mmc_check+0x444>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     790:	2180      	movs	r1, #128	; 0x80
     792:	0089      	lsls	r1, r1, #2
     794:	483a      	ldr	r0, [pc, #232]	; (880 <sd_mmc_check+0x548>)
     796:	4b3b      	ldr	r3, [pc, #236]	; (884 <sd_mmc_check+0x54c>)
     798:	4798      	blx	r3
     79a:	2800      	cmp	r0, #0
     79c:	d100      	bne.n	7a0 <sd_mmc_check+0x468>
     79e:	e5ee      	b.n	37e <sd_mmc_check+0x46>
	if (!sd_mmc_cmd13()) {
     7a0:	4b39      	ldr	r3, [pc, #228]	; (888 <sd_mmc_check+0x550>)
     7a2:	4798      	blx	r3
     7a4:	2800      	cmp	r0, #0
     7a6:	d100      	bne.n	7aa <sd_mmc_check+0x472>
     7a8:	e5e9      	b.n	37e <sd_mmc_check+0x46>
	sd_mmc_configure_slot();
     7aa:	4b38      	ldr	r3, [pc, #224]	; (88c <sd_mmc_check+0x554>)
     7ac:	4798      	blx	r3
     7ae:	e618      	b.n	3e2 <sd_mmc_check+0xaa>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     7b0:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     7b2:	7e93      	ldrb	r3, [r2, #26]
     7b4:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     7b6:	7e51      	ldrb	r1, [r2, #25]
     7b8:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     7ba:	430b      	orrs	r3, r1
     7bc:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     7be:	029b      	lsls	r3, r3, #10
				* 512;
     7c0:	085b      	lsrs	r3, r3, #1
     7c2:	2180      	movs	r1, #128	; 0x80
     7c4:	0089      	lsls	r1, r1, #2
     7c6:	468c      	mov	ip, r1
     7c8:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     7ca:	6053      	str	r3, [r2, #4]
     7cc:	e6a6      	b.n	51c <sd_mmc_check+0x1e4>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     7ce:	4b2b      	ldr	r3, [pc, #172]	; (87c <sd_mmc_check+0x544>)
     7d0:	681b      	ldr	r3, [r3, #0]
     7d2:	2210      	movs	r2, #16
     7d4:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     7d6:	4b29      	ldr	r3, [pc, #164]	; (87c <sd_mmc_check+0x544>)
     7d8:	681b      	ldr	r3, [r3, #0]
     7da:	7bdb      	ldrb	r3, [r3, #15]
     7dc:	2209      	movs	r2, #9
     7de:	4013      	ands	r3, r2
     7e0:	2b01      	cmp	r3, #1
     7e2:	d000      	beq.n	7e6 <sd_mmc_check+0x4ae>
     7e4:	e5f2      	b.n	3cc <sd_mmc_check+0x94>
     7e6:	e5ea      	b.n	3be <sd_mmc_check+0x86>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     7e8:	4b24      	ldr	r3, [pc, #144]	; (87c <sd_mmc_check+0x544>)
     7ea:	681b      	ldr	r3, [r3, #0]
     7ec:	221a      	movs	r2, #26
     7ee:	741a      	strb	r2, [r3, #16]
     7f0:	e7f1      	b.n	7d6 <sd_mmc_check+0x49e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     7f2:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     7f4:	789b      	ldrb	r3, [r3, #2]
     7f6:	09db      	lsrs	r3, r3, #7
     7f8:	2b01      	cmp	r3, #1
     7fa:	d104      	bne.n	806 <sd_mmc_check+0x4ce>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     7fc:	4b1f      	ldr	r3, [pc, #124]	; (87c <sd_mmc_check+0x544>)
     7fe:	681b      	ldr	r3, [r3, #0]
     800:	2230      	movs	r2, #48	; 0x30
     802:	741a      	strb	r2, [r3, #16]
     804:	e7e7      	b.n	7d6 <sd_mmc_check+0x49e>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     806:	4b1d      	ldr	r3, [pc, #116]	; (87c <sd_mmc_check+0x544>)
     808:	681b      	ldr	r3, [r3, #0]
     80a:	2220      	movs	r2, #32
     80c:	741a      	strb	r2, [r3, #16]
     80e:	e7e2      	b.n	7d6 <sd_mmc_check+0x49e>
	*v2 = 0;
     810:	2600      	movs	r6, #0
     812:	e5c7      	b.n	3a4 <sd_mmc_check+0x6c>
     814:	1e73      	subs	r3, r6, #1
     816:	419e      	sbcs	r6, r3
     818:	07b3      	lsls	r3, r6, #30
     81a:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     81c:	4d1c      	ldr	r5, [pc, #112]	; (890 <sd_mmc_check+0x558>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     81e:	4f19      	ldr	r7, [pc, #100]	; (884 <sd_mmc_check+0x54c>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     820:	46b8      	mov	r8, r7
		resp = driver_get_response();
     822:	4e1c      	ldr	r6, [pc, #112]	; (894 <sd_mmc_check+0x55c>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     824:	2100      	movs	r1, #0
     826:	481c      	ldr	r0, [pc, #112]	; (898 <sd_mmc_check+0x560>)
     828:	47b8      	blx	r7
     82a:	2800      	cmp	r0, #0
     82c:	d100      	bne.n	830 <sd_mmc_check+0x4f8>
     82e:	e5f8      	b.n	422 <sd_mmc_check+0xea>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     830:	9903      	ldr	r1, [sp, #12]
     832:	481a      	ldr	r0, [pc, #104]	; (89c <sd_mmc_check+0x564>)
     834:	47c0      	blx	r8
     836:	2800      	cmp	r0, #0
     838:	d100      	bne.n	83c <sd_mmc_check+0x504>
     83a:	e618      	b.n	46e <sd_mmc_check+0x136>
		resp = driver_get_response();
     83c:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     83e:	07c3      	lsls	r3, r0, #31
     840:	d400      	bmi.n	844 <sd_mmc_check+0x50c>
     842:	e619      	b.n	478 <sd_mmc_check+0x140>
     844:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     846:	2d00      	cmp	r5, #0
     848:	d1ec      	bne.n	824 <sd_mmc_check+0x4ec>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
     84a:	0002      	movs	r2, r0
     84c:	4914      	ldr	r1, [pc, #80]	; (8a0 <sd_mmc_check+0x568>)
     84e:	4815      	ldr	r0, [pc, #84]	; (8a4 <sd_mmc_check+0x56c>)
     850:	4b15      	ldr	r3, [pc, #84]	; (8a8 <sd_mmc_check+0x570>)
     852:	4798      	blx	r3
     854:	e5e9      	b.n	42a <sd_mmc_check+0xf2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     856:	2209      	movs	r2, #9
     858:	4013      	ands	r3, r2
     85a:	2b01      	cmp	r3, #1
     85c:	d000      	beq.n	860 <sd_mmc_check+0x528>
     85e:	e5be      	b.n	3de <sd_mmc_check+0xa6>
     860:	e5ad      	b.n	3be <sd_mmc_check+0x86>
     862:	46c0      	nop			; (mov r8, r8)
     864:	00009710 	.word	0x00009710
     868:	0000956c 	.word	0x0000956c
     86c:	00000fff 	.word	0x00000fff
     870:	00081108 	.word	0x00081108
     874:	00005625 	.word	0x00005625
     878:	000057d9 	.word	0x000057d9
     87c:	200000b4 	.word	0x200000b4
     880:	00001110 	.word	0x00001110
     884:	000057b5 	.word	0x000057b5
     888:	00000265 	.word	0x00000265
     88c:	0000011d 	.word	0x0000011d
     890:	00001bef 	.word	0x00001bef
     894:	000057cd 	.word	0x000057cd
     898:	00001137 	.word	0x00001137
     89c:	00001129 	.word	0x00001129
     8a0:	00009544 	.word	0x00009544
     8a4:	00009624 	.word	0x00009624
     8a8:	000080ed 	.word	0x000080ed

000008ac <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     8ac:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     8ae:	4b06      	ldr	r3, [pc, #24]	; (8c8 <sd_mmc_get_type+0x1c>)
     8b0:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     8b2:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     8b4:	2800      	cmp	r0, #0
     8b6:	d001      	beq.n	8bc <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     8b8:	0018      	movs	r0, r3
     8ba:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     8bc:	4b03      	ldr	r3, [pc, #12]	; (8cc <sd_mmc_get_type+0x20>)
     8be:	4798      	blx	r3
	return sd_mmc_card->type;
     8c0:	4b03      	ldr	r3, [pc, #12]	; (8d0 <sd_mmc_get_type+0x24>)
     8c2:	681b      	ldr	r3, [r3, #0]
     8c4:	7bdb      	ldrb	r3, [r3, #15]
     8c6:	e7f7      	b.n	8b8 <sd_mmc_get_type+0xc>
     8c8:	00000149 	.word	0x00000149
     8cc:	000002fd 	.word	0x000002fd
     8d0:	200000b4 	.word	0x200000b4

000008d4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     8d4:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     8d6:	4b06      	ldr	r3, [pc, #24]	; (8f0 <sd_mmc_get_capacity+0x1c>)
     8d8:	4798      	blx	r3
		return 0;
     8da:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     8dc:	2800      	cmp	r0, #0
     8de:	d001      	beq.n	8e4 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     8e0:	0018      	movs	r0, r3
     8e2:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     8e4:	4b03      	ldr	r3, [pc, #12]	; (8f4 <sd_mmc_get_capacity+0x20>)
     8e6:	4798      	blx	r3
	return sd_mmc_card->capacity;
     8e8:	4b03      	ldr	r3, [pc, #12]	; (8f8 <sd_mmc_get_capacity+0x24>)
     8ea:	681b      	ldr	r3, [r3, #0]
     8ec:	685b      	ldr	r3, [r3, #4]
     8ee:	e7f7      	b.n	8e0 <sd_mmc_get_capacity+0xc>
     8f0:	00000149 	.word	0x00000149
     8f4:	000002fd 	.word	0x000002fd
     8f8:	200000b4 	.word	0x200000b4

000008fc <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     8fc:	2000      	movs	r0, #0
     8fe:	4770      	bx	lr

00000900 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     900:	b570      	push	{r4, r5, r6, lr}
     902:	b082      	sub	sp, #8
     904:	000e      	movs	r6, r1
     906:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     908:	4b16      	ldr	r3, [pc, #88]	; (964 <sd_mmc_init_read_blocks+0x64>)
     90a:	4798      	blx	r3
     90c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     90e:	d002      	beq.n	916 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     910:	0020      	movs	r0, r4
     912:	b002      	add	sp, #8
     914:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     916:	4b14      	ldr	r3, [pc, #80]	; (968 <sd_mmc_init_read_blocks+0x68>)
     918:	4798      	blx	r3
     91a:	2800      	cmp	r0, #0
     91c:	d017      	beq.n	94e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     91e:	2d01      	cmp	r5, #1
     920:	d919      	bls.n	956 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     922:	4812      	ldr	r0, [pc, #72]	; (96c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     924:	4b12      	ldr	r3, [pc, #72]	; (970 <sd_mmc_init_read_blocks+0x70>)
     926:	681b      	ldr	r3, [r3, #0]
     928:	7bdb      	ldrb	r3, [r3, #15]
     92a:	071b      	lsls	r3, r3, #28
     92c:	d400      	bmi.n	930 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     92e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     930:	2301      	movs	r3, #1
     932:	9300      	str	r3, [sp, #0]
     934:	002b      	movs	r3, r5
     936:	2280      	movs	r2, #128	; 0x80
     938:	0092      	lsls	r2, r2, #2
     93a:	0031      	movs	r1, r6
     93c:	4e0d      	ldr	r6, [pc, #52]	; (974 <sd_mmc_init_read_blocks+0x74>)
     93e:	47b0      	blx	r6
     940:	2800      	cmp	r0, #0
     942:	d00a      	beq.n	95a <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     944:	4b0c      	ldr	r3, [pc, #48]	; (978 <sd_mmc_init_read_blocks+0x78>)
     946:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     948:	4b0c      	ldr	r3, [pc, #48]	; (97c <sd_mmc_init_read_blocks+0x7c>)
     94a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     94c:	e7e0      	b.n	910 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     94e:	4b0c      	ldr	r3, [pc, #48]	; (980 <sd_mmc_init_read_blocks+0x80>)
     950:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     952:	3405      	adds	r4, #5
     954:	e7dc      	b.n	910 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     956:	480b      	ldr	r0, [pc, #44]	; (984 <sd_mmc_init_read_blocks+0x84>)
     958:	e7e4      	b.n	924 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     95a:	4b09      	ldr	r3, [pc, #36]	; (980 <sd_mmc_init_read_blocks+0x80>)
     95c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     95e:	2405      	movs	r4, #5
     960:	e7d6      	b.n	910 <sd_mmc_init_read_blocks+0x10>
     962:	46c0      	nop			; (mov r8, r8)
     964:	00000149 	.word	0x00000149
     968:	00000265 	.word	0x00000265
     96c:	00101112 	.word	0x00101112
     970:	200000b4 	.word	0x200000b4
     974:	00005625 	.word	0x00005625
     978:	200000b8 	.word	0x200000b8
     97c:	200000ba 	.word	0x200000ba
     980:	000002fd 	.word	0x000002fd
     984:	00081111 	.word	0x00081111

00000988 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     988:	b510      	push	{r4, lr}
     98a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     98c:	4b07      	ldr	r3, [pc, #28]	; (9ac <sd_mmc_start_read_blocks+0x24>)
     98e:	4798      	blx	r3
     990:	2800      	cmp	r0, #0
     992:	d104      	bne.n	99e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     994:	2200      	movs	r2, #0
     996:	4b06      	ldr	r3, [pc, #24]	; (9b0 <sd_mmc_start_read_blocks+0x28>)
     998:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     99a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     99c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     99e:	4a04      	ldr	r2, [pc, #16]	; (9b0 <sd_mmc_start_read_blocks+0x28>)
     9a0:	8813      	ldrh	r3, [r2, #0]
     9a2:	1b1c      	subs	r4, r3, r4
     9a4:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     9a6:	2000      	movs	r0, #0
     9a8:	e7f8      	b.n	99c <sd_mmc_start_read_blocks+0x14>
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	00005851 	.word	0x00005851
     9b0:	200000b8 	.word	0x200000b8

000009b4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     9b4:	b510      	push	{r4, lr}
     9b6:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     9b8:	4b14      	ldr	r3, [pc, #80]	; (a0c <sd_mmc_wait_end_of_read_blocks+0x58>)
     9ba:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     9bc:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     9be:	2800      	cmp	r0, #0
     9c0:	d101      	bne.n	9c6 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     9c2:	0018      	movs	r0, r3
     9c4:	bd10      	pop	{r4, pc}
	if (abort) {
     9c6:	2c00      	cmp	r4, #0
     9c8:	d010      	beq.n	9ec <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     9ca:	2200      	movs	r2, #0
     9cc:	4b10      	ldr	r3, [pc, #64]	; (a10 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     9ce:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     9d0:	4b10      	ldr	r3, [pc, #64]	; (a14 <sd_mmc_wait_end_of_read_blocks+0x60>)
     9d2:	881b      	ldrh	r3, [r3, #0]
     9d4:	2b01      	cmp	r3, #1
     9d6:	d00f      	beq.n	9f8 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     9d8:	2100      	movs	r1, #0
     9da:	480f      	ldr	r0, [pc, #60]	; (a18 <sd_mmc_wait_end_of_read_blocks+0x64>)
     9dc:	4b0f      	ldr	r3, [pc, #60]	; (a1c <sd_mmc_wait_end_of_read_blocks+0x68>)
     9de:	4798      	blx	r3
     9e0:	2800      	cmp	r0, #0
     9e2:	d00d      	beq.n	a00 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     9e4:	4b0e      	ldr	r3, [pc, #56]	; (a20 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     9e6:	4798      	blx	r3
	return SD_MMC_OK;
     9e8:	2300      	movs	r3, #0
     9ea:	e7ea      	b.n	9c2 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     9ec:	4b08      	ldr	r3, [pc, #32]	; (a10 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     9ee:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     9f0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     9f2:	2a00      	cmp	r2, #0
     9f4:	d0ec      	beq.n	9d0 <sd_mmc_wait_end_of_read_blocks+0x1c>
     9f6:	e7e4      	b.n	9c2 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     9f8:	4b09      	ldr	r3, [pc, #36]	; (a20 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     9fa:	4798      	blx	r3
		return SD_MMC_OK;
     9fc:	2300      	movs	r3, #0
     9fe:	e7e0      	b.n	9c2 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     a00:	2100      	movs	r1, #0
     a02:	4805      	ldr	r0, [pc, #20]	; (a18 <sd_mmc_wait_end_of_read_blocks+0x64>)
     a04:	4b05      	ldr	r3, [pc, #20]	; (a1c <sd_mmc_wait_end_of_read_blocks+0x68>)
     a06:	4798      	blx	r3
     a08:	e7ec      	b.n	9e4 <sd_mmc_wait_end_of_read_blocks+0x30>
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	000058dd 	.word	0x000058dd
     a10:	200000b8 	.word	0x200000b8
     a14:	200000ba 	.word	0x200000ba
     a18:	0000310c 	.word	0x0000310c
     a1c:	000057b5 	.word	0x000057b5
     a20:	000002fd 	.word	0x000002fd

00000a24 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     a24:	b570      	push	{r4, r5, r6, lr}
     a26:	b082      	sub	sp, #8
     a28:	000e      	movs	r6, r1
     a2a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     a2c:	4b11      	ldr	r3, [pc, #68]	; (a74 <sd_mmc_init_write_blocks+0x50>)
     a2e:	4798      	blx	r3
     a30:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     a32:	d116      	bne.n	a62 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     a34:	2d01      	cmp	r5, #1
     a36:	d917      	bls.n	a68 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     a38:	480f      	ldr	r0, [pc, #60]	; (a78 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     a3a:	4b10      	ldr	r3, [pc, #64]	; (a7c <sd_mmc_init_write_blocks+0x58>)
     a3c:	681b      	ldr	r3, [r3, #0]
     a3e:	7bdb      	ldrb	r3, [r3, #15]
     a40:	071b      	lsls	r3, r3, #28
     a42:	d400      	bmi.n	a46 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     a44:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     a46:	2301      	movs	r3, #1
     a48:	9300      	str	r3, [sp, #0]
     a4a:	002b      	movs	r3, r5
     a4c:	2280      	movs	r2, #128	; 0x80
     a4e:	0092      	lsls	r2, r2, #2
     a50:	0031      	movs	r1, r6
     a52:	4e0b      	ldr	r6, [pc, #44]	; (a80 <sd_mmc_init_write_blocks+0x5c>)
     a54:	47b0      	blx	r6
     a56:	2800      	cmp	r0, #0
     a58:	d008      	beq.n	a6c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     a5a:	4b0a      	ldr	r3, [pc, #40]	; (a84 <sd_mmc_init_write_blocks+0x60>)
     a5c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     a5e:	4b0a      	ldr	r3, [pc, #40]	; (a88 <sd_mmc_init_write_blocks+0x64>)
     a60:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     a62:	0020      	movs	r0, r4
     a64:	b002      	add	sp, #8
     a66:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     a68:	4808      	ldr	r0, [pc, #32]	; (a8c <sd_mmc_init_write_blocks+0x68>)
     a6a:	e7e6      	b.n	a3a <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     a6c:	4b08      	ldr	r3, [pc, #32]	; (a90 <sd_mmc_init_write_blocks+0x6c>)
     a6e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     a70:	2405      	movs	r4, #5
     a72:	e7f6      	b.n	a62 <sd_mmc_init_write_blocks+0x3e>
     a74:	00000149 	.word	0x00000149
     a78:	00109119 	.word	0x00109119
     a7c:	200000b4 	.word	0x200000b4
     a80:	00005625 	.word	0x00005625
     a84:	200000b8 	.word	0x200000b8
     a88:	200000ba 	.word	0x200000ba
     a8c:	00089118 	.word	0x00089118
     a90:	000002fd 	.word	0x000002fd

00000a94 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     a94:	b510      	push	{r4, lr}
     a96:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     a98:	4b07      	ldr	r3, [pc, #28]	; (ab8 <sd_mmc_start_write_blocks+0x24>)
     a9a:	4798      	blx	r3
     a9c:	2800      	cmp	r0, #0
     a9e:	d104      	bne.n	aaa <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     aa0:	2200      	movs	r2, #0
     aa2:	4b06      	ldr	r3, [pc, #24]	; (abc <sd_mmc_start_write_blocks+0x28>)
     aa4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     aa6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     aa8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     aaa:	4a04      	ldr	r2, [pc, #16]	; (abc <sd_mmc_start_write_blocks+0x28>)
     aac:	8813      	ldrh	r3, [r2, #0]
     aae:	1b1c      	subs	r4, r3, r4
     ab0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     ab2:	2000      	movs	r0, #0
     ab4:	e7f8      	b.n	aa8 <sd_mmc_start_write_blocks+0x14>
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	000058e1 	.word	0x000058e1
     abc:	200000b8 	.word	0x200000b8

00000ac0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     ac0:	b510      	push	{r4, lr}
     ac2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     ac4:	4b0e      	ldr	r3, [pc, #56]	; (b00 <sd_mmc_wait_end_of_write_blocks+0x40>)
     ac6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     ac8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     aca:	2800      	cmp	r0, #0
     acc:	d101      	bne.n	ad2 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     ace:	0018      	movs	r0, r3
     ad0:	bd10      	pop	{r4, pc}
	if (abort) {
     ad2:	2c00      	cmp	r4, #0
     ad4:	d00a      	beq.n	aec <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     ad6:	2200      	movs	r2, #0
     ad8:	4b0a      	ldr	r3, [pc, #40]	; (b04 <sd_mmc_wait_end_of_write_blocks+0x44>)
     ada:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     adc:	4b0a      	ldr	r3, [pc, #40]	; (b08 <sd_mmc_wait_end_of_write_blocks+0x48>)
     ade:	881b      	ldrh	r3, [r3, #0]
     ae0:	2b01      	cmp	r3, #1
     ae2:	d009      	beq.n	af8 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     ae4:	4b09      	ldr	r3, [pc, #36]	; (b0c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     ae6:	4798      	blx	r3
	return SD_MMC_OK;
     ae8:	2300      	movs	r3, #0
     aea:	e7f0      	b.n	ace <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     aec:	4b05      	ldr	r3, [pc, #20]	; (b04 <sd_mmc_wait_end_of_write_blocks+0x44>)
     aee:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     af0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     af2:	2a00      	cmp	r2, #0
     af4:	d0f2      	beq.n	adc <sd_mmc_wait_end_of_write_blocks+0x1c>
     af6:	e7ea      	b.n	ace <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     af8:	4b04      	ldr	r3, [pc, #16]	; (b0c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     afa:	4798      	blx	r3
		return SD_MMC_OK;
     afc:	2300      	movs	r3, #0
     afe:	e7e6      	b.n	ace <sd_mmc_wait_end_of_write_blocks+0xe>
     b00:	00005961 	.word	0x00005961
     b04:	200000b8 	.word	0x200000b8
     b08:	200000ba 	.word	0x200000ba
     b0c:	000002fd 	.word	0x000002fd

00000b10 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     b10:	b510      	push	{r4, lr}
     b12:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
     b14:	4b0f      	ldr	r3, [pc, #60]	; (b54 <sd_mmc_test_unit_ready+0x44>)
     b16:	4798      	blx	r3
     b18:	2801      	cmp	r0, #1
     b1a:	d019      	beq.n	b50 <sd_mmc_test_unit_ready+0x40>
     b1c:	2800      	cmp	r0, #0
     b1e:	d003      	beq.n	b28 <sd_mmc_test_unit_ready+0x18>
     b20:	2802      	cmp	r0, #2
     b22:	d010      	beq.n	b46 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     b24:	2001      	movs	r0, #1
	}
}
     b26:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
     b28:	4b0b      	ldr	r3, [pc, #44]	; (b58 <sd_mmc_test_unit_ready+0x48>)
     b2a:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
     b2c:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
     b2e:	2b00      	cmp	r3, #0
     b30:	d1f9      	bne.n	b26 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     b32:	0020      	movs	r0, r4
     b34:	4b09      	ldr	r3, [pc, #36]	; (b5c <sd_mmc_test_unit_ready+0x4c>)
     b36:	4798      	blx	r3
     b38:	0003      	movs	r3, r0
     b3a:	2003      	movs	r0, #3
     b3c:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
     b3e:	4243      	negs	r3, r0
     b40:	4158      	adcs	r0, r3
     b42:	0040      	lsls	r0, r0, #1
     b44:	e7ef      	b.n	b26 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
     b46:	2200      	movs	r2, #0
     b48:	4b03      	ldr	r3, [pc, #12]	; (b58 <sd_mmc_test_unit_ready+0x48>)
     b4a:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
     b4c:	2002      	movs	r0, #2
     b4e:	e7ea      	b.n	b26 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
     b50:	2003      	movs	r0, #3
     b52:	e7e8      	b.n	b26 <sd_mmc_test_unit_ready+0x16>
     b54:	00000339 	.word	0x00000339
     b58:	200000c0 	.word	0x200000c0
     b5c:	000008ad 	.word	0x000008ad

00000b60 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
     b60:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
     b62:	2000      	movs	r0, #0
     b64:	4b01      	ldr	r3, [pc, #4]	; (b6c <sd_mmc_test_unit_ready_0+0xc>)
     b66:	4798      	blx	r3
}
     b68:	bd10      	pop	{r4, pc}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	00000b11 	.word	0x00000b11

00000b70 <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
     b70:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(1);
     b72:	2001      	movs	r0, #1
     b74:	4b01      	ldr	r3, [pc, #4]	; (b7c <sd_mmc_test_unit_ready_1+0xc>)
     b76:	4798      	blx	r3
}
     b78:	bd10      	pop	{r4, pc}
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	00000b11 	.word	0x00000b11

00000b80 <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     b80:	b570      	push	{r4, r5, r6, lr}
     b82:	0004      	movs	r4, r0
     b84:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     b86:	4b04      	ldr	r3, [pc, #16]	; (b98 <sd_mmc_read_capacity+0x18>)
     b88:	4798      	blx	r3
     b8a:	0040      	lsls	r0, r0, #1
     b8c:	3801      	subs	r0, #1
     b8e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     b90:	0020      	movs	r0, r4
     b92:	4b02      	ldr	r3, [pc, #8]	; (b9c <sd_mmc_read_capacity+0x1c>)
     b94:	4798      	blx	r3
}
     b96:	bd70      	pop	{r4, r5, r6, pc}
     b98:	000008d5 	.word	0x000008d5
     b9c:	00000b11 	.word	0x00000b11

00000ba0 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
     ba0:	b510      	push	{r4, lr}
     ba2:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
     ba4:	2000      	movs	r0, #0
     ba6:	4b01      	ldr	r3, [pc, #4]	; (bac <sd_mmc_read_capacity_0+0xc>)
     ba8:	4798      	blx	r3
}
     baa:	bd10      	pop	{r4, pc}
     bac:	00000b81 	.word	0x00000b81

00000bb0 <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
     bb0:	b510      	push	{r4, lr}
     bb2:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(1, nb_sector);
     bb4:	2001      	movs	r0, #1
     bb6:	4b01      	ldr	r3, [pc, #4]	; (bbc <sd_mmc_read_capacity_1+0xc>)
     bb8:	4798      	blx	r3
}
     bba:	bd10      	pop	{r4, pc}
     bbc:	00000b81 	.word	0x00000b81

00000bc0 <sd_mmc_unload_0>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
     bc0:	4b01      	ldr	r3, [pc, #4]	; (bc8 <sd_mmc_unload_0+0x8>)
     bc2:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
     bc4:	2001      	movs	r0, #1
     bc6:	4770      	bx	lr
     bc8:	200000c0 	.word	0x200000c0

00000bcc <sd_mmc_unload_1>:
	sd_mmc_ejected[slot] = unload;
     bcc:	4b01      	ldr	r3, [pc, #4]	; (bd4 <sd_mmc_unload_1+0x8>)
     bce:	7058      	strb	r0, [r3, #1]

bool sd_mmc_unload_1(bool unload)
{
	return sd_mmc_unload(1, unload);
}
     bd0:	2001      	movs	r0, #1
     bd2:	4770      	bx	lr
     bd4:	200000c0 	.word	0x200000c0

00000bd8 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
     bd8:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
     bda:	2000      	movs	r0, #0
     bdc:	4b01      	ldr	r3, [pc, #4]	; (be4 <sd_mmc_wr_protect_0+0xc>)
     bde:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
     be0:	bd10      	pop	{r4, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	000008fd 	.word	0x000008fd

00000be8 <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
     be8:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
     bea:	2001      	movs	r0, #1
     bec:	4b01      	ldr	r3, [pc, #4]	; (bf4 <sd_mmc_wr_protect_1+0xc>)
     bee:	4798      	blx	r3
	return sd_mmc_wr_protect(1);
}
     bf0:	bd10      	pop	{r4, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	000008fd 	.word	0x000008fd

00000bf8 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
     bf8:	2001      	movs	r0, #1
     bfa:	4770      	bx	lr

00000bfc <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
	return sd_mmc_removal(1);
}
     bfc:	2001      	movs	r0, #1
     bfe:	4770      	bx	lr

00000c00 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     c00:	b510      	push	{r4, lr}
     c02:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     c04:	2201      	movs	r2, #1
     c06:	4b0c      	ldr	r3, [pc, #48]	; (c38 <sd_mmc_mem_2_ram+0x38>)
     c08:	4798      	blx	r3
     c0a:	2800      	cmp	r0, #0
     c0c:	d004      	beq.n	c18 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     c0e:	3802      	subs	r0, #2
     c10:	4243      	negs	r3, r0
     c12:	4158      	adcs	r0, r3
     c14:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     c16:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     c18:	2101      	movs	r1, #1
     c1a:	0020      	movs	r0, r4
     c1c:	4b07      	ldr	r3, [pc, #28]	; (c3c <sd_mmc_mem_2_ram+0x3c>)
     c1e:	4798      	blx	r3
     c20:	0003      	movs	r3, r0
		return CTRL_FAIL;
     c22:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     c24:	2b00      	cmp	r3, #0
     c26:	d1f6      	bne.n	c16 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
     c28:	2000      	movs	r0, #0
     c2a:	4b05      	ldr	r3, [pc, #20]	; (c40 <sd_mmc_mem_2_ram+0x40>)
     c2c:	4798      	blx	r3
     c2e:	1e43      	subs	r3, r0, #1
     c30:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     c32:	b2c0      	uxtb	r0, r0
     c34:	e7ef      	b.n	c16 <sd_mmc_mem_2_ram+0x16>
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	00000901 	.word	0x00000901
     c3c:	00000989 	.word	0x00000989
     c40:	000009b5 	.word	0x000009b5

00000c44 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
     c44:	b510      	push	{r4, lr}
     c46:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
     c48:	0001      	movs	r1, r0
     c4a:	2000      	movs	r0, #0
     c4c:	4b01      	ldr	r3, [pc, #4]	; (c54 <sd_mmc_mem_2_ram_0+0x10>)
     c4e:	4798      	blx	r3
}
     c50:	bd10      	pop	{r4, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	00000c01 	.word	0x00000c01

00000c58 <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
     c58:	b510      	push	{r4, lr}
     c5a:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(1, addr, ram);
     c5c:	0001      	movs	r1, r0
     c5e:	2001      	movs	r0, #1
     c60:	4b01      	ldr	r3, [pc, #4]	; (c68 <sd_mmc_mem_2_ram_1+0x10>)
     c62:	4798      	blx	r3
}
     c64:	bd10      	pop	{r4, pc}
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	00000c01 	.word	0x00000c01

00000c6c <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     c6c:	b510      	push	{r4, lr}
     c6e:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     c70:	2201      	movs	r2, #1
     c72:	4b0c      	ldr	r3, [pc, #48]	; (ca4 <sd_mmc_ram_2_mem+0x38>)
     c74:	4798      	blx	r3
     c76:	2800      	cmp	r0, #0
     c78:	d004      	beq.n	c84 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     c7a:	3802      	subs	r0, #2
     c7c:	4243      	negs	r3, r0
     c7e:	4158      	adcs	r0, r3
     c80:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     c82:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     c84:	2101      	movs	r1, #1
     c86:	0020      	movs	r0, r4
     c88:	4b07      	ldr	r3, [pc, #28]	; (ca8 <sd_mmc_ram_2_mem+0x3c>)
     c8a:	4798      	blx	r3
     c8c:	0003      	movs	r3, r0
		return CTRL_FAIL;
     c8e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     c90:	2b00      	cmp	r3, #0
     c92:	d1f6      	bne.n	c82 <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
     c94:	2000      	movs	r0, #0
     c96:	4b05      	ldr	r3, [pc, #20]	; (cac <sd_mmc_ram_2_mem+0x40>)
     c98:	4798      	blx	r3
     c9a:	1e43      	subs	r3, r0, #1
     c9c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     c9e:	b2c0      	uxtb	r0, r0
     ca0:	e7ef      	b.n	c82 <sd_mmc_ram_2_mem+0x16>
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	00000a25 	.word	0x00000a25
     ca8:	00000a95 	.word	0x00000a95
     cac:	00000ac1 	.word	0x00000ac1

00000cb0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
     cb0:	b510      	push	{r4, lr}
     cb2:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
     cb4:	0001      	movs	r1, r0
     cb6:	2000      	movs	r0, #0
     cb8:	4b01      	ldr	r3, [pc, #4]	; (cc0 <sd_mmc_ram_2_mem_0+0x10>)
     cba:	4798      	blx	r3
}
     cbc:	bd10      	pop	{r4, pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	00000c6d 	.word	0x00000c6d

00000cc4 <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
     cc4:	b510      	push	{r4, lr}
     cc6:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(1, addr, ram);
     cc8:	0001      	movs	r1, r0
     cca:	2001      	movs	r0, #1
     ccc:	4b01      	ldr	r3, [pc, #4]	; (cd4 <sd_mmc_ram_2_mem_1+0x10>)
     cce:	4798      	blx	r3
}
     cd0:	bd10      	pop	{r4, pc}
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	00000c6d 	.word	0x00000c6d

00000cd8 <configure_can>:
volatile can_message_t canline;

struct can_module can_instance;

void configure_can(void)
{
     cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cda:	46c6      	mov	lr, r8
     cdc:	b500      	push	{lr}
     cde:	b08c      	sub	sp, #48	; 0x30
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ce0:	ae0b      	add	r6, sp, #44	; 0x2c
     ce2:	2400      	movs	r4, #0
     ce4:	7074      	strb	r4, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ce6:	2501      	movs	r5, #1
     ce8:	70b5      	strb	r5, [r6, #2]
	config->powersave    = false;
     cea:	70f4      	strb	r4, [r6, #3]
	/* Set up the CAN TX/RX pins */
	struct system_pinmux_config pin_config;
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = CAN_TX_MUX_SETTING;
     cec:	2306      	movs	r3, #6
     cee:	4698      	mov	r8, r3
     cf0:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
     cf2:	0031      	movs	r1, r6
     cf4:	2018      	movs	r0, #24
     cf6:	4f2d      	ldr	r7, [pc, #180]	; (dac <configure_can+0xd4>)
     cf8:	47b8      	blx	r7
	pin_config.mux_position = CAN_RX_MUX_SETTING;
     cfa:	4643      	mov	r3, r8
     cfc:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
     cfe:	0031      	movs	r1, r6
     d00:	2019      	movs	r0, #25
     d02:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->clock_source = GCLK_GENERATOR_8;
     d04:	aa02      	add	r2, sp, #8
     d06:	2308      	movs	r3, #8
     d08:	7013      	strb	r3, [r2, #0]
	config->run_in_standby = false;
     d0a:	7054      	strb	r4, [r2, #1]
	config->watchdog_configuration = 0x00;
     d0c:	7094      	strb	r4, [r2, #2]
	config->transmit_pause = true;
     d0e:	70d5      	strb	r5, [r2, #3]
	config->edge_filtering = true;
     d10:	7115      	strb	r5, [r2, #4]
	config->protocol_exception_handling = true;
     d12:	7155      	strb	r5, [r2, #5]
	config->automatic_retransmission = true;
     d14:	7195      	strb	r5, [r2, #6]
	config->clock_stop_request = false;
     d16:	71d4      	strb	r4, [r2, #7]
	config->clock_stop_acknowledge = false;
     d18:	7214      	strb	r4, [r2, #8]
	config->timestamp_prescaler = 0;
	config->timeout_period = 0xFFFF;
     d1a:	3b09      	subs	r3, #9
     d1c:	8153      	strh	r3, [r2, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
     d1e:	7314      	strb	r4, [r2, #12]
	config->timeout_enable = false;
     d20:	7354      	strb	r4, [r2, #13]
	config->tdc_enable = false;
     d22:	7394      	strb	r4, [r2, #14]
	config->delay_compensation_offset = 0;
     d24:	73d4      	strb	r4, [r2, #15]
	config->delay_compensation_filter_window_length = 0;
     d26:	7414      	strb	r4, [r2, #16]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
	config->remote_frames_standard_reject = true;
     d28:	74d5      	strb	r5, [r2, #19]
	config->remote_frames_extended_reject = true;
     d2a:	7515      	strb	r5, [r2, #20]
	config->extended_id_mask = 0x1FFFFFFF;
     d2c:	4b20      	ldr	r3, [pc, #128]	; (db0 <configure_can+0xd8>)
     d2e:	6193      	str	r3, [r2, #24]
	config->rx_fifo_0_overwrite = true;
     d30:	7715      	strb	r5, [r2, #28]
	config->rx_fifo_0_watermark = 0;
     d32:	7754      	strb	r4, [r2, #29]
	config->rx_fifo_1_overwrite = true;
     d34:	7795      	strb	r5, [r2, #30]
	config->rx_fifo_1_watermark = 0;
     d36:	77d4      	strb	r4, [r2, #31]
	config->tx_queue_mode = false;
     d38:	2320      	movs	r3, #32
     d3a:	54d4      	strb	r4, [r2, r3]
	config->tx_event_fifo_watermark = 0;
     d3c:	3301      	adds	r3, #1
     d3e:	54d4      	strb	r4, [r2, r3]
	/* Initialize the module. */
	struct can_config config_can;
	can_get_config_defaults(&config_can);
	config_can.nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_FIFO_0;
     d40:	7454      	strb	r4, [r2, #17]
	config_can.nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_FIFO_1;
     d42:	7495      	strb	r5, [r2, #18]
	config_can.timestamp_prescaler = 0xf;
     d44:	3b12      	subs	r3, #18
     d46:	7253      	strb	r3, [r2, #9]
	
	canline_updated = 0;
     d48:	4b1a      	ldr	r3, [pc, #104]	; (db4 <configure_can+0xdc>)
     d4a:	601c      	str	r4, [r3, #0]
	
	can_init(&can_instance, CAN_MODULE, &config_can);
     d4c:	4e1a      	ldr	r6, [pc, #104]	; (db8 <configure_can+0xe0>)
     d4e:	4c1b      	ldr	r4, [pc, #108]	; (dbc <configure_can+0xe4>)
     d50:	0031      	movs	r1, r6
     d52:	0020      	movs	r0, r4
     d54:	4b1a      	ldr	r3, [pc, #104]	; (dc0 <configure_can+0xe8>)
     d56:	4798      	blx	r3
	can_set_baudrate(CAN_MODULE, 500000);
     d58:	491a      	ldr	r1, [pc, #104]	; (dc4 <configure_can+0xec>)
     d5a:	0030      	movs	r0, r6
     d5c:	4b1a      	ldr	r3, [pc, #104]	; (dc8 <configure_can+0xf0>)
     d5e:	4798      	blx	r3

	can_start(&can_instance);
     d60:	0020      	movs	r0, r4
     d62:	4b1a      	ldr	r3, [pc, #104]	; (dcc <configure_can+0xf4>)
     d64:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d66:	2280      	movs	r2, #128	; 0x80
     d68:	0212      	lsls	r2, r2, #8
     d6a:	4b19      	ldr	r3, [pc, #100]	; (dd0 <configure_can+0xf8>)
     d6c:	601a      	str	r2, [r3, #0]
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
     d6e:	6822      	ldr	r2, [r4, #0]
     d70:	6d51      	ldr	r1, [r2, #84]	; 0x54
     d72:	23c0      	movs	r3, #192	; 0xc0
     d74:	055b      	lsls	r3, r3, #21
     d76:	430b      	orrs	r3, r1
     d78:	6553      	str	r3, [r2, #84]	; 0x54
	et_filter->F0.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFID1(0) |
     d7a:	2380      	movs	r3, #128	; 0x80
     d7c:	05db      	lsls	r3, r3, #23
     d7e:	9300      	str	r3, [sp, #0]
	et_filter->F1.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFID2_Msk |
     d80:	4b14      	ldr	r3, [pc, #80]	; (dd4 <configure_can+0xfc>)
     d82:	9301      	str	r3, [sp, #4]
	can_enable_interrupt(&can_instance, CAN_PROTOCOL_ERROR_ARBITRATION | CAN_PROTOCOL_ERROR_DATA);
	
	// Read everything into FIFO 1
	struct can_extended_message_filter_element et_filter;
	can_get_extended_message_filter_element_default(&et_filter);
	et_filter.F1.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFID2(0) | CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFT_CLASSIC;
     d84:	2380      	movs	r3, #128	; 0x80
     d86:	061b      	lsls	r3, r3, #24
     d88:	9301      	str	r3, [sp, #4]
	can_set_rx_extended_filter(&can_instance, &et_filter, 0);
     d8a:	2200      	movs	r2, #0
     d8c:	4669      	mov	r1, sp
     d8e:	0020      	movs	r0, r4
     d90:	4b11      	ldr	r3, [pc, #68]	; (dd8 <configure_can+0x100>)
     d92:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
     d94:	6823      	ldr	r3, [r4, #0]
     d96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     d98:	4315      	orrs	r5, r2
     d9a:	655d      	str	r5, [r3, #84]	; 0x54
     d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     d9e:	2110      	movs	r1, #16
     da0:	430a      	orrs	r2, r1
     da2:	655a      	str	r2, [r3, #84]	; 0x54
	
	can_enable_interrupt(&can_instance, CAN_RX_FIFO_0_NEW_MESSAGE);
	can_enable_interrupt(&can_instance, CAN_RX_FIFO_1_NEW_MESSAGE);

}
     da4:	b00c      	add	sp, #48	; 0x30
     da6:	bc04      	pop	{r2}
     da8:	4690      	mov	r8, r2
     daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dac:	000060dd 	.word	0x000060dd
     db0:	1fffffff 	.word	0x1fffffff
     db4:	20000b14 	.word	0x20000b14
     db8:	42001c00 	.word	0x42001c00
     dbc:	20000b10 	.word	0x20000b10
     dc0:	00003eb9 	.word	0x00003eb9
     dc4:	0007a120 	.word	0x0007a120
     dc8:	000041b5 	.word	0x000041b5
     dcc:	00004205 	.word	0x00004205
     dd0:	e000e100 	.word	0xe000e100
     dd4:	9fffffff 	.word	0x9fffffff
     dd8:	0000421d 	.word	0x0000421d

00000ddc <CAN0_Handler>:
static struct can_rx_element_fifo_1 rx_element_fifo_1;
static struct can_rx_element_buffer rx_element_buffer;


void CAN0_Handler(void)
{
     ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dde:	46ce      	mov	lr, r9
     de0:	4647      	mov	r7, r8
     de2:	b580      	push	{r7, lr}
     de4:	b085      	sub	sp, #20
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
     de6:	4b87      	ldr	r3, [pc, #540]	; (1004 <CAN0_Handler+0x228>)
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t status, i, rx_buffer_index;
	status = can_read_interrupt_status(&can_instance);
     dec:	9203      	str	r2, [sp, #12]


	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
     dee:	9a03      	ldr	r2, [sp, #12]
     df0:	0312      	lsls	r2, r2, #12
     df2:	d56e      	bpl.n	ed2 <CAN0_Handler+0xf6>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
     df4:	2280      	movs	r2, #128	; 0x80
     df6:	0312      	lsls	r2, r2, #12
     df8:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_RX_BUFFER_NEW_MESSAGE);
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
     dfa:	2300      	movs	r3, #0
     dfc:	9302      	str	r3, [sp, #8]
     dfe:	9b02      	ldr	r3, [sp, #8]
     e00:	2b0f      	cmp	r3, #15
     e02:	d866      	bhi.n	ed2 <CAN0_Handler+0xf6>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
     e04:	4b7f      	ldr	r3, [pc, #508]	; (1004 <CAN0_Handler+0x228>)
     e06:	4699      	mov	r9, r3
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
     e08:	4698      	mov	r8, r3
			if (can_rx_get_buffer_status(&can_instance, i)) {
				rx_buffer_index = i;
				can_rx_clear_buffer_status(&can_instance, i);
				can_get_rx_buffer_element(&can_instance, &rx_element_buffer,
     e0a:	4f7f      	ldr	r7, [pc, #508]	; (1008 <CAN0_Handler+0x22c>)
     e0c:	e03a      	b.n	e84 <CAN0_Handler+0xa8>
     e0e:	239c      	movs	r3, #156	; 0x9c
     e10:	4641      	mov	r1, r8
     e12:	6809      	ldr	r1, [r1, #0]
     e14:	58cb      	ldr	r3, [r1, r3]
		index -= 32;
     e16:	3a20      	subs	r2, #32
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
     e18:	2101      	movs	r1, #1
     e1a:	4091      	lsls	r1, r2
     e1c:	400b      	ands	r3, r1
     e1e:	1e5a      	subs	r2, r3, #1
     e20:	4193      	sbcs	r3, r2
     e22:	b2db      	uxtb	r3, r3
     e24:	e03b      	b.n	e9e <CAN0_Handler+0xc2>
		module_inst->hw->NDAT2.reg = (1 << index);
     e26:	4a77      	ldr	r2, [pc, #476]	; (1004 <CAN0_Handler+0x228>)
     e28:	6811      	ldr	r1, [r2, #0]
		index -= 32;
     e2a:	3b20      	subs	r3, #32
		module_inst->hw->NDAT2.reg = (1 << index);
     e2c:	2201      	movs	r2, #1
     e2e:	409a      	lsls	r2, r3
     e30:	0013      	movs	r3, r2
     e32:	229c      	movs	r2, #156	; 0x9c
     e34:	508b      	str	r3, [r1, r2]
     e36:	e040      	b.n	eba <CAN0_Handler+0xde>
				rx_buffer_index);
				if (rx_element_buffer.R0.bit.XTD) {
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
					} else {
					printf("\n\r Standard message received in Rx buffer. The received data is: \r\n");
     e38:	4874      	ldr	r0, [pc, #464]	; (100c <CAN0_Handler+0x230>)
     e3a:	4b75      	ldr	r3, [pc, #468]	; (1010 <CAN0_Handler+0x234>)
     e3c:	4798      	blx	r3
				}
				for (i = 0; i < rx_element_buffer.R1.bit.DLC; i++) {
     e3e:	2300      	movs	r3, #0
     e40:	9302      	str	r3, [sp, #8]
     e42:	4b71      	ldr	r3, [pc, #452]	; (1008 <CAN0_Handler+0x22c>)
     e44:	685b      	ldr	r3, [r3, #4]
     e46:	031b      	lsls	r3, r3, #12
     e48:	0f1b      	lsrs	r3, r3, #28
     e4a:	9a02      	ldr	r2, [sp, #8]
     e4c:	4293      	cmp	r3, r2
     e4e:	d910      	bls.n	e72 <CAN0_Handler+0x96>
					printf("  %d",rx_element_buffer.data[i]);
     e50:	4c6d      	ldr	r4, [pc, #436]	; (1008 <CAN0_Handler+0x22c>)
     e52:	4d70      	ldr	r5, [pc, #448]	; (1014 <CAN0_Handler+0x238>)
     e54:	4e70      	ldr	r6, [pc, #448]	; (1018 <CAN0_Handler+0x23c>)
     e56:	9b02      	ldr	r3, [sp, #8]
     e58:	18e3      	adds	r3, r4, r3
     e5a:	7a19      	ldrb	r1, [r3, #8]
     e5c:	0028      	movs	r0, r5
     e5e:	47b0      	blx	r6
				for (i = 0; i < rx_element_buffer.R1.bit.DLC; i++) {
     e60:	9b02      	ldr	r3, [sp, #8]
     e62:	3301      	adds	r3, #1
     e64:	9302      	str	r3, [sp, #8]
     e66:	6863      	ldr	r3, [r4, #4]
     e68:	031b      	lsls	r3, r3, #12
     e6a:	0f1b      	lsrs	r3, r3, #28
     e6c:	9a02      	ldr	r2, [sp, #8]
     e6e:	4293      	cmp	r3, r2
     e70:	d8f1      	bhi.n	e56 <CAN0_Handler+0x7a>
				}
				printf("\r\n\r\n");
     e72:	486a      	ldr	r0, [pc, #424]	; (101c <CAN0_Handler+0x240>)
     e74:	4b66      	ldr	r3, [pc, #408]	; (1010 <CAN0_Handler+0x234>)
     e76:	4798      	blx	r3
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
     e78:	9b02      	ldr	r3, [sp, #8]
     e7a:	3301      	adds	r3, #1
     e7c:	9302      	str	r3, [sp, #8]
     e7e:	9b02      	ldr	r3, [sp, #8]
     e80:	2b0f      	cmp	r3, #15
     e82:	d826      	bhi.n	ed2 <CAN0_Handler+0xf6>
			if (can_rx_get_buffer_status(&can_instance, i)) {
     e84:	9a02      	ldr	r2, [sp, #8]
	if (index < 32) {
     e86:	2a1f      	cmp	r2, #31
     e88:	d8c1      	bhi.n	e0e <CAN0_Handler+0x32>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
     e8a:	2398      	movs	r3, #152	; 0x98
     e8c:	4649      	mov	r1, r9
     e8e:	6809      	ldr	r1, [r1, #0]
     e90:	58cb      	ldr	r3, [r1, r3]
     e92:	2101      	movs	r1, #1
     e94:	4091      	lsls	r1, r2
     e96:	400b      	ands	r3, r1
     e98:	1e5a      	subs	r2, r3, #1
     e9a:	4193      	sbcs	r3, r2
     e9c:	b2db      	uxtb	r3, r3
     e9e:	2b00      	cmp	r3, #0
     ea0:	d0ea      	beq.n	e78 <CAN0_Handler+0x9c>
				rx_buffer_index = i;
     ea2:	9b02      	ldr	r3, [sp, #8]
     ea4:	9301      	str	r3, [sp, #4]
				can_rx_clear_buffer_status(&can_instance, i);
     ea6:	9b02      	ldr	r3, [sp, #8]
	if (index < 32) {
     ea8:	2b1f      	cmp	r3, #31
     eaa:	d8bc      	bhi.n	e26 <CAN0_Handler+0x4a>
		module_inst->hw->NDAT1.reg = (1 << index);
     eac:	4a55      	ldr	r2, [pc, #340]	; (1004 <CAN0_Handler+0x228>)
     eae:	6811      	ldr	r1, [r2, #0]
     eb0:	2201      	movs	r2, #1
     eb2:	409a      	lsls	r2, r3
     eb4:	0013      	movs	r3, r2
     eb6:	2298      	movs	r2, #152	; 0x98
     eb8:	508b      	str	r3, [r1, r2]
				can_get_rx_buffer_element(&can_instance, &rx_element_buffer,
     eba:	9a01      	ldr	r2, [sp, #4]
     ebc:	0039      	movs	r1, r7
     ebe:	4851      	ldr	r0, [pc, #324]	; (1004 <CAN0_Handler+0x228>)
     ec0:	4b57      	ldr	r3, [pc, #348]	; (1020 <CAN0_Handler+0x244>)
     ec2:	4798      	blx	r3
				if (rx_element_buffer.R0.bit.XTD) {
     ec4:	683b      	ldr	r3, [r7, #0]
     ec6:	005b      	lsls	r3, r3, #1
     ec8:	d5b6      	bpl.n	e38 <CAN0_Handler+0x5c>
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
     eca:	4856      	ldr	r0, [pc, #344]	; (1024 <CAN0_Handler+0x248>)
     ecc:	4b50      	ldr	r3, [pc, #320]	; (1010 <CAN0_Handler+0x234>)
     ece:	4798      	blx	r3
     ed0:	e7b5      	b.n	e3e <CAN0_Handler+0x62>
			}
		}
	}
	if (status & CAN_RX_FIFO_0_NEW_MESSAGE) {
     ed2:	9b03      	ldr	r3, [sp, #12]
     ed4:	07db      	lsls	r3, r3, #31
     ed6:	d415      	bmi.n	f04 <CAN0_Handler+0x128>
		canline_updated = 1;
	}
	
	
	
	if (status & CAN_RX_FIFO_1_NEW_MESSAGE) {
     ed8:	9b03      	ldr	r3, [sp, #12]
     eda:	06db      	lsls	r3, r3, #27
     edc:	d452      	bmi.n	f84 <CAN0_Handler+0x1a8>
			canline.ts = CAN_RX_ELEMENT_R1_RXTS(rx_element_buffer.R1.bit.RXTS);
		}
		canline_updated = 1;
	}

	if ((status & CAN_PROTOCOL_ERROR_ARBITRATION)
     ede:	9b03      	ldr	r3, [sp, #12]
     ee0:	011b      	lsls	r3, r3, #4
     ee2:	d402      	bmi.n	eea <CAN0_Handler+0x10e>
	|| (status & CAN_PROTOCOL_ERROR_DATA)) {
     ee4:	9b03      	ldr	r3, [sp, #12]
     ee6:	00db      	lsls	r3, r3, #3
     ee8:	d507      	bpl.n	efa <CAN0_Handler+0x11e>
	module_inst->hw->IR.reg = source;
     eea:	4b46      	ldr	r3, [pc, #280]	; (1004 <CAN0_Handler+0x228>)
     eec:	681b      	ldr	r3, [r3, #0]
     eee:	22c0      	movs	r2, #192	; 0xc0
     ef0:	0552      	lsls	r2, r2, #21
     ef2:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_PROTOCOL_ERROR_ARBITRATION
		| CAN_PROTOCOL_ERROR_DATA);
		printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
     ef4:	484c      	ldr	r0, [pc, #304]	; (1028 <CAN0_Handler+0x24c>)
     ef6:	4b46      	ldr	r3, [pc, #280]	; (1010 <CAN0_Handler+0x234>)
     ef8:	4798      	blx	r3
	}
}
     efa:	b005      	add	sp, #20
     efc:	bc0c      	pop	{r2, r3}
     efe:	4690      	mov	r8, r2
     f00:	4699      	mov	r9, r3
     f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f04:	4d3f      	ldr	r5, [pc, #252]	; (1004 <CAN0_Handler+0x228>)
     f06:	682b      	ldr	r3, [r5, #0]
     f08:	2201      	movs	r2, #1
     f0a:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_0_element(&can_instance, &rx_element_fifo_0,
     f0c:	4c47      	ldr	r4, [pc, #284]	; (102c <CAN0_Handler+0x250>)
     f0e:	6822      	ldr	r2, [r4, #0]
     f10:	4947      	ldr	r1, [pc, #284]	; (1030 <CAN0_Handler+0x254>)
     f12:	0028      	movs	r0, r5
     f14:	4b47      	ldr	r3, [pc, #284]	; (1034 <CAN0_Handler+0x258>)
     f16:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 0,
     f18:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
     f1a:	6829      	ldr	r1, [r5, #0]
     f1c:	233f      	movs	r3, #63	; 0x3f
     f1e:	4013      	ands	r3, r2
     f20:	22a8      	movs	r2, #168	; 0xa8
     f22:	508b      	str	r3, [r1, r2]
		standard_receive_index++;
     f24:	6823      	ldr	r3, [r4, #0]
     f26:	3301      	adds	r3, #1
     f28:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
     f2a:	6823      	ldr	r3, [r4, #0]
     f2c:	2b10      	cmp	r3, #16
     f2e:	d025      	beq.n	f7c <CAN0_Handler+0x1a0>
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
     f30:	2300      	movs	r3, #0
     f32:	9302      	str	r3, [sp, #8]
     f34:	4b3e      	ldr	r3, [pc, #248]	; (1030 <CAN0_Handler+0x254>)
     f36:	685b      	ldr	r3, [r3, #4]
     f38:	031b      	lsls	r3, r3, #12
     f3a:	0f1b      	lsrs	r3, r3, #28
     f3c:	9a02      	ldr	r2, [sp, #8]
     f3e:	4293      	cmp	r3, r2
     f40:	d918      	bls.n	f74 <CAN0_Handler+0x198>
			canline.id = CAN_RX_ELEMENT_R0_ID(rx_element_fifo_0.R0.bit.ID)>>18;
     f42:	493b      	ldr	r1, [pc, #236]	; (1030 <CAN0_Handler+0x254>)
     f44:	4a3c      	ldr	r2, [pc, #240]	; (1038 <CAN0_Handler+0x25c>)
			canline.ts = CAN_RX_ELEMENT_R1_RXTS(rx_element_buffer.R1.bit.RXTS);
     f46:	4830      	ldr	r0, [pc, #192]	; (1008 <CAN0_Handler+0x22c>)
			canline.id = CAN_RX_ELEMENT_R0_ID(rx_element_fifo_0.R0.bit.ID)>>18;
     f48:	680b      	ldr	r3, [r1, #0]
     f4a:	00db      	lsls	r3, r3, #3
     f4c:	0d5b      	lsrs	r3, r3, #21
     f4e:	6013      	str	r3, [r2, #0]
			canline.data.arr[i] = rx_element_fifo_0.data[i];
     f50:	9b02      	ldr	r3, [sp, #8]
     f52:	9c02      	ldr	r4, [sp, #8]
     f54:	190c      	adds	r4, r1, r4
     f56:	7a24      	ldrb	r4, [r4, #8]
     f58:	18d3      	adds	r3, r2, r3
     f5a:	721c      	strb	r4, [r3, #8]
			canline.ts = CAN_RX_ELEMENT_R1_RXTS(rx_element_buffer.R1.bit.RXTS);
     f5c:	6843      	ldr	r3, [r0, #4]
     f5e:	b29b      	uxth	r3, r3
     f60:	6053      	str	r3, [r2, #4]
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
     f62:	9b02      	ldr	r3, [sp, #8]
     f64:	3301      	adds	r3, #1
     f66:	9302      	str	r3, [sp, #8]
     f68:	684b      	ldr	r3, [r1, #4]
     f6a:	031b      	lsls	r3, r3, #12
     f6c:	0f1b      	lsrs	r3, r3, #28
     f6e:	9c02      	ldr	r4, [sp, #8]
     f70:	42a3      	cmp	r3, r4
     f72:	d8e9      	bhi.n	f48 <CAN0_Handler+0x16c>
		canline_updated = 1;
     f74:	2201      	movs	r2, #1
     f76:	4b31      	ldr	r3, [pc, #196]	; (103c <CAN0_Handler+0x260>)
     f78:	601a      	str	r2, [r3, #0]
     f7a:	e7ad      	b.n	ed8 <CAN0_Handler+0xfc>
			standard_receive_index = 0;
     f7c:	2200      	movs	r2, #0
     f7e:	4b2b      	ldr	r3, [pc, #172]	; (102c <CAN0_Handler+0x250>)
     f80:	601a      	str	r2, [r3, #0]
     f82:	e7d5      	b.n	f30 <CAN0_Handler+0x154>
	module_inst->hw->IR.reg = source;
     f84:	4d1f      	ldr	r5, [pc, #124]	; (1004 <CAN0_Handler+0x228>)
     f86:	682b      	ldr	r3, [r5, #0]
     f88:	2210      	movs	r2, #16
     f8a:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_1_element(&can_instance, &rx_element_fifo_1,
     f8c:	4c2c      	ldr	r4, [pc, #176]	; (1040 <CAN0_Handler+0x264>)
     f8e:	6822      	ldr	r2, [r4, #0]
     f90:	492c      	ldr	r1, [pc, #176]	; (1044 <CAN0_Handler+0x268>)
     f92:	0028      	movs	r0, r5
     f94:	4b2c      	ldr	r3, [pc, #176]	; (1048 <CAN0_Handler+0x26c>)
     f96:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 1,
     f98:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF1A.reg = CAN_RXF1A_F1AI(index);
     f9a:	6829      	ldr	r1, [r5, #0]
     f9c:	233f      	movs	r3, #63	; 0x3f
     f9e:	4013      	ands	r3, r2
     fa0:	22b8      	movs	r2, #184	; 0xb8
     fa2:	508b      	str	r3, [r1, r2]
		extended_receive_index++;
     fa4:	6823      	ldr	r3, [r4, #0]
     fa6:	3301      	adds	r3, #1
     fa8:	6023      	str	r3, [r4, #0]
		if (extended_receive_index == CONF_CAN0_RX_FIFO_1_NUM) {
     faa:	6823      	ldr	r3, [r4, #0]
     fac:	2b10      	cmp	r3, #16
     fae:	d025      	beq.n	ffc <CAN0_Handler+0x220>
		for (i = 0; i < rx_element_fifo_1.R1.bit.DLC; i++) {
     fb0:	2300      	movs	r3, #0
     fb2:	9302      	str	r3, [sp, #8]
     fb4:	4b23      	ldr	r3, [pc, #140]	; (1044 <CAN0_Handler+0x268>)
     fb6:	685b      	ldr	r3, [r3, #4]
     fb8:	031b      	lsls	r3, r3, #12
     fba:	0f1b      	lsrs	r3, r3, #28
     fbc:	9a02      	ldr	r2, [sp, #8]
     fbe:	4293      	cmp	r3, r2
     fc0:	d918      	bls.n	ff4 <CAN0_Handler+0x218>
			canline.id = CAN_RX_ELEMENT_R0_ID(rx_element_fifo_1.R0.bit.ID);
     fc2:	4920      	ldr	r1, [pc, #128]	; (1044 <CAN0_Handler+0x268>)
     fc4:	4a1c      	ldr	r2, [pc, #112]	; (1038 <CAN0_Handler+0x25c>)
			canline.ts = CAN_RX_ELEMENT_R1_RXTS(rx_element_buffer.R1.bit.RXTS);
     fc6:	4810      	ldr	r0, [pc, #64]	; (1008 <CAN0_Handler+0x22c>)
			canline.id = CAN_RX_ELEMENT_R0_ID(rx_element_fifo_1.R0.bit.ID);
     fc8:	680b      	ldr	r3, [r1, #0]
     fca:	00db      	lsls	r3, r3, #3
     fcc:	08db      	lsrs	r3, r3, #3
     fce:	6013      	str	r3, [r2, #0]
			canline.data.arr[i] = rx_element_fifo_1.data[i];
     fd0:	9b02      	ldr	r3, [sp, #8]
     fd2:	9c02      	ldr	r4, [sp, #8]
     fd4:	190c      	adds	r4, r1, r4
     fd6:	7a24      	ldrb	r4, [r4, #8]
     fd8:	18d3      	adds	r3, r2, r3
     fda:	721c      	strb	r4, [r3, #8]
			canline.ts = CAN_RX_ELEMENT_R1_RXTS(rx_element_buffer.R1.bit.RXTS);
     fdc:	6843      	ldr	r3, [r0, #4]
     fde:	b29b      	uxth	r3, r3
     fe0:	6053      	str	r3, [r2, #4]
		for (i = 0; i < rx_element_fifo_1.R1.bit.DLC; i++) {
     fe2:	9b02      	ldr	r3, [sp, #8]
     fe4:	3301      	adds	r3, #1
     fe6:	9302      	str	r3, [sp, #8]
     fe8:	684b      	ldr	r3, [r1, #4]
     fea:	031b      	lsls	r3, r3, #12
     fec:	0f1b      	lsrs	r3, r3, #28
     fee:	9c02      	ldr	r4, [sp, #8]
     ff0:	42a3      	cmp	r3, r4
     ff2:	d8e9      	bhi.n	fc8 <CAN0_Handler+0x1ec>
		canline_updated = 1;
     ff4:	2201      	movs	r2, #1
     ff6:	4b11      	ldr	r3, [pc, #68]	; (103c <CAN0_Handler+0x260>)
     ff8:	601a      	str	r2, [r3, #0]
     ffa:	e770      	b.n	ede <CAN0_Handler+0x102>
			extended_receive_index = 0;
     ffc:	2200      	movs	r2, #0
     ffe:	4b10      	ldr	r3, [pc, #64]	; (1040 <CAN0_Handler+0x264>)
    1000:	601a      	str	r2, [r3, #0]
    1002:	e7d5      	b.n	fb0 <CAN0_Handler+0x1d4>
    1004:	20000b10 	.word	0x20000b10
    1008:	200000c8 	.word	0x200000c8
    100c:	000097b0 	.word	0x000097b0
    1010:	000081e1 	.word	0x000081e1
    1014:	000097f4 	.word	0x000097f4
    1018:	000080ed 	.word	0x000080ed
    101c:	000097fc 	.word	0x000097fc
    1020:	00004265 	.word	0x00004265
    1024:	0000976c 	.word	0x0000976c
    1028:	00009800 	.word	0x00009800
    102c:	200000f8 	.word	0x200000f8
    1030:	200000d8 	.word	0x200000d8
    1034:	000042b5 	.word	0x000042b5
    1038:	20000b18 	.word	0x20000b18
    103c:	20000b14 	.word	0x20000b14
    1040:	200000c4 	.word	0x200000c4
    1044:	200000e8 	.word	0x200000e8
    1048:	00004305 	.word	0x00004305

0000104c <configure_i2c>:
struct i2c_master_module i2c_master_instance;



void configure_i2c(void)
{
    104c:	b510      	push	{r4, lr}
    104e:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1050:	aa01      	add	r2, sp, #4
    1052:	2364      	movs	r3, #100	; 0x64
    1054:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1056:	4b1e      	ldr	r3, [pc, #120]	; (10d0 <configure_i2c+0x84>)
    1058:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    105a:	2300      	movs	r3, #0
    105c:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    105e:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    1060:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1062:	2180      	movs	r1, #128	; 0x80
    1064:	0389      	lsls	r1, r1, #14
    1066:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    1068:	2101      	movs	r1, #1
    106a:	4249      	negs	r1, r1
    106c:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    106e:	3125      	adds	r1, #37	; 0x25
    1070:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1072:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1074:	3108      	adds	r1, #8
    1076:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1078:	3101      	adds	r1, #1
    107a:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    107c:	3101      	adds	r1, #1
    107e:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1080:	33d7      	adds	r3, #215	; 0xd7
    1082:	8613      	strh	r3, [r2, #48]	; 0x30
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 10000;
    1084:	4b13      	ldr	r3, [pc, #76]	; (10d4 <configure_i2c+0x88>)
    1086:	82d3      	strh	r3, [r2, #22]
	config_i2c_master.pinmux_pad0    = RTC_PINMUX_PAD0;
    1088:	4b13      	ldr	r3, [pc, #76]	; (10d8 <configure_i2c+0x8c>)
    108a:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1    = RTC_PINMUX_PAD1;
    108c:	4b13      	ldr	r3, [pc, #76]	; (10dc <configure_i2c+0x90>)
    108e:	6213      	str	r3, [r2, #32]
	/* Initialize and enable device with config */
	i2c_master_init(&i2c_master_instance, RTC_MODULE, &config_i2c_master);
    1090:	4c13      	ldr	r4, [pc, #76]	; (10e0 <configure_i2c+0x94>)
    1092:	4914      	ldr	r1, [pc, #80]	; (10e4 <configure_i2c+0x98>)
    1094:	0020      	movs	r0, r4
    1096:	4b14      	ldr	r3, [pc, #80]	; (10e8 <configure_i2c+0x9c>)
    1098:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    109a:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    109c:	2107      	movs	r1, #7
    109e:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    10a0:	4219      	tst	r1, r3
    10a2:	d1fc      	bne.n	109e <configure_i2c+0x52>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    10a4:	6813      	ldr	r3, [r2, #0]
    10a6:	2102      	movs	r1, #2
    10a8:	430b      	orrs	r3, r1
    10aa:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    10ac:	4b0c      	ldr	r3, [pc, #48]	; (10e0 <configure_i2c+0x94>)
    10ae:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    10b0:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    10b2:	2010      	movs	r0, #16
    10b4:	8b51      	ldrh	r1, [r2, #26]
    10b6:	4201      	tst	r1, r0
    10b8:	d104      	bne.n	10c4 <configure_i2c+0x78>
		timeout_counter++;
    10ba:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    10bc:	42a3      	cmp	r3, r4
    10be:	d3f9      	bcc.n	10b4 <configure_i2c+0x68>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    10c0:	2310      	movs	r3, #16
    10c2:	8353      	strh	r3, [r2, #26]
	i2c_master_enable(&i2c_master_instance);
	delay_ms(1);
    10c4:	2001      	movs	r0, #1
    10c6:	4b09      	ldr	r3, [pc, #36]	; (10ec <configure_i2c+0xa0>)
    10c8:	4798      	blx	r3
}
    10ca:	b00e      	add	sp, #56	; 0x38
    10cc:	bd10      	pop	{r4, pc}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	00000d48 	.word	0x00000d48
    10d4:	00002710 	.word	0x00002710
    10d8:	00160002 	.word	0x00160002
    10dc:	00170002 	.word	0x00170002
    10e0:	20000b28 	.word	0x20000b28
    10e4:	42001000 	.word	0x42001000
    10e8:	000014a5 	.word	0x000014a5
    10ec:	0000523d 	.word	0x0000523d

000010f0 <read_packet_with_timeout>:
	}
	return res;
}

enum status_code read_packet_with_timeout(struct i2c_master_packet *i2cpacket, int timeout)
{
    10f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10f2:	0005      	movs	r5, r0
    10f4:	000e      	movs	r6, r1
	enum status_code res;
	while ((res = i2c_master_read_packet_wait(&i2c_master_instance, i2cpacket)) != STATUS_OK) {
    10f6:	4c06      	ldr	r4, [pc, #24]	; (1110 <read_packet_with_timeout+0x20>)
    10f8:	4f06      	ldr	r7, [pc, #24]	; (1114 <read_packet_with_timeout+0x24>)
    10fa:	0029      	movs	r1, r5
    10fc:	0020      	movs	r0, r4
    10fe:	47b8      	blx	r7
    1100:	2800      	cmp	r0, #0
    1102:	d003      	beq.n	110c <read_packet_with_timeout+0x1c>
		if (timeout-- <= 0)
    1104:	3e01      	subs	r6, #1
    1106:	1c73      	adds	r3, r6, #1
    1108:	2b00      	cmp	r3, #0
    110a:	dcf6      	bgt.n	10fa <read_packet_with_timeout+0xa>
		return res;
	}
	return res;
}
    110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	20000b28 	.word	0x20000b28
    1114:	00001a7d 	.word	0x00001a7d

00001118 <write_packet_with_timeout_no_stop>:

enum status_code write_packet_with_timeout_no_stop(struct i2c_master_packet *i2cpacket, int timeout)
{
    1118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    111a:	0005      	movs	r5, r0
    111c:	000e      	movs	r6, r1
	enum status_code res;
	while ((res = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, i2cpacket)) != STATUS_OK) {
    111e:	4c06      	ldr	r4, [pc, #24]	; (1138 <write_packet_with_timeout_no_stop+0x20>)
    1120:	4f06      	ldr	r7, [pc, #24]	; (113c <write_packet_with_timeout_no_stop+0x24>)
    1122:	0029      	movs	r1, r5
    1124:	0020      	movs	r0, r4
    1126:	47b8      	blx	r7
    1128:	2800      	cmp	r0, #0
    112a:	d003      	beq.n	1134 <write_packet_with_timeout_no_stop+0x1c>
		if (timeout-- <= 0)
    112c:	3e01      	subs	r6, #1
    112e:	1c73      	adds	r3, r6, #1
    1130:	2b00      	cmp	r3, #0
    1132:	dcf6      	bgt.n	1122 <write_packet_with_timeout_no_stop+0xa>
		return res;
	}
	return res;
}
    1134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	20000b28 	.word	0x20000b28
    113c:	00001a91 	.word	0x00001a91

00001140 <initialize_rtc_calendar>:
	ts->minute = ((data[1] >> 4) & 0xF) * 10 + (data[1] & 0xF);
	ts->second = ((data[0] >> 4) & 0x7) * 10 + (data[0] & 0xF);
}

void initialize_rtc_calendar(void)
{
    1140:	b530      	push	{r4, r5, lr}
    1142:	b09f      	sub	sp, #124	; 0x7c
	uint8_t rxbuf[50];
	uint8_t txbuf[10];

	bzero(rxbuf, sizeof(rxbuf));
    1144:	2232      	movs	r2, #50	; 0x32
    1146:	2100      	movs	r1, #0
    1148:	a811      	add	r0, sp, #68	; 0x44
    114a:	4d70      	ldr	r5, [pc, #448]	; (130c <initialize_rtc_calendar+0x1cc>)
    114c:	47a8      	blx	r5
	bzero(txbuf, sizeof(txbuf));
    114e:	ac0e      	add	r4, sp, #56	; 0x38
    1150:	220a      	movs	r2, #10
    1152:	2100      	movs	r1, #0
    1154:	0020      	movs	r0, r4
    1156:	47a8      	blx	r5
	
	/* Init i2c packet. */
	struct i2c_master_packet packet = {
    1158:	a80b      	add	r0, sp, #44	; 0x2c
    115a:	2368      	movs	r3, #104	; 0x68
    115c:	8003      	strh	r3, [r0, #0]
    115e:	3b67      	subs	r3, #103	; 0x67
    1160:	8043      	strh	r3, [r0, #2]
    1162:	6044      	str	r4, [r0, #4]
    1164:	2300      	movs	r3, #0
    1166:	7203      	strb	r3, [r0, #8]
    1168:	7243      	strb	r3, [r0, #9]
    116a:	7283      	strb	r3, [r0, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	
	/* Write buffer to slave until success. */
	if (write_packet_with_timeout_no_stop(&packet, I2C_TIMEOUT) != STATUS_OK) {
    116c:	21fa      	movs	r1, #250	; 0xfa
    116e:	0089      	lsls	r1, r1, #2
    1170:	4b67      	ldr	r3, [pc, #412]	; (1310 <initialize_rtc_calendar+0x1d0>)
    1172:	4798      	blx	r3
    1174:	2800      	cmp	r0, #0
    1176:	d004      	beq.n	1182 <initialize_rtc_calendar+0x42>
		puts("DS1307 configuration failed");
    1178:	4866      	ldr	r0, [pc, #408]	; (1314 <initialize_rtc_calendar+0x1d4>)
    117a:	4b67      	ldr	r3, [pc, #412]	; (1318 <initialize_rtc_calendar+0x1d8>)
    117c:	4798      	blx	r3
	struct rtc_calendar_time ts;
	parse_ds1307_data(packet.data, &ts);
	configure_rtc_calendar(&ts);
	
	printf("RTC initialized at %02d/%02d/%04d %02d:%02d:%02d\n", ts.month, ts.day, ts.year, ts.hour, ts.minute, ts.second);
}
    117e:	b01f      	add	sp, #124	; 0x7c
    1180:	bd30      	pop	{r4, r5, pc}
	packet.data = rxbuf;
    1182:	a80b      	add	r0, sp, #44	; 0x2c
    1184:	ab11      	add	r3, sp, #68	; 0x44
    1186:	6043      	str	r3, [r0, #4]
	packet.data_length = 7;
    1188:	2307      	movs	r3, #7
    118a:	8043      	strh	r3, [r0, #2]
	if (read_packet_with_timeout(&packet, I2C_TIMEOUT) != STATUS_OK) {
    118c:	21fa      	movs	r1, #250	; 0xfa
    118e:	0089      	lsls	r1, r1, #2
    1190:	4b62      	ldr	r3, [pc, #392]	; (131c <initialize_rtc_calendar+0x1dc>)
    1192:	4798      	blx	r3
    1194:	2800      	cmp	r0, #0
    1196:	d17a      	bne.n	128e <initialize_rtc_calendar+0x14e>
	if (DS1307_UNCONFIGURED(packet)) {
    1198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    119a:	781b      	ldrb	r3, [r3, #0]
    119c:	09db      	lsrs	r3, r3, #7
    119e:	d17a      	bne.n	1296 <initialize_rtc_calendar+0x156>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11a0:	4b5f      	ldr	r3, [pc, #380]	; (1320 <initialize_rtc_calendar+0x1e0>)
    11a2:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    11a4:	2107      	movs	r1, #7
    11a6:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    11a8:	4219      	tst	r1, r3
    11aa:	d1fc      	bne.n	11a6 <initialize_rtc_calendar+0x66>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    11ac:	2383      	movs	r3, #131	; 0x83
    11ae:	7513      	strb	r3, [r2, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    11b0:	7613      	strb	r3, [r2, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    11b2:	6813      	ldr	r3, [r2, #0]
    11b4:	2102      	movs	r1, #2
    11b6:	438b      	bics	r3, r1
    11b8:	6013      	str	r3, [r2, #0]
	parse_ds1307_data(packet.data, &ts);
    11ba:	990c      	ldr	r1, [sp, #48]	; 0x30
	ts->year = ((data[6] >> 4) & 0xF) * 10 + (data[6] & 0xF)+2000;
    11bc:	798c      	ldrb	r4, [r1, #6]
    11be:	a809      	add	r0, sp, #36	; 0x24
    11c0:	0923      	lsrs	r3, r4, #4
    11c2:	009a      	lsls	r2, r3, #2
    11c4:	189a      	adds	r2, r3, r2
    11c6:	0052      	lsls	r2, r2, #1
    11c8:	250f      	movs	r5, #15
    11ca:	402c      	ands	r4, r5
    11cc:	23fa      	movs	r3, #250	; 0xfa
    11ce:	00db      	lsls	r3, r3, #3
    11d0:	469c      	mov	ip, r3
    11d2:	4464      	add	r4, ip
    11d4:	1912      	adds	r2, r2, r4
    11d6:	80c2      	strh	r2, [r0, #6]
	ts->month = ((data[5] >> 4) & 0xF) * 10 + (data[5] & 0xF);
    11d8:	794b      	ldrb	r3, [r1, #5]
    11da:	091a      	lsrs	r2, r3, #4
    11dc:	0094      	lsls	r4, r2, #2
    11de:	1912      	adds	r2, r2, r4
    11e0:	0052      	lsls	r2, r2, #1
    11e2:	402b      	ands	r3, r5
    11e4:	18d2      	adds	r2, r2, r3
    11e6:	7142      	strb	r2, [r0, #5]
	ts->day = ((data[4] >> 4) & 0xF) * 10 + (data[4] & 0xF);
    11e8:	790a      	ldrb	r2, [r1, #4]
    11ea:	0913      	lsrs	r3, r2, #4
    11ec:	009c      	lsls	r4, r3, #2
    11ee:	191b      	adds	r3, r3, r4
    11f0:	005b      	lsls	r3, r3, #1
    11f2:	4015      	ands	r5, r2
    11f4:	195b      	adds	r3, r3, r5
    11f6:	7103      	strb	r3, [r0, #4]
	if ((data[2] >> 6) & 1) { // 12-hour mode
    11f8:	788a      	ldrb	r2, [r1, #2]
    11fa:	0653      	lsls	r3, r2, #25
    11fc:	d474      	bmi.n	12e8 <initialize_rtc_calendar+0x1a8>
		ts->hour = ((data[2] >> 4) & 3) * 10 + ((data[2]) & 0xF);
    11fe:	0693      	lsls	r3, r2, #26
    1200:	0f9b      	lsrs	r3, r3, #30
    1202:	0098      	lsls	r0, r3, #2
    1204:	181b      	adds	r3, r3, r0
    1206:	005b      	lsls	r3, r3, #1
    1208:	200f      	movs	r0, #15
    120a:	4002      	ands	r2, r0
    120c:	189b      	adds	r3, r3, r2
    120e:	aa09      	add	r2, sp, #36	; 0x24
    1210:	7093      	strb	r3, [r2, #2]
	ts->minute = ((data[1] >> 4) & 0xF) * 10 + (data[1] & 0xF);
    1212:	784d      	ldrb	r5, [r1, #1]
    1214:	ac09      	add	r4, sp, #36	; 0x24
    1216:	092b      	lsrs	r3, r5, #4
    1218:	009a      	lsls	r2, r3, #2
    121a:	189a      	adds	r2, r3, r2
    121c:	0052      	lsls	r2, r2, #1
    121e:	200f      	movs	r0, #15
    1220:	4005      	ands	r5, r0
    1222:	1952      	adds	r2, r2, r5
    1224:	7062      	strb	r2, [r4, #1]
	ts->second = ((data[0] >> 4) & 0x7) * 10 + (data[0] & 0xF);
    1226:	780a      	ldrb	r2, [r1, #0]
    1228:	0653      	lsls	r3, r2, #25
    122a:	0f5b      	lsrs	r3, r3, #29
    122c:	0099      	lsls	r1, r3, #2
    122e:	185b      	adds	r3, r3, r1
    1230:	005b      	lsls	r3, r3, #1
    1232:	4010      	ands	r0, r2
    1234:	181b      	adds	r3, r3, r0
    1236:	7023      	strb	r3, [r4, #0]
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    1238:	aa04      	add	r2, sp, #16
    123a:	23b0      	movs	r3, #176	; 0xb0
    123c:	011b      	lsls	r3, r3, #4
    123e:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    1240:	2300      	movs	r3, #0
    1242:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    1244:	23fa      	movs	r3, #250	; 0xfa
    1246:	00db      	lsls	r3, r3, #3
    1248:	8093      	strh	r3, [r2, #4]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
    124a:	2301      	movs	r3, #1
    124c:	7193      	strb	r3, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    124e:	70d3      	strb	r3, [r2, #3]
	config_rtc_calendar.alarm[0].time = *init_time;
    1250:	ab06      	add	r3, sp, #24
    1252:	0021      	movs	r1, r4
    1254:	c921      	ldmia	r1!, {r0, r5}
    1256:	c321      	stmia	r3!, {r0, r5}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    1258:	2306      	movs	r3, #6
    125a:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    125c:	4d31      	ldr	r5, [pc, #196]	; (1324 <initialize_rtc_calendar+0x1e4>)
    125e:	4932      	ldr	r1, [pc, #200]	; (1328 <initialize_rtc_calendar+0x1e8>)
    1260:	0028      	movs	r0, r5
    1262:	4b32      	ldr	r3, [pc, #200]	; (132c <initialize_rtc_calendar+0x1ec>)
    1264:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    1266:	0028      	movs	r0, r5
    1268:	4b31      	ldr	r3, [pc, #196]	; (1330 <initialize_rtc_calendar+0x1f0>)
    126a:	4798      	blx	r3
	rtc_calendar_set_time(&rtc_instance, init_time);
    126c:	0021      	movs	r1, r4
    126e:	0028      	movs	r0, r5
    1270:	4b30      	ldr	r3, [pc, #192]	; (1334 <initialize_rtc_calendar+0x1f4>)
    1272:	4798      	blx	r3
	printf("RTC initialized at %02d/%02d/%04d %02d:%02d:%02d\n", ts.month, ts.day, ts.year, ts.hour, ts.minute, ts.second);
    1274:	88e3      	ldrh	r3, [r4, #6]
    1276:	7922      	ldrb	r2, [r4, #4]
    1278:	7961      	ldrb	r1, [r4, #5]
    127a:	7820      	ldrb	r0, [r4, #0]
    127c:	9002      	str	r0, [sp, #8]
    127e:	7860      	ldrb	r0, [r4, #1]
    1280:	9001      	str	r0, [sp, #4]
    1282:	78a0      	ldrb	r0, [r4, #2]
    1284:	9000      	str	r0, [sp, #0]
    1286:	482c      	ldr	r0, [pc, #176]	; (1338 <initialize_rtc_calendar+0x1f8>)
    1288:	4c2c      	ldr	r4, [pc, #176]	; (133c <initialize_rtc_calendar+0x1fc>)
    128a:	47a0      	blx	r4
    128c:	e777      	b.n	117e <initialize_rtc_calendar+0x3e>
		puts("DS1307 reading failed");
    128e:	482c      	ldr	r0, [pc, #176]	; (1340 <initialize_rtc_calendar+0x200>)
    1290:	4b21      	ldr	r3, [pc, #132]	; (1318 <initialize_rtc_calendar+0x1d8>)
    1292:	4798      	blx	r3
		return;
    1294:	e773      	b.n	117e <initialize_rtc_calendar+0x3e>
		printf("Initializing to %s %s\r\n", __DATE__, __TIME__);
    1296:	4a2b      	ldr	r2, [pc, #172]	; (1344 <initialize_rtc_calendar+0x204>)
    1298:	492b      	ldr	r1, [pc, #172]	; (1348 <initialize_rtc_calendar+0x208>)
    129a:	482c      	ldr	r0, [pc, #176]	; (134c <initialize_rtc_calendar+0x20c>)
    129c:	4b27      	ldr	r3, [pc, #156]	; (133c <initialize_rtc_calendar+0x1fc>)
    129e:	4798      	blx	r3
		packet.data_length = 8;
    12a0:	a80b      	add	r0, sp, #44	; 0x2c
    12a2:	2308      	movs	r3, #8
    12a4:	8043      	strh	r3, [r0, #2]
		packet.data = txbuf;
    12a6:	ac0e      	add	r4, sp, #56	; 0x38
    12a8:	6044      	str	r4, [r0, #4]
		txbuf[0] = 0;
    12aa:	2300      	movs	r3, #0
    12ac:	7023      	strb	r3, [r4, #0]
		txbuf[1] = (0<<7) | ((__TIME__[6]-'0') << 4) | (__TIME__[7]-'0'); //seconds
    12ae:	3321      	adds	r3, #33	; 0x21
    12b0:	7063      	strb	r3, [r4, #1]
		txbuf[2] = ((__TIME__[3]-'0') << 4) | (__TIME__[4]-'0'); //minutes
    12b2:	3318      	adds	r3, #24
    12b4:	70a3      	strb	r3, [r4, #2]
		txbuf[3] = (0 << 6) | ((__TIME__[0]-'0') << 4) | (__TIME__[1]-'0'); //hours(24-hr)
    12b6:	3b21      	subs	r3, #33	; 0x21
    12b8:	70e3      	strb	r3, [r4, #3]
		txbuf[4] = 6;
    12ba:	3b12      	subs	r3, #18
    12bc:	7123      	strb	r3, [r4, #4]
		txbuf[5] = 0x04;
    12be:	3b02      	subs	r3, #2
    12c0:	7163      	strb	r3, [r4, #5]
		txbuf[6] = 0x05;
    12c2:	3301      	adds	r3, #1
    12c4:	71a3      	strb	r3, [r4, #6]
		txbuf[7] = 0x19;
    12c6:	3314      	adds	r3, #20
    12c8:	71e3      	strb	r3, [r4, #7]
		write_packet_with_timeout_no_stop(&packet, I2C_TIMEOUT);
    12ca:	21fa      	movs	r1, #250	; 0xfa
    12cc:	0089      	lsls	r1, r1, #2
    12ce:	4b10      	ldr	r3, [pc, #64]	; (1310 <initialize_rtc_calendar+0x1d0>)
    12d0:	4798      	blx	r3
		printf("Updated time on RTC\r\n");
    12d2:	481f      	ldr	r0, [pc, #124]	; (1350 <initialize_rtc_calendar+0x210>)
    12d4:	4b10      	ldr	r3, [pc, #64]	; (1318 <initialize_rtc_calendar+0x1d8>)
    12d6:	4798      	blx	r3
    12d8:	213f      	movs	r1, #63	; 0x3f
    12da:	4469      	add	r1, sp
			txbuf[i] = txbuf[i+1];
    12dc:	7862      	ldrb	r2, [r4, #1]
    12de:	7022      	strb	r2, [r4, #0]
    12e0:	3401      	adds	r4, #1
		for (int i = 0; i < 7; ++i) {
    12e2:	428c      	cmp	r4, r1
    12e4:	d1fa      	bne.n	12dc <initialize_rtc_calendar+0x19c>
    12e6:	e75b      	b.n	11a0 <initialize_rtc_calendar+0x60>
		ts->hour = ((data[2] >> 5) & 1) * 12 + ((data[2] >> 4) & 1) * 10 + ((data[2]) & 0xF);
    12e8:	0950      	lsrs	r0, r2, #5
    12ea:	2301      	movs	r3, #1
    12ec:	4018      	ands	r0, r3
    12ee:	240c      	movs	r4, #12
    12f0:	4360      	muls	r0, r4
    12f2:	0914      	lsrs	r4, r2, #4
    12f4:	4023      	ands	r3, r4
    12f6:	009c      	lsls	r4, r3, #2
    12f8:	191b      	adds	r3, r3, r4
    12fa:	005b      	lsls	r3, r3, #1
    12fc:	18c0      	adds	r0, r0, r3
    12fe:	230f      	movs	r3, #15
    1300:	401a      	ands	r2, r3
    1302:	1882      	adds	r2, r0, r2
    1304:	ab09      	add	r3, sp, #36	; 0x24
    1306:	709a      	strb	r2, [r3, #2]
    1308:	e783      	b.n	1212 <initialize_rtc_calendar+0xd2>
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	000080db 	.word	0x000080db
    1310:	00001119 	.word	0x00001119
    1314:	00009844 	.word	0x00009844
    1318:	000081e1 	.word	0x000081e1
    131c:	000010f1 	.word	0x000010f1
    1320:	20000b28 	.word	0x20000b28
    1324:	20000b74 	.word	0x20000b74
    1328:	40002400 	.word	0x40002400
    132c:	000044b1 	.word	0x000044b1
    1330:	00004355 	.word	0x00004355
    1334:	00004435 	.word	0x00004435
    1338:	000098c0 	.word	0x000098c0
    133c:	000080ed 	.word	0x000080ed
    1340:	00009860 	.word	0x00009860
    1344:	00009878 	.word	0x00009878
    1348:	00009884 	.word	0x00009884
    134c:	00009890 	.word	0x00009890
    1350:	000098a8 	.word	0x000098a8

00001354 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1354:	b570      	push	{r4, r5, r6, lr}
    1356:	b082      	sub	sp, #8
    1358:	0005      	movs	r5, r0
    135a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    135c:	2200      	movs	r2, #0
    135e:	466b      	mov	r3, sp
    1360:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1362:	4c06      	ldr	r4, [pc, #24]	; (137c <usart_serial_getchar+0x28>)
    1364:	466b      	mov	r3, sp
    1366:	1d99      	adds	r1, r3, #6
    1368:	0028      	movs	r0, r5
    136a:	47a0      	blx	r4
    136c:	2800      	cmp	r0, #0
    136e:	d1f9      	bne.n	1364 <usart_serial_getchar+0x10>

	*c = temp;
    1370:	466b      	mov	r3, sp
    1372:	3306      	adds	r3, #6
    1374:	881b      	ldrh	r3, [r3, #0]
    1376:	7033      	strb	r3, [r6, #0]
}
    1378:	b002      	add	sp, #8
    137a:	bd70      	pop	{r4, r5, r6, pc}
    137c:	00001f01 	.word	0x00001f01

00001380 <usart_serial_putchar>:
{
    1380:	b570      	push	{r4, r5, r6, lr}
    1382:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1384:	b28c      	uxth	r4, r1
    1386:	4e03      	ldr	r6, [pc, #12]	; (1394 <usart_serial_putchar+0x14>)
    1388:	0021      	movs	r1, r4
    138a:	0028      	movs	r0, r5
    138c:	47b0      	blx	r6
    138e:	2800      	cmp	r0, #0
    1390:	d1fa      	bne.n	1388 <usart_serial_putchar+0x8>
}
    1392:	bd70      	pop	{r4, r5, r6, pc}
    1394:	00001ed5 	.word	0x00001ed5

00001398 <configure_usart_cdc>:
void usart_write_callback(struct usart_module *const usart_module);

struct usart_module usart_instance;

void configure_usart_cdc(void)
{
    1398:	b5f0      	push	{r4, r5, r6, r7, lr}
    139a:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    139c:	2380      	movs	r3, #128	; 0x80
    139e:	05db      	lsls	r3, r3, #23
    13a0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    13a2:	2300      	movs	r3, #0
    13a4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    13a6:	22ff      	movs	r2, #255	; 0xff
    13a8:	4669      	mov	r1, sp
    13aa:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    13ac:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    13ae:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    13b0:	2401      	movs	r4, #1
    13b2:	222c      	movs	r2, #44	; 0x2c
    13b4:	548c      	strb	r4, [r1, r2]
	config->transmitter_enable = true;
    13b6:	3201      	adds	r2, #1
    13b8:	548c      	strb	r4, [r1, r2]
	config->clock_polarity_inverted = false;
    13ba:	3201      	adds	r2, #1
    13bc:	548b      	strb	r3, [r1, r2]
	config->use_external_clock = false;
    13be:	3201      	adds	r2, #1
    13c0:	548b      	strb	r3, [r1, r2]
	config->ext_clock_freq   = 0;
    13c2:	930c      	str	r3, [sp, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    13c4:	3205      	adds	r2, #5
    13c6:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
    13c8:	3201      	adds	r2, #1
    13ca:	548b      	strb	r3, [r1, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    13cc:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    13ce:	2200      	movs	r2, #0
    13d0:	820b      	strh	r3, [r1, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    13d2:	76ca      	strb	r2, [r1, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    13d4:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    13d6:	840b      	strh	r3, [r1, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    13d8:	844b      	strh	r3, [r1, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    13da:	760a      	strb	r2, [r1, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    13dc:	2324      	movs	r3, #36	; 0x24
    13de:	54ca      	strb	r2, [r1, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    13e0:	764a      	strb	r2, [r1, #25]
	config->receive_pulse_length                    = 19;
    13e2:	2313      	movs	r3, #19
    13e4:	768b      	strb	r3, [r1, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    13e6:	3313      	adds	r3, #19
    13e8:	54ca      	strb	r2, [r1, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    13ea:	3b01      	subs	r3, #1
    13ec:	54ca      	strb	r2, [r1, r3]
	struct usart_config config_cdc;
	usart_get_config_defaults(&config_cdc);
	config_cdc.baudrate  = USART_BAUD;
    13ee:	23e1      	movs	r3, #225	; 0xe1
    13f0:	025b      	lsls	r3, r3, #9
    13f2:	930a      	str	r3, [sp, #40]	; 0x28
	config_cdc.mux_setting = USART_MUX_SETTING;
    13f4:	23c4      	movs	r3, #196	; 0xc4
    13f6:	039b      	lsls	r3, r3, #14
    13f8:	9303      	str	r3, [sp, #12]
	config_cdc.pinmux_pad0 = USART_PINMUX_PAD0;
    13fa:	2301      	movs	r3, #1
    13fc:	425b      	negs	r3, r3
    13fe:	930e      	str	r3, [sp, #56]	; 0x38
	config_cdc.pinmux_pad1 = USART_PINMUX_PAD1;
    1400:	930f      	str	r3, [sp, #60]	; 0x3c
	config_cdc.pinmux_pad2 = USART_PINMUX_PAD2;
    1402:	4b17      	ldr	r3, [pc, #92]	; (1460 <configure_usart_cdc+0xc8>)
    1404:	9310      	str	r3, [sp, #64]	; 0x40
	config_cdc.pinmux_pad3 = USART_PINMUX_PAD3;
    1406:	4b17      	ldr	r3, [pc, #92]	; (1464 <configure_usart_cdc+0xcc>)
    1408:	9311      	str	r3, [sp, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    140a:	4d17      	ldr	r5, [pc, #92]	; (1468 <configure_usart_cdc+0xd0>)
    140c:	4b17      	ldr	r3, [pc, #92]	; (146c <configure_usart_cdc+0xd4>)
    140e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1410:	4a17      	ldr	r2, [pc, #92]	; (1470 <configure_usart_cdc+0xd8>)
    1412:	4b18      	ldr	r3, [pc, #96]	; (1474 <configure_usart_cdc+0xdc>)
    1414:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1416:	4a18      	ldr	r2, [pc, #96]	; (1478 <configure_usart_cdc+0xe0>)
    1418:	4b18      	ldr	r3, [pc, #96]	; (147c <configure_usart_cdc+0xe4>)
    141a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    141c:	466a      	mov	r2, sp
    141e:	4918      	ldr	r1, [pc, #96]	; (1480 <configure_usart_cdc+0xe8>)
    1420:	0028      	movs	r0, r5
    1422:	4b18      	ldr	r3, [pc, #96]	; (1484 <configure_usart_cdc+0xec>)
    1424:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1426:	4f18      	ldr	r7, [pc, #96]	; (1488 <configure_usart_cdc+0xf0>)
    1428:	683b      	ldr	r3, [r7, #0]
    142a:	6898      	ldr	r0, [r3, #8]
    142c:	2100      	movs	r1, #0
    142e:	4e17      	ldr	r6, [pc, #92]	; (148c <configure_usart_cdc+0xf4>)
    1430:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1432:	683b      	ldr	r3, [r7, #0]
    1434:	6858      	ldr	r0, [r3, #4]
    1436:	2100      	movs	r1, #0
    1438:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    143a:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    143c:	0030      	movs	r0, r6
    143e:	4b14      	ldr	r3, [pc, #80]	; (1490 <configure_usart_cdc+0xf8>)
    1440:	4798      	blx	r3
    1442:	231f      	movs	r3, #31
    1444:	4018      	ands	r0, r3
    1446:	4084      	lsls	r4, r0
    1448:	4b12      	ldr	r3, [pc, #72]	; (1494 <configure_usart_cdc+0xfc>)
    144a:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    144c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    144e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1450:	2b00      	cmp	r3, #0
    1452:	d1fc      	bne.n	144e <configure_usart_cdc+0xb6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1454:	6833      	ldr	r3, [r6, #0]
    1456:	2202      	movs	r2, #2
    1458:	4313      	orrs	r3, r2
    145a:	6033      	str	r3, [r6, #0]
	stdio_serial_init(&usart_instance, USART_MODULE, &config_cdc);
	usart_enable(&usart_instance);
}
    145c:	b013      	add	sp, #76	; 0x4c
    145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1460:	00060003 	.word	0x00060003
    1464:	00070003 	.word	0x00070003
    1468:	20000b34 	.word	0x20000b34
    146c:	20000b70 	.word	0x20000b70
    1470:	00001381 	.word	0x00001381
    1474:	20000b6c 	.word	0x20000b6c
    1478:	00001355 	.word	0x00001355
    147c:	20000b68 	.word	0x20000b68
    1480:	42000400 	.word	0x42000400
    1484:	00001b39 	.word	0x00001b39
    1488:	20000030 	.word	0x20000030
    148c:	000081f5 	.word	0x000081f5
    1490:	00005199 	.word	0x00005199
    1494:	e000e100 	.word	0xe000e100

00001498 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1498:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    149a:	2207      	movs	r2, #7
    149c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    149e:	421a      	tst	r2, r3
    14a0:	d1fc      	bne.n	149c <_i2c_master_wait_for_sync+0x4>
}
    14a2:	4770      	bx	lr

000014a4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    14a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14a6:	46d6      	mov	lr, sl
    14a8:	464f      	mov	r7, r9
    14aa:	4646      	mov	r6, r8
    14ac:	b5c0      	push	{r6, r7, lr}
    14ae:	b08a      	sub	sp, #40	; 0x28
    14b0:	0006      	movs	r6, r0
    14b2:	000f      	movs	r7, r1
    14b4:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    14b6:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14b8:	0008      	movs	r0, r1
    14ba:	4b97      	ldr	r3, [pc, #604]	; (1718 <i2c_master_init+0x274>)
    14bc:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    14be:	4a97      	ldr	r2, [pc, #604]	; (171c <i2c_master_init+0x278>)
    14c0:	69d1      	ldr	r1, [r2, #28]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    14c2:	1c45      	adds	r5, r0, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    14c4:	2301      	movs	r3, #1
    14c6:	40ab      	lsls	r3, r5
    14c8:	430b      	orrs	r3, r1
    14ca:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    14cc:	a909      	add	r1, sp, #36	; 0x24
    14ce:	7b23      	ldrb	r3, [r4, #12]
    14d0:	700b      	strb	r3, [r1, #0]
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14d2:	3013      	adds	r0, #19
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    14d4:	b2c5      	uxtb	r5, r0
    14d6:	0028      	movs	r0, r5
    14d8:	4b91      	ldr	r3, [pc, #580]	; (1720 <i2c_master_init+0x27c>)
    14da:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    14dc:	0028      	movs	r0, r5
    14de:	4b91      	ldr	r3, [pc, #580]	; (1724 <i2c_master_init+0x280>)
    14e0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    14e2:	7b20      	ldrb	r0, [r4, #12]
    14e4:	2100      	movs	r1, #0
    14e6:	4b90      	ldr	r3, [pc, #576]	; (1728 <i2c_master_init+0x284>)
    14e8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    14ea:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    14ec:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    14ee:	079b      	lsls	r3, r3, #30
    14f0:	d505      	bpl.n	14fe <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    14f2:	b00a      	add	sp, #40	; 0x28
    14f4:	bc1c      	pop	{r2, r3, r4}
    14f6:	4690      	mov	r8, r2
    14f8:	4699      	mov	r9, r3
    14fa:	46a2      	mov	sl, r4
    14fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    14fe:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    1500:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    1502:	07db      	lsls	r3, r3, #31
    1504:	d4f5      	bmi.n	14f2 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    1506:	2314      	movs	r3, #20
    1508:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    150a:	6833      	ldr	r3, [r6, #0]
    150c:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    150e:	0018      	movs	r0, r3
    1510:	4b81      	ldr	r3, [pc, #516]	; (1718 <i2c_master_init+0x274>)
    1512:	4798      	blx	r3
    1514:	0005      	movs	r5, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1516:	2380      	movs	r3, #128	; 0x80
    1518:	aa08      	add	r2, sp, #32
    151a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    151c:	2300      	movs	r3, #0
    151e:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1520:	2201      	movs	r2, #1
    1522:	a908      	add	r1, sp, #32
    1524:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    1526:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    1528:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    152a:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    152c:	2800      	cmp	r0, #0
    152e:	d100      	bne.n	1532 <i2c_master_init+0x8e>
    1530:	e0ae      	b.n	1690 <i2c_master_init+0x1ec>
	pin_conf.mux_position = pad0 & 0xFFFF;
    1532:	ab08      	add	r3, sp, #32
    1534:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1536:	2302      	movs	r3, #2
    1538:	aa08      	add	r2, sp, #32
    153a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    153c:	0c00      	lsrs	r0, r0, #16
    153e:	b2c0      	uxtb	r0, r0
    1540:	0011      	movs	r1, r2
    1542:	4b7a      	ldr	r3, [pc, #488]	; (172c <i2c_master_init+0x288>)
    1544:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    1546:	2f00      	cmp	r7, #0
    1548:	d100      	bne.n	154c <i2c_master_init+0xa8>
    154a:	e0a6      	b.n	169a <i2c_master_init+0x1f6>
	pin_conf.mux_position = pad1 & 0xFFFF;
    154c:	ab08      	add	r3, sp, #32
    154e:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1550:	2302      	movs	r3, #2
    1552:	aa08      	add	r2, sp, #32
    1554:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1556:	0c3f      	lsrs	r7, r7, #16
    1558:	b2f8      	uxtb	r0, r7
    155a:	0011      	movs	r1, r2
    155c:	4b73      	ldr	r3, [pc, #460]	; (172c <i2c_master_init+0x288>)
    155e:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1560:	8aa3      	ldrh	r3, [r4, #20]
    1562:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    1564:	8ae3      	ldrh	r3, [r4, #22]
    1566:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    1568:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    156a:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    156c:	2b00      	cmp	r3, #0
    156e:	d104      	bne.n	157a <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1570:	4b6f      	ldr	r3, [pc, #444]	; (1730 <i2c_master_init+0x28c>)
    1572:	789b      	ldrb	r3, [r3, #2]
    1574:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1576:	0fdb      	lsrs	r3, r3, #31
    1578:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    157a:	68a1      	ldr	r1, [r4, #8]
    157c:	6923      	ldr	r3, [r4, #16]
    157e:	430b      	orrs	r3, r1
    1580:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    1582:	2224      	movs	r2, #36	; 0x24
    1584:	5ca2      	ldrb	r2, [r4, r2]
    1586:	2a00      	cmp	r2, #0
    1588:	d002      	beq.n	1590 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    158a:	2280      	movs	r2, #128	; 0x80
    158c:	05d2      	lsls	r2, r2, #23
    158e:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    1590:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1592:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1594:	222c      	movs	r2, #44	; 0x2c
    1596:	5ca2      	ldrb	r2, [r4, r2]
    1598:	2a00      	cmp	r2, #0
    159a:	d103      	bne.n	15a4 <i2c_master_init+0x100>
    159c:	2280      	movs	r2, #128	; 0x80
    159e:	0492      	lsls	r2, r2, #18
    15a0:	4291      	cmp	r1, r2
    15a2:	d102      	bne.n	15aa <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    15a4:	2280      	movs	r2, #128	; 0x80
    15a6:	0512      	lsls	r2, r2, #20
    15a8:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    15aa:	222d      	movs	r2, #45	; 0x2d
    15ac:	5ca2      	ldrb	r2, [r4, r2]
    15ae:	2a00      	cmp	r2, #0
    15b0:	d002      	beq.n	15b8 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    15b2:	2280      	movs	r2, #128	; 0x80
    15b4:	0412      	lsls	r2, r2, #16
    15b6:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    15b8:	222e      	movs	r2, #46	; 0x2e
    15ba:	5ca2      	ldrb	r2, [r4, r2]
    15bc:	2a00      	cmp	r2, #0
    15be:	d002      	beq.n	15c6 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    15c0:	2280      	movs	r2, #128	; 0x80
    15c2:	03d2      	lsls	r2, r2, #15
    15c4:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    15c6:	4642      	mov	r2, r8
    15c8:	6812      	ldr	r2, [r2, #0]
    15ca:	4313      	orrs	r3, r2
    15cc:	4642      	mov	r2, r8
    15ce:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    15d0:	2380      	movs	r3, #128	; 0x80
    15d2:	005b      	lsls	r3, r3, #1
    15d4:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    15d6:	3513      	adds	r5, #19
    15d8:	b2e8      	uxtb	r0, r5
    15da:	4b56      	ldr	r3, [pc, #344]	; (1734 <i2c_master_init+0x290>)
    15dc:	4798      	blx	r3
    15de:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    15e0:	23fa      	movs	r3, #250	; 0xfa
    15e2:	009b      	lsls	r3, r3, #2
    15e4:	6822      	ldr	r2, [r4, #0]
    15e6:	435a      	muls	r2, r3
    15e8:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    15ea:	6863      	ldr	r3, [r4, #4]
    15ec:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    15ee:	4d52      	ldr	r5, [pc, #328]	; (1738 <i2c_master_init+0x294>)
    15f0:	47a8      	blx	r5
    15f2:	9000      	str	r0, [sp, #0]
    15f4:	9101      	str	r1, [sp, #4]
    15f6:	464b      	mov	r3, r9
    15f8:	0058      	lsls	r0, r3, #1
    15fa:	47a8      	blx	r5
    15fc:	9002      	str	r0, [sp, #8]
    15fe:	9103      	str	r1, [sp, #12]
    1600:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    1602:	47a8      	blx	r5
    1604:	9004      	str	r0, [sp, #16]
    1606:	9105      	str	r1, [sp, #20]
    1608:	4f4c      	ldr	r7, [pc, #304]	; (173c <i2c_master_init+0x298>)
    160a:	4a4d      	ldr	r2, [pc, #308]	; (1740 <i2c_master_init+0x29c>)
    160c:	4b4d      	ldr	r3, [pc, #308]	; (1744 <i2c_master_init+0x2a0>)
    160e:	9800      	ldr	r0, [sp, #0]
    1610:	9901      	ldr	r1, [sp, #4]
    1612:	47b8      	blx	r7
    1614:	0002      	movs	r2, r0
    1616:	000b      	movs	r3, r1
    1618:	9804      	ldr	r0, [sp, #16]
    161a:	9905      	ldr	r1, [sp, #20]
    161c:	47b8      	blx	r7
    161e:	4e4a      	ldr	r6, [pc, #296]	; (1748 <i2c_master_init+0x2a4>)
    1620:	2200      	movs	r2, #0
    1622:	4b4a      	ldr	r3, [pc, #296]	; (174c <i2c_master_init+0x2a8>)
    1624:	47b0      	blx	r6
    1626:	9004      	str	r0, [sp, #16]
    1628:	9105      	str	r1, [sp, #20]
    162a:	4648      	mov	r0, r9
    162c:	47a8      	blx	r5
    162e:	0002      	movs	r2, r0
    1630:	000b      	movs	r3, r1
    1632:	9804      	ldr	r0, [sp, #16]
    1634:	9905      	ldr	r1, [sp, #20]
    1636:	47b8      	blx	r7
    1638:	0002      	movs	r2, r0
    163a:	000b      	movs	r3, r1
    163c:	4d44      	ldr	r5, [pc, #272]	; (1750 <i2c_master_init+0x2ac>)
    163e:	9800      	ldr	r0, [sp, #0]
    1640:	9901      	ldr	r1, [sp, #4]
    1642:	47a8      	blx	r5
    1644:	9a02      	ldr	r2, [sp, #8]
    1646:	9b03      	ldr	r3, [sp, #12]
    1648:	47b0      	blx	r6
    164a:	2200      	movs	r2, #0
    164c:	4b41      	ldr	r3, [pc, #260]	; (1754 <i2c_master_init+0x2b0>)
    164e:	47a8      	blx	r5
    1650:	9a02      	ldr	r2, [sp, #8]
    1652:	9b03      	ldr	r3, [sp, #12]
    1654:	4d40      	ldr	r5, [pc, #256]	; (1758 <i2c_master_init+0x2b4>)
    1656:	47a8      	blx	r5
    1658:	4b40      	ldr	r3, [pc, #256]	; (175c <i2c_master_init+0x2b8>)
    165a:	4798      	blx	r3
    165c:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    165e:	2380      	movs	r3, #128	; 0x80
    1660:	049b      	lsls	r3, r3, #18
    1662:	68a2      	ldr	r2, [r4, #8]
    1664:	429a      	cmp	r2, r3
    1666:	d01e      	beq.n	16a6 <i2c_master_init+0x202>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1668:	0003      	movs	r3, r0
    166a:	2040      	movs	r0, #64	; 0x40
    166c:	2dff      	cmp	r5, #255	; 0xff
    166e:	d900      	bls.n	1672 <i2c_master_init+0x1ce>
    1670:	e73f      	b.n	14f2 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    1672:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    1674:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1676:	25ff      	movs	r5, #255	; 0xff
    1678:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    167a:	0624      	lsls	r4, r4, #24
    167c:	4325      	orrs	r5, r4
    167e:	0400      	lsls	r0, r0, #16
    1680:	23ff      	movs	r3, #255	; 0xff
    1682:	041b      	lsls	r3, r3, #16
    1684:	4018      	ands	r0, r3
    1686:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1688:	4643      	mov	r3, r8
    168a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    168c:	2000      	movs	r0, #0
    168e:	e730      	b.n	14f2 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1690:	2100      	movs	r1, #0
    1692:	4640      	mov	r0, r8
    1694:	4b32      	ldr	r3, [pc, #200]	; (1760 <i2c_master_init+0x2bc>)
    1696:	4798      	blx	r3
    1698:	e74b      	b.n	1532 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    169a:	2101      	movs	r1, #1
    169c:	4640      	mov	r0, r8
    169e:	4b30      	ldr	r3, [pc, #192]	; (1760 <i2c_master_init+0x2bc>)
    16a0:	4798      	blx	r3
    16a2:	0007      	movs	r7, r0
    16a4:	e752      	b.n	154c <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    16a6:	26fa      	movs	r6, #250	; 0xfa
    16a8:	00b6      	lsls	r6, r6, #2
    16aa:	4653      	mov	r3, sl
    16ac:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    16ae:	9800      	ldr	r0, [sp, #0]
    16b0:	9901      	ldr	r1, [sp, #4]
    16b2:	0002      	movs	r2, r0
    16b4:	000b      	movs	r3, r1
    16b6:	4c24      	ldr	r4, [pc, #144]	; (1748 <i2c_master_init+0x2a4>)
    16b8:	47a0      	blx	r4
    16ba:	9000      	str	r0, [sp, #0]
    16bc:	9101      	str	r1, [sp, #4]
    16be:	0030      	movs	r0, r6
    16c0:	4b1d      	ldr	r3, [pc, #116]	; (1738 <i2c_master_init+0x294>)
    16c2:	4798      	blx	r3
    16c4:	2200      	movs	r2, #0
    16c6:	4b27      	ldr	r3, [pc, #156]	; (1764 <i2c_master_init+0x2c0>)
    16c8:	47b8      	blx	r7
    16ca:	0002      	movs	r2, r0
    16cc:	000b      	movs	r3, r1
    16ce:	9800      	ldr	r0, [sp, #0]
    16d0:	9901      	ldr	r1, [sp, #4]
    16d2:	4c21      	ldr	r4, [pc, #132]	; (1758 <i2c_master_init+0x2b4>)
    16d4:	47a0      	blx	r4
    16d6:	2200      	movs	r2, #0
    16d8:	4b1e      	ldr	r3, [pc, #120]	; (1754 <i2c_master_init+0x2b0>)
    16da:	4c1d      	ldr	r4, [pc, #116]	; (1750 <i2c_master_init+0x2ac>)
    16dc:	47a0      	blx	r4
    16de:	4b1f      	ldr	r3, [pc, #124]	; (175c <i2c_master_init+0x2b8>)
    16e0:	4798      	blx	r3
    16e2:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    16e4:	d00c      	beq.n	1700 <i2c_master_init+0x25c>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    16e6:	0031      	movs	r1, r6
    16e8:	9807      	ldr	r0, [sp, #28]
    16ea:	4b1f      	ldr	r3, [pc, #124]	; (1768 <i2c_master_init+0x2c4>)
    16ec:	4798      	blx	r3
    16ee:	3802      	subs	r0, #2
    16f0:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    16f2:	002b      	movs	r3, r5
    16f4:	2dff      	cmp	r5, #255	; 0xff
    16f6:	d80c      	bhi.n	1712 <i2c_master_init+0x26e>
    16f8:	28ff      	cmp	r0, #255	; 0xff
    16fa:	d9bc      	bls.n	1676 <i2c_master_init+0x1d2>
    16fc:	2040      	movs	r0, #64	; 0x40
    16fe:	e6f8      	b.n	14f2 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1700:	0071      	lsls	r1, r6, #1
    1702:	1e48      	subs	r0, r1, #1
    1704:	9b07      	ldr	r3, [sp, #28]
    1706:	469c      	mov	ip, r3
    1708:	4460      	add	r0, ip
    170a:	4b17      	ldr	r3, [pc, #92]	; (1768 <i2c_master_init+0x2c4>)
    170c:	4798      	blx	r3
    170e:	3801      	subs	r0, #1
    1710:	e7ef      	b.n	16f2 <i2c_master_init+0x24e>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1712:	2040      	movs	r0, #64	; 0x40
    1714:	e6ed      	b.n	14f2 <i2c_master_init+0x4e>
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	0000510d 	.word	0x0000510d
    171c:	40000800 	.word	0x40000800
    1720:	00005fe1 	.word	0x00005fe1
    1724:	00005f71 	.word	0x00005f71
    1728:	00004fc1 	.word	0x00004fc1
    172c:	000060dd 	.word	0x000060dd
    1730:	41002000 	.word	0x41002000
    1734:	00006005 	.word	0x00006005
    1738:	00007fd5 	.word	0x00007fd5
    173c:	00007441 	.word	0x00007441
    1740:	e826d695 	.word	0xe826d695
    1744:	3e112e0b 	.word	0x3e112e0b
    1748:	000067b9 	.word	0x000067b9
    174c:	40240000 	.word	0x40240000
    1750:	00007941 	.word	0x00007941
    1754:	3ff00000 	.word	0x3ff00000
    1758:	00006dd9 	.word	0x00006dd9
    175c:	00007f6d 	.word	0x00007f6d
    1760:	0000500d 	.word	0x0000500d
    1764:	40080000 	.word	0x40080000
    1768:	00006479 	.word	0x00006479

0000176c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    176c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    176e:	7e1a      	ldrb	r2, [r3, #24]
    1770:	0792      	lsls	r2, r2, #30
    1772:	d507      	bpl.n	1784 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1774:	2202      	movs	r2, #2
    1776:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1778:	8b5b      	ldrh	r3, [r3, #26]
    177a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    177c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    177e:	17db      	asrs	r3, r3, #31
    1780:	4018      	ands	r0, r3
}
    1782:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1784:	8b5a      	ldrh	r2, [r3, #26]
    1786:	0752      	lsls	r2, r2, #29
    1788:	d506      	bpl.n	1798 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    178a:	6859      	ldr	r1, [r3, #4]
    178c:	22c0      	movs	r2, #192	; 0xc0
    178e:	0292      	lsls	r2, r2, #10
    1790:	430a      	orrs	r2, r1
    1792:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    1794:	2018      	movs	r0, #24
    1796:	e7f4      	b.n	1782 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    1798:	2000      	movs	r0, #0
    179a:	e7f2      	b.n	1782 <_i2c_master_address_response+0x16>

0000179c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    179c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    179e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    17a0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    17a2:	2401      	movs	r4, #1
    17a4:	2502      	movs	r5, #2
    17a6:	7e11      	ldrb	r1, [r2, #24]
    17a8:	4221      	tst	r1, r4
    17aa:	d10b      	bne.n	17c4 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    17ac:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    17ae:	4229      	tst	r1, r5
    17b0:	d106      	bne.n	17c0 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    17b2:	3301      	adds	r3, #1
    17b4:	b29b      	uxth	r3, r3
    17b6:	8901      	ldrh	r1, [r0, #8]
    17b8:	4299      	cmp	r1, r3
    17ba:	d8f4      	bhi.n	17a6 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    17bc:	2012      	movs	r0, #18
    17be:	e002      	b.n	17c6 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    17c0:	2000      	movs	r0, #0
    17c2:	e000      	b.n	17c6 <_i2c_master_wait_for_bus+0x2a>
    17c4:	2000      	movs	r0, #0
}
    17c6:	bd30      	pop	{r4, r5, pc}

000017c8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    17c8:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    17ca:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    17cc:	6862      	ldr	r2, [r4, #4]
    17ce:	2380      	movs	r3, #128	; 0x80
    17d0:	02db      	lsls	r3, r3, #11
    17d2:	4313      	orrs	r3, r2
    17d4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    17d6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    17d8:	4b02      	ldr	r3, [pc, #8]	; (17e4 <_i2c_master_send_hs_master_code+0x1c>)
    17da:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    17dc:	2301      	movs	r3, #1
    17de:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    17e0:	bd10      	pop	{r4, pc}
    17e2:	46c0      	nop			; (mov r8, r8)
    17e4:	0000179d 	.word	0x0000179d

000017e8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    17e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ea:	46de      	mov	lr, fp
    17ec:	4657      	mov	r7, sl
    17ee:	464e      	mov	r6, r9
    17f0:	4645      	mov	r5, r8
    17f2:	b5e0      	push	{r5, r6, r7, lr}
    17f4:	b083      	sub	sp, #12
    17f6:	0006      	movs	r6, r0
    17f8:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    17fa:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    17fc:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    17fe:	682b      	ldr	r3, [r5, #0]
    1800:	011b      	lsls	r3, r3, #4
    1802:	0fdb      	lsrs	r3, r3, #31
    1804:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1806:	7a4b      	ldrb	r3, [r1, #9]
    1808:	2b00      	cmp	r3, #0
    180a:	d12b      	bne.n	1864 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    180c:	686b      	ldr	r3, [r5, #4]
    180e:	4a58      	ldr	r2, [pc, #352]	; (1970 <_i2c_master_read_packet+0x188>)
    1810:	4013      	ands	r3, r2
    1812:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1814:	464b      	mov	r3, r9
    1816:	7a1b      	ldrb	r3, [r3, #8]
    1818:	2b00      	cmp	r3, #0
    181a:	d127      	bne.n	186c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    181c:	464b      	mov	r3, r9
    181e:	881b      	ldrh	r3, [r3, #0]
    1820:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1822:	464a      	mov	r2, r9
    1824:	7a52      	ldrb	r2, [r2, #9]
    1826:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1828:	4313      	orrs	r3, r2
    182a:	2201      	movs	r2, #1
    182c:	4313      	orrs	r3, r2
    182e:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1830:	0030      	movs	r0, r6
    1832:	4b50      	ldr	r3, [pc, #320]	; (1974 <_i2c_master_read_packet+0x18c>)
    1834:	4798      	blx	r3
    1836:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1838:	4653      	mov	r3, sl
    183a:	2b00      	cmp	r3, #0
    183c:	d003      	beq.n	1846 <_i2c_master_read_packet+0x5e>
    183e:	464b      	mov	r3, r9
    1840:	885b      	ldrh	r3, [r3, #2]
    1842:	2b01      	cmp	r3, #1
    1844:	d03b      	beq.n	18be <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    1846:	686b      	ldr	r3, [r5, #4]
    1848:	4a49      	ldr	r2, [pc, #292]	; (1970 <_i2c_master_read_packet+0x188>)
    184a:	4013      	ands	r3, r2
    184c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    184e:	9b01      	ldr	r3, [sp, #4]
    1850:	2b00      	cmp	r3, #0
    1852:	d03a      	beq.n	18ca <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    1854:	9801      	ldr	r0, [sp, #4]
    1856:	b003      	add	sp, #12
    1858:	bc3c      	pop	{r2, r3, r4, r5}
    185a:	4690      	mov	r8, r2
    185c:	4699      	mov	r9, r3
    185e:	46a2      	mov	sl, r4
    1860:	46ab      	mov	fp, r5
    1862:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1864:	7a89      	ldrb	r1, [r1, #10]
    1866:	4b44      	ldr	r3, [pc, #272]	; (1978 <_i2c_master_read_packet+0x190>)
    1868:	4798      	blx	r3
    186a:	e7cf      	b.n	180c <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    186c:	464b      	mov	r3, r9
    186e:	881b      	ldrh	r3, [r3, #0]
    1870:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1872:	464a      	mov	r2, r9
    1874:	7a52      	ldrb	r2, [r2, #9]
    1876:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    1878:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    187a:	2280      	movs	r2, #128	; 0x80
    187c:	0212      	lsls	r2, r2, #8
    187e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    1880:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    1882:	0030      	movs	r0, r6
    1884:	4b3b      	ldr	r3, [pc, #236]	; (1974 <_i2c_master_read_packet+0x18c>)
    1886:	4798      	blx	r3
    1888:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    188a:	686b      	ldr	r3, [r5, #4]
    188c:	4a38      	ldr	r2, [pc, #224]	; (1970 <_i2c_master_read_packet+0x188>)
    188e:	4013      	ands	r3, r2
    1890:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    1892:	2800      	cmp	r0, #0
    1894:	d1de      	bne.n	1854 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    1896:	0030      	movs	r0, r6
    1898:	4b38      	ldr	r3, [pc, #224]	; (197c <_i2c_master_read_packet+0x194>)
    189a:	4798      	blx	r3
    189c:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    189e:	2800      	cmp	r0, #0
    18a0:	d1d8      	bne.n	1854 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    18a2:	464b      	mov	r3, r9
    18a4:	881b      	ldrh	r3, [r3, #0]
    18a6:	0a1b      	lsrs	r3, r3, #8
    18a8:	2278      	movs	r2, #120	; 0x78
    18aa:	4313      	orrs	r3, r2
    18ac:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    18ae:	464a      	mov	r2, r9
    18b0:	7a52      	ldrb	r2, [r2, #9]
    18b2:	0392      	lsls	r2, r2, #14
    18b4:	2101      	movs	r1, #1
    18b6:	430a      	orrs	r2, r1
    18b8:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    18ba:	626b      	str	r3, [r5, #36]	; 0x24
    18bc:	e7b8      	b.n	1830 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    18be:	686a      	ldr	r2, [r5, #4]
    18c0:	2380      	movs	r3, #128	; 0x80
    18c2:	02db      	lsls	r3, r3, #11
    18c4:	4313      	orrs	r3, r2
    18c6:	606b      	str	r3, [r5, #4]
    18c8:	e7c1      	b.n	184e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    18ca:	0030      	movs	r0, r6
    18cc:	4b2b      	ldr	r3, [pc, #172]	; (197c <_i2c_master_read_packet+0x194>)
    18ce:	4798      	blx	r3
    18d0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    18d2:	2800      	cmp	r0, #0
    18d4:	d1be      	bne.n	1854 <_i2c_master_read_packet+0x6c>
    18d6:	3c01      	subs	r4, #1
    18d8:	b2a4      	uxth	r4, r4
    18da:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    18dc:	4b28      	ldr	r3, [pc, #160]	; (1980 <_i2c_master_read_packet+0x198>)
    18de:	469b      	mov	fp, r3
    18e0:	e015      	b.n	190e <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    18e2:	2c01      	cmp	r4, #1
    18e4:	d020      	beq.n	1928 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    18e6:	0030      	movs	r0, r6
    18e8:	4b26      	ldr	r3, [pc, #152]	; (1984 <_i2c_master_read_packet+0x19c>)
    18ea:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    18ec:	4643      	mov	r3, r8
    18ee:	1c5f      	adds	r7, r3, #1
    18f0:	b2bf      	uxth	r7, r7
    18f2:	2328      	movs	r3, #40	; 0x28
    18f4:	5ceb      	ldrb	r3, [r5, r3]
    18f6:	464a      	mov	r2, r9
    18f8:	6852      	ldr	r2, [r2, #4]
    18fa:	4641      	mov	r1, r8
    18fc:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    18fe:	0030      	movs	r0, r6
    1900:	4b1c      	ldr	r3, [pc, #112]	; (1974 <_i2c_master_read_packet+0x18c>)
    1902:	4798      	blx	r3
    1904:	3c01      	subs	r4, #1
    1906:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    1908:	2800      	cmp	r0, #0
    190a:	d115      	bne.n	1938 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    190c:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    190e:	455c      	cmp	r4, fp
    1910:	d014      	beq.n	193c <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1912:	8b6b      	ldrh	r3, [r5, #26]
    1914:	069b      	lsls	r3, r3, #26
    1916:	d527      	bpl.n	1968 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1918:	7af3      	ldrb	r3, [r6, #11]
    191a:	2b00      	cmp	r3, #0
    191c:	d0e3      	beq.n	18e6 <_i2c_master_read_packet+0xfe>
    191e:	4653      	mov	r3, sl
    1920:	2b00      	cmp	r3, #0
    1922:	d1de      	bne.n	18e2 <_i2c_master_read_packet+0xfa>
    1924:	2c00      	cmp	r4, #0
    1926:	d1de      	bne.n	18e6 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1928:	686a      	ldr	r2, [r5, #4]
    192a:	2380      	movs	r3, #128	; 0x80
    192c:	02db      	lsls	r3, r3, #11
    192e:	4313      	orrs	r3, r2
    1930:	606b      	str	r3, [r5, #4]
    1932:	3c01      	subs	r4, #1
    1934:	b2a4      	uxth	r4, r4
    1936:	e7ea      	b.n	190e <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    1938:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    193a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    193c:	7ab3      	ldrb	r3, [r6, #10]
    193e:	2b00      	cmp	r3, #0
    1940:	d109      	bne.n	1956 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    1942:	0030      	movs	r0, r6
    1944:	4b0f      	ldr	r3, [pc, #60]	; (1984 <_i2c_master_read_packet+0x19c>)
    1946:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1948:	2328      	movs	r3, #40	; 0x28
    194a:	5cea      	ldrb	r2, [r5, r3]
    194c:	464b      	mov	r3, r9
    194e:	685b      	ldr	r3, [r3, #4]
    1950:	4641      	mov	r1, r8
    1952:	545a      	strb	r2, [r3, r1]
    1954:	e77e      	b.n	1854 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    1956:	0030      	movs	r0, r6
    1958:	4b0a      	ldr	r3, [pc, #40]	; (1984 <_i2c_master_read_packet+0x19c>)
    195a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    195c:	686a      	ldr	r2, [r5, #4]
    195e:	23c0      	movs	r3, #192	; 0xc0
    1960:	029b      	lsls	r3, r3, #10
    1962:	4313      	orrs	r3, r2
    1964:	606b      	str	r3, [r5, #4]
    1966:	e7ec      	b.n	1942 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    1968:	2341      	movs	r3, #65	; 0x41
    196a:	9301      	str	r3, [sp, #4]
    196c:	e772      	b.n	1854 <_i2c_master_read_packet+0x6c>
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	fffbffff 	.word	0xfffbffff
    1974:	0000179d 	.word	0x0000179d
    1978:	000017c9 	.word	0x000017c9
    197c:	0000176d 	.word	0x0000176d
    1980:	0000ffff 	.word	0x0000ffff
    1984:	00001499 	.word	0x00001499

00001988 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1988:	b5f0      	push	{r4, r5, r6, r7, lr}
    198a:	46de      	mov	lr, fp
    198c:	4657      	mov	r7, sl
    198e:	464e      	mov	r6, r9
    1990:	4645      	mov	r5, r8
    1992:	b5e0      	push	{r5, r6, r7, lr}
    1994:	b083      	sub	sp, #12
    1996:	0006      	movs	r6, r0
    1998:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    199a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    199c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    199e:	4b32      	ldr	r3, [pc, #200]	; (1a68 <_i2c_master_write_packet+0xe0>)
    19a0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    19a2:	7a7b      	ldrb	r3, [r7, #9]
    19a4:	2b00      	cmp	r3, #0
    19a6:	d11d      	bne.n	19e4 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    19a8:	686b      	ldr	r3, [r5, #4]
    19aa:	4a30      	ldr	r2, [pc, #192]	; (1a6c <_i2c_master_write_packet+0xe4>)
    19ac:	4013      	ands	r3, r2
    19ae:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    19b0:	7a3b      	ldrb	r3, [r7, #8]
    19b2:	2b00      	cmp	r3, #0
    19b4:	d01b      	beq.n	19ee <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    19b6:	883b      	ldrh	r3, [r7, #0]
    19b8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    19ba:	7a7a      	ldrb	r2, [r7, #9]
    19bc:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    19be:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    19c0:	2280      	movs	r2, #128	; 0x80
    19c2:	0212      	lsls	r2, r2, #8
    19c4:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    19c6:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    19c8:	0030      	movs	r0, r6
    19ca:	4b29      	ldr	r3, [pc, #164]	; (1a70 <_i2c_master_write_packet+0xe8>)
    19cc:	4798      	blx	r3
    19ce:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    19d0:	2800      	cmp	r0, #0
    19d2:	d013      	beq.n	19fc <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    19d4:	9801      	ldr	r0, [sp, #4]
    19d6:	b003      	add	sp, #12
    19d8:	bc3c      	pop	{r2, r3, r4, r5}
    19da:	4690      	mov	r8, r2
    19dc:	4699      	mov	r9, r3
    19de:	46a2      	mov	sl, r4
    19e0:	46ab      	mov	fp, r5
    19e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    19e4:	7ab9      	ldrb	r1, [r7, #10]
    19e6:	0030      	movs	r0, r6
    19e8:	4b22      	ldr	r3, [pc, #136]	; (1a74 <_i2c_master_write_packet+0xec>)
    19ea:	4798      	blx	r3
    19ec:	e7dc      	b.n	19a8 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    19ee:	883b      	ldrh	r3, [r7, #0]
    19f0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    19f2:	7a7a      	ldrb	r2, [r7, #9]
    19f4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    19f6:	4313      	orrs	r3, r2
    19f8:	626b      	str	r3, [r5, #36]	; 0x24
    19fa:	e7e5      	b.n	19c8 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    19fc:	0030      	movs	r0, r6
    19fe:	4b1e      	ldr	r3, [pc, #120]	; (1a78 <_i2c_master_write_packet+0xf0>)
    1a00:	4798      	blx	r3
    1a02:	1e03      	subs	r3, r0, #0
    1a04:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    1a06:	d1e5      	bne.n	19d4 <_i2c_master_write_packet+0x4c>
    1a08:	46a0      	mov	r8, r4
    1a0a:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1a0c:	3320      	adds	r3, #32
    1a0e:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    1a10:	4b15      	ldr	r3, [pc, #84]	; (1a68 <_i2c_master_write_packet+0xe0>)
    1a12:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    1a14:	4b16      	ldr	r3, [pc, #88]	; (1a70 <_i2c_master_write_packet+0xe8>)
    1a16:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    1a18:	4544      	cmp	r4, r8
    1a1a:	d015      	beq.n	1a48 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1a1c:	8b6b      	ldrh	r3, [r5, #26]
    1a1e:	464a      	mov	r2, r9
    1a20:	4213      	tst	r3, r2
    1a22:	d01d      	beq.n	1a60 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    1a24:	0030      	movs	r0, r6
    1a26:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1a28:	687b      	ldr	r3, [r7, #4]
    1a2a:	5d1a      	ldrb	r2, [r3, r4]
    1a2c:	2328      	movs	r3, #40	; 0x28
    1a2e:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    1a30:	0030      	movs	r0, r6
    1a32:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    1a34:	2800      	cmp	r0, #0
    1a36:	d106      	bne.n	1a46 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1a38:	8b6b      	ldrh	r3, [r5, #26]
    1a3a:	3401      	adds	r4, #1
    1a3c:	075b      	lsls	r3, r3, #29
    1a3e:	d5eb      	bpl.n	1a18 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    1a40:	231e      	movs	r3, #30
    1a42:	9301      	str	r3, [sp, #4]
    1a44:	e000      	b.n	1a48 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    1a46:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    1a48:	7ab3      	ldrb	r3, [r6, #10]
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d0c2      	beq.n	19d4 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    1a4e:	0030      	movs	r0, r6
    1a50:	4b05      	ldr	r3, [pc, #20]	; (1a68 <_i2c_master_write_packet+0xe0>)
    1a52:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a54:	686a      	ldr	r2, [r5, #4]
    1a56:	23c0      	movs	r3, #192	; 0xc0
    1a58:	029b      	lsls	r3, r3, #10
    1a5a:	4313      	orrs	r3, r2
    1a5c:	606b      	str	r3, [r5, #4]
    1a5e:	e7b9      	b.n	19d4 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    1a60:	2341      	movs	r3, #65	; 0x41
    1a62:	9301      	str	r3, [sp, #4]
    1a64:	e7b6      	b.n	19d4 <_i2c_master_write_packet+0x4c>
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	00001499 	.word	0x00001499
    1a6c:	fffbffff 	.word	0xfffbffff
    1a70:	0000179d 	.word	0x0000179d
    1a74:	000017c9 	.word	0x000017c9
    1a78:	0000176d 	.word	0x0000176d

00001a7c <i2c_master_read_packet_wait>:
{
    1a7c:	b510      	push	{r4, lr}
	module->send_stop = true;
    1a7e:	2301      	movs	r3, #1
    1a80:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1a82:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    1a84:	4b01      	ldr	r3, [pc, #4]	; (1a8c <i2c_master_read_packet_wait+0x10>)
    1a86:	4798      	blx	r3
}
    1a88:	bd10      	pop	{r4, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	000017e9 	.word	0x000017e9

00001a90 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1a90:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    1a92:	2300      	movs	r3, #0
    1a94:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1a96:	3301      	adds	r3, #1
    1a98:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    1a9a:	4b01      	ldr	r3, [pc, #4]	; (1aa0 <i2c_master_write_packet_wait_no_stop+0x10>)
    1a9c:	4798      	blx	r3
}
    1a9e:	bd10      	pop	{r4, pc}
    1aa0:	00001989 	.word	0x00001989

00001aa4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aa6:	46c6      	mov	lr, r8
    1aa8:	b500      	push	{lr}
    1aaa:	000c      	movs	r4, r1
    1aac:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1aae:	2800      	cmp	r0, #0
    1ab0:	d10f      	bne.n	1ad2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1ab2:	2a00      	cmp	r2, #0
    1ab4:	dd11      	ble.n	1ada <_read+0x36>
    1ab6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1ab8:	4e09      	ldr	r6, [pc, #36]	; (1ae0 <_read+0x3c>)
    1aba:	4d0a      	ldr	r5, [pc, #40]	; (1ae4 <_read+0x40>)
    1abc:	6830      	ldr	r0, [r6, #0]
    1abe:	0021      	movs	r1, r4
    1ac0:	682b      	ldr	r3, [r5, #0]
    1ac2:	4798      	blx	r3
		ptr++;
    1ac4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1ac6:	42bc      	cmp	r4, r7
    1ac8:	d1f8      	bne.n	1abc <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1aca:	4640      	mov	r0, r8
    1acc:	bc04      	pop	{r2}
    1ace:	4690      	mov	r8, r2
    1ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1ad2:	2301      	movs	r3, #1
    1ad4:	425b      	negs	r3, r3
    1ad6:	4698      	mov	r8, r3
    1ad8:	e7f7      	b.n	1aca <_read+0x26>
	for (; len > 0; --len) {
    1ada:	4680      	mov	r8, r0
    1adc:	e7f5      	b.n	1aca <_read+0x26>
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	20000b70 	.word	0x20000b70
    1ae4:	20000b68 	.word	0x20000b68

00001ae8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aea:	46c6      	mov	lr, r8
    1aec:	b500      	push	{lr}
    1aee:	000e      	movs	r6, r1
    1af0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1af2:	3801      	subs	r0, #1
    1af4:	2802      	cmp	r0, #2
    1af6:	d810      	bhi.n	1b1a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1af8:	2a00      	cmp	r2, #0
    1afa:	d011      	beq.n	1b20 <_write+0x38>
    1afc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1afe:	4b0c      	ldr	r3, [pc, #48]	; (1b30 <_write+0x48>)
    1b00:	4698      	mov	r8, r3
    1b02:	4f0c      	ldr	r7, [pc, #48]	; (1b34 <_write+0x4c>)
    1b04:	4643      	mov	r3, r8
    1b06:	6818      	ldr	r0, [r3, #0]
    1b08:	5d31      	ldrb	r1, [r6, r4]
    1b0a:	683b      	ldr	r3, [r7, #0]
    1b0c:	4798      	blx	r3
    1b0e:	2800      	cmp	r0, #0
    1b10:	db08      	blt.n	1b24 <_write+0x3c>
			return -1;
		}
		++nChars;
    1b12:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1b14:	42a5      	cmp	r5, r4
    1b16:	d1f5      	bne.n	1b04 <_write+0x1c>
    1b18:	e006      	b.n	1b28 <_write+0x40>
		return -1;
    1b1a:	2401      	movs	r4, #1
    1b1c:	4264      	negs	r4, r4
    1b1e:	e003      	b.n	1b28 <_write+0x40>
	for (; len != 0; --len) {
    1b20:	0014      	movs	r4, r2
    1b22:	e001      	b.n	1b28 <_write+0x40>
			return -1;
    1b24:	2401      	movs	r4, #1
    1b26:	4264      	negs	r4, r4
	}
	return nChars;
}
    1b28:	0020      	movs	r0, r4
    1b2a:	bc04      	pop	{r2}
    1b2c:	4690      	mov	r8, r2
    1b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b30:	20000b70 	.word	0x20000b70
    1b34:	20000b6c 	.word	0x20000b6c

00001b38 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b3a:	46de      	mov	lr, fp
    1b3c:	4657      	mov	r7, sl
    1b3e:	464e      	mov	r6, r9
    1b40:	4645      	mov	r5, r8
    1b42:	b5e0      	push	{r5, r6, r7, lr}
    1b44:	b091      	sub	sp, #68	; 0x44
    1b46:	0005      	movs	r5, r0
    1b48:	000c      	movs	r4, r1
    1b4a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1b4c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1b4e:	0008      	movs	r0, r1
    1b50:	4bd1      	ldr	r3, [pc, #836]	; (1e98 <usart_init+0x360>)
    1b52:	4798      	blx	r3
    1b54:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1b56:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1b58:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1b5a:	07db      	lsls	r3, r3, #31
    1b5c:	d506      	bpl.n	1b6c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1b5e:	b011      	add	sp, #68	; 0x44
    1b60:	bc3c      	pop	{r2, r3, r4, r5}
    1b62:	4690      	mov	r8, r2
    1b64:	4699      	mov	r9, r3
    1b66:	46a2      	mov	sl, r4
    1b68:	46ab      	mov	fp, r5
    1b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1b6c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1b6e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1b70:	079b      	lsls	r3, r3, #30
    1b72:	d4f4      	bmi.n	1b5e <usart_init+0x26>
    1b74:	49c9      	ldr	r1, [pc, #804]	; (1e9c <usart_init+0x364>)
    1b76:	69c8      	ldr	r0, [r1, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1b78:	1c57      	adds	r7, r2, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1b7a:	2301      	movs	r3, #1
    1b7c:	40bb      	lsls	r3, r7
    1b7e:	4303      	orrs	r3, r0
    1b80:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    1b82:	a90f      	add	r1, sp, #60	; 0x3c
    1b84:	2735      	movs	r7, #53	; 0x35
    1b86:	5df3      	ldrb	r3, [r6, r7]
    1b88:	700b      	strb	r3, [r1, #0]
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    1b8a:	3213      	adds	r2, #19
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1b8c:	b2d3      	uxtb	r3, r2
    1b8e:	9302      	str	r3, [sp, #8]
    1b90:	0018      	movs	r0, r3
    1b92:	4bc3      	ldr	r3, [pc, #780]	; (1ea0 <usart_init+0x368>)
    1b94:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1b96:	9802      	ldr	r0, [sp, #8]
    1b98:	4bc2      	ldr	r3, [pc, #776]	; (1ea4 <usart_init+0x36c>)
    1b9a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1b9c:	5df0      	ldrb	r0, [r6, r7]
    1b9e:	2100      	movs	r1, #0
    1ba0:	4bc1      	ldr	r3, [pc, #772]	; (1ea8 <usart_init+0x370>)
    1ba2:	4798      	blx	r3
	module->character_size = config->character_size;
    1ba4:	7af3      	ldrb	r3, [r6, #11]
    1ba6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1ba8:	232c      	movs	r3, #44	; 0x2c
    1baa:	5cf3      	ldrb	r3, [r6, r3]
    1bac:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1bae:	232d      	movs	r3, #45	; 0x2d
    1bb0:	5cf3      	ldrb	r3, [r6, r3]
    1bb2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1bb4:	7ef3      	ldrb	r3, [r6, #27]
    1bb6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1bb8:	2324      	movs	r3, #36	; 0x24
    1bba:	5cf3      	ldrb	r3, [r6, r3]
    1bbc:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1bbe:	682b      	ldr	r3, [r5, #0]
    1bc0:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1bc2:	0018      	movs	r0, r3
    1bc4:	4bb4      	ldr	r3, [pc, #720]	; (1e98 <usart_init+0x360>)
    1bc6:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1bc8:	3013      	adds	r0, #19
	uint16_t baud  = 0;
    1bca:	2200      	movs	r2, #0
    1bcc:	230e      	movs	r3, #14
    1bce:	a906      	add	r1, sp, #24
    1bd0:	468c      	mov	ip, r1
    1bd2:	4463      	add	r3, ip
    1bd4:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1bd6:	8a33      	ldrh	r3, [r6, #16]
    1bd8:	4698      	mov	r8, r3
    1bda:	2380      	movs	r3, #128	; 0x80
    1bdc:	01db      	lsls	r3, r3, #7
    1bde:	4598      	cmp	r8, r3
    1be0:	d100      	bne.n	1be4 <usart_init+0xac>
    1be2:	e0c6      	b.n	1d72 <usart_init+0x23a>
    1be4:	d90e      	bls.n	1c04 <usart_init+0xcc>
    1be6:	23c0      	movs	r3, #192	; 0xc0
    1be8:	01db      	lsls	r3, r3, #7
    1bea:	4598      	cmp	r8, r3
    1bec:	d100      	bne.n	1bf0 <usart_init+0xb8>
    1bee:	e0bb      	b.n	1d68 <usart_init+0x230>
    1bf0:	2380      	movs	r3, #128	; 0x80
    1bf2:	021b      	lsls	r3, r3, #8
    1bf4:	4598      	cmp	r8, r3
    1bf6:	d000      	beq.n	1bfa <usart_init+0xc2>
    1bf8:	e148      	b.n	1e8c <usart_init+0x354>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1bfa:	2303      	movs	r3, #3
    1bfc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1bfe:	2300      	movs	r3, #0
    1c00:	9307      	str	r3, [sp, #28]
    1c02:	e008      	b.n	1c16 <usart_init+0xde>
	switch (config->sample_rate) {
    1c04:	2380      	movs	r3, #128	; 0x80
    1c06:	019b      	lsls	r3, r3, #6
    1c08:	4598      	cmp	r8, r3
    1c0a:	d000      	beq.n	1c0e <usart_init+0xd6>
    1c0c:	e13e      	b.n	1e8c <usart_init+0x354>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1c0e:	2310      	movs	r3, #16
    1c10:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1c12:	3b0f      	subs	r3, #15
    1c14:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1c16:	6833      	ldr	r3, [r6, #0]
    1c18:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1c1a:	68f3      	ldr	r3, [r6, #12]
    1c1c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1c1e:	6973      	ldr	r3, [r6, #20]
    1c20:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1c22:	7e33      	ldrb	r3, [r6, #24]
    1c24:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1c26:	232e      	movs	r3, #46	; 0x2e
    1c28:	5cf3      	ldrb	r3, [r6, r3]
    1c2a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1c2c:	6873      	ldr	r3, [r6, #4]
    1c2e:	4699      	mov	r9, r3
	switch (transfer_mode)
    1c30:	2b00      	cmp	r3, #0
    1c32:	d100      	bne.n	1c36 <usart_init+0xfe>
    1c34:	e0c9      	b.n	1dca <usart_init+0x292>
    1c36:	2380      	movs	r3, #128	; 0x80
    1c38:	055b      	lsls	r3, r3, #21
    1c3a:	4599      	cmp	r9, r3
    1c3c:	d100      	bne.n	1c40 <usart_init+0x108>
    1c3e:	e0ad      	b.n	1d9c <usart_init+0x264>
	if(config->encoding_format_enable) {
    1c40:	7e73      	ldrb	r3, [r6, #25]
    1c42:	2b00      	cmp	r3, #0
    1c44:	d002      	beq.n	1c4c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1c46:	7eb3      	ldrb	r3, [r6, #26]
    1c48:	9a02      	ldr	r2, [sp, #8]
    1c4a:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c4c:	682a      	ldr	r2, [r5, #0]
    1c4e:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    1c50:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1c52:	2b00      	cmp	r3, #0
    1c54:	d1fc      	bne.n	1c50 <usart_init+0x118>
    1c56:	9702      	str	r7, [sp, #8]
	usart_hw->BAUD.reg = baud;
    1c58:	330e      	adds	r3, #14
    1c5a:	a906      	add	r1, sp, #24
    1c5c:	468c      	mov	ip, r1
    1c5e:	4463      	add	r3, ip
    1c60:	881b      	ldrh	r3, [r3, #0]
    1c62:	81bb      	strh	r3, [r7, #12]
	ctrla |= transfer_mode;
    1c64:	9a05      	ldr	r2, [sp, #20]
    1c66:	9b03      	ldr	r3, [sp, #12]
    1c68:	431a      	orrs	r2, r3
    1c6a:	9b04      	ldr	r3, [sp, #16]
    1c6c:	431a      	orrs	r2, r3
    1c6e:	464b      	mov	r3, r9
    1c70:	431a      	orrs	r2, r3
    1c72:	4643      	mov	r3, r8
    1c74:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1c76:	465b      	mov	r3, fp
    1c78:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1c7a:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1c7c:	4653      	mov	r3, sl
    1c7e:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1c80:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
    1c82:	232f      	movs	r3, #47	; 0x2f
    1c84:	5cf3      	ldrb	r3, [r6, r3]
    1c86:	2b00      	cmp	r3, #0
    1c88:	d101      	bne.n	1c8e <usart_init+0x156>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1c8a:	3304      	adds	r3, #4
    1c8c:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1c8e:	7e73      	ldrb	r3, [r6, #25]
    1c90:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1c92:	2124      	movs	r1, #36	; 0x24
    1c94:	5c71      	ldrb	r1, [r6, r1]
    1c96:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1c98:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1c9a:	2126      	movs	r1, #38	; 0x26
    1c9c:	5c71      	ldrb	r1, [r6, r1]
    1c9e:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1ca0:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1ca2:	212c      	movs	r1, #44	; 0x2c
    1ca4:	5c71      	ldrb	r1, [r6, r1]
    1ca6:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1ca8:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1caa:	212d      	movs	r1, #45	; 0x2d
    1cac:	5c71      	ldrb	r1, [r6, r1]
    1cae:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1cb0:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    1cb2:	7ab0      	ldrb	r0, [r6, #10]
    1cb4:	7af1      	ldrb	r1, [r6, #11]
    1cb6:	4308      	orrs	r0, r1
    1cb8:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
    1cba:	8933      	ldrh	r3, [r6, #8]
    1cbc:	2bff      	cmp	r3, #255	; 0xff
    1cbe:	d100      	bne.n	1cc2 <usart_init+0x18a>
    1cc0:	e0a7      	b.n	1e12 <usart_init+0x2da>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1cc2:	2180      	movs	r1, #128	; 0x80
    1cc4:	0449      	lsls	r1, r1, #17
    1cc6:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
    1cc8:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1cca:	9902      	ldr	r1, [sp, #8]
    1ccc:	688b      	ldr	r3, [r1, #8]
    1cce:	469c      	mov	ip, r3
						| config->lin_break_length;
    1cd0:	8c33      	ldrh	r3, [r6, #32]
    1cd2:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    1cd4:	430b      	orrs	r3, r1
    1cd6:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1cd8:	2107      	movs	r1, #7
    1cda:	4663      	mov	r3, ip
    1cdc:	4019      	ands	r1, r3
						| config->lin_break_length;
    1cde:	003b      	movs	r3, r7
    1ce0:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1ce2:	9902      	ldr	r1, [sp, #8]
    1ce4:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
    1ce6:	69f3      	ldr	r3, [r6, #28]
    1ce8:	2b00      	cmp	r3, #0
    1cea:	d002      	beq.n	1cf2 <usart_init+0x1ba>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    1cec:	496f      	ldr	r1, [pc, #444]	; (1eac <usart_init+0x374>)
    1cee:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
    1cf0:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1cf2:	2334      	movs	r3, #52	; 0x34
    1cf4:	5cf3      	ldrb	r3, [r6, r3]
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	d103      	bne.n	1d02 <usart_init+0x1ca>
    1cfa:	4b6d      	ldr	r3, [pc, #436]	; (1eb0 <usart_init+0x378>)
    1cfc:	789b      	ldrb	r3, [r3, #2]
    1cfe:	079b      	lsls	r3, r3, #30
    1d00:	d501      	bpl.n	1d06 <usart_init+0x1ce>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1d02:	2380      	movs	r3, #128	; 0x80
    1d04:	431a      	orrs	r2, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d06:	6829      	ldr	r1, [r5, #0]
    1d08:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    1d0a:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    1d0c:	2b00      	cmp	r3, #0
    1d0e:	d1fc      	bne.n	1d0a <usart_init+0x1d2>
	usart_hw->CTRLB.reg = ctrlb;
    1d10:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d12:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1d14:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    1d16:	2b00      	cmp	r3, #0
    1d18:	d1fc      	bne.n	1d14 <usart_init+0x1dc>
	usart_hw->CTRLA.reg = ctrla;
    1d1a:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    1d1c:	683b      	ldr	r3, [r7, #0]
    1d1e:	22f0      	movs	r2, #240	; 0xf0
    1d20:	0512      	lsls	r2, r2, #20
    1d22:	4013      	ands	r3, r2
    1d24:	22e0      	movs	r2, #224	; 0xe0
    1d26:	04d2      	lsls	r2, r2, #19
    1d28:	4293      	cmp	r3, r2
    1d2a:	d00a      	beq.n	1d42 <usart_init+0x20a>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    1d2c:	68bb      	ldr	r3, [r7, #8]
    1d2e:	2207      	movs	r2, #7
    1d30:	4393      	bics	r3, r2
    1d32:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    1d34:	68ba      	ldr	r2, [r7, #8]
    1d36:	2325      	movs	r3, #37	; 0x25
    1d38:	5cf1      	ldrb	r1, [r6, r3]
    1d3a:	3b1e      	subs	r3, #30
    1d3c:	400b      	ands	r3, r1
    1d3e:	4313      	orrs	r3, r2
    1d40:	60bb      	str	r3, [r7, #8]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1d42:	ab0e      	add	r3, sp, #56	; 0x38
    1d44:	2280      	movs	r2, #128	; 0x80
    1d46:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d48:	2200      	movs	r2, #0
    1d4a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1d4c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1d4e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1d50:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1d52:	930a      	str	r3, [sp, #40]	; 0x28
    1d54:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1d56:	930b      	str	r3, [sp, #44]	; 0x2c
    1d58:	6c33      	ldr	r3, [r6, #64]	; 0x40
    1d5a:	930c      	str	r3, [sp, #48]	; 0x30
    1d5c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    1d5e:	9302      	str	r3, [sp, #8]
    1d60:	930d      	str	r3, [sp, #52]	; 0x34
    1d62:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1d64:	ae0a      	add	r6, sp, #40	; 0x28
    1d66:	e063      	b.n	1e30 <usart_init+0x2f8>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1d68:	2308      	movs	r3, #8
    1d6a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1d6c:	3b07      	subs	r3, #7
    1d6e:	9307      	str	r3, [sp, #28]
    1d70:	e751      	b.n	1c16 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1d72:	6833      	ldr	r3, [r6, #0]
    1d74:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1d76:	68f3      	ldr	r3, [r6, #12]
    1d78:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1d7a:	6973      	ldr	r3, [r6, #20]
    1d7c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1d7e:	7e33      	ldrb	r3, [r6, #24]
    1d80:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1d82:	232e      	movs	r3, #46	; 0x2e
    1d84:	5cf3      	ldrb	r3, [r6, r3]
    1d86:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1d88:	6873      	ldr	r3, [r6, #4]
    1d8a:	4699      	mov	r9, r3
	switch (transfer_mode)
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d018      	beq.n	1dc2 <usart_init+0x28a>
    1d90:	2380      	movs	r3, #128	; 0x80
    1d92:	055b      	lsls	r3, r3, #21
    1d94:	4599      	cmp	r9, r3
    1d96:	d001      	beq.n	1d9c <usart_init+0x264>
	enum status_code status_code = STATUS_OK;
    1d98:	2000      	movs	r0, #0
    1d9a:	e025      	b.n	1de8 <usart_init+0x2b0>
			if (!config->use_external_clock) {
    1d9c:	232f      	movs	r3, #47	; 0x2f
    1d9e:	5cf3      	ldrb	r3, [r6, r3]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d000      	beq.n	1da6 <usart_init+0x26e>
    1da4:	e74c      	b.n	1c40 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1da6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1da8:	001f      	movs	r7, r3
    1daa:	b2c0      	uxtb	r0, r0
    1dac:	4b41      	ldr	r3, [pc, #260]	; (1eb4 <usart_init+0x37c>)
    1dae:	4798      	blx	r3
    1db0:	0001      	movs	r1, r0
    1db2:	220e      	movs	r2, #14
    1db4:	ab06      	add	r3, sp, #24
    1db6:	469c      	mov	ip, r3
    1db8:	4462      	add	r2, ip
    1dba:	0038      	movs	r0, r7
    1dbc:	4b3e      	ldr	r3, [pc, #248]	; (1eb8 <usart_init+0x380>)
    1dbe:	4798      	blx	r3
    1dc0:	e012      	b.n	1de8 <usart_init+0x2b0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1dc2:	2308      	movs	r3, #8
    1dc4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1dc6:	2300      	movs	r3, #0
    1dc8:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1dca:	232f      	movs	r3, #47	; 0x2f
    1dcc:	5cf3      	ldrb	r3, [r6, r3]
    1dce:	2b00      	cmp	r3, #0
    1dd0:	d00e      	beq.n	1df0 <usart_init+0x2b8>
				status_code =
    1dd2:	9b06      	ldr	r3, [sp, #24]
    1dd4:	9300      	str	r3, [sp, #0]
    1dd6:	9b07      	ldr	r3, [sp, #28]
    1dd8:	220e      	movs	r2, #14
    1dda:	a906      	add	r1, sp, #24
    1ddc:	468c      	mov	ip, r1
    1dde:	4462      	add	r2, ip
    1de0:	6b31      	ldr	r1, [r6, #48]	; 0x30
    1de2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1de4:	4f35      	ldr	r7, [pc, #212]	; (1ebc <usart_init+0x384>)
    1de6:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1de8:	2800      	cmp	r0, #0
    1dea:	d000      	beq.n	1dee <usart_init+0x2b6>
    1dec:	e6b7      	b.n	1b5e <usart_init+0x26>
    1dee:	e727      	b.n	1c40 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1df0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1df2:	001f      	movs	r7, r3
    1df4:	b2c0      	uxtb	r0, r0
    1df6:	4b2f      	ldr	r3, [pc, #188]	; (1eb4 <usart_init+0x37c>)
    1df8:	4798      	blx	r3
    1dfa:	0001      	movs	r1, r0
				status_code =
    1dfc:	9b06      	ldr	r3, [sp, #24]
    1dfe:	9300      	str	r3, [sp, #0]
    1e00:	9b07      	ldr	r3, [sp, #28]
    1e02:	220e      	movs	r2, #14
    1e04:	a806      	add	r0, sp, #24
    1e06:	4684      	mov	ip, r0
    1e08:	4462      	add	r2, ip
    1e0a:	0038      	movs	r0, r7
    1e0c:	4f2b      	ldr	r7, [pc, #172]	; (1ebc <usart_init+0x384>)
    1e0e:	47b8      	blx	r7
    1e10:	e7ea      	b.n	1de8 <usart_init+0x2b0>
		if(config->lin_slave_enable) {
    1e12:	7ef3      	ldrb	r3, [r6, #27]
    1e14:	2b00      	cmp	r3, #0
    1e16:	d100      	bne.n	1e1a <usart_init+0x2e2>
    1e18:	e757      	b.n	1cca <usart_init+0x192>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1e1a:	2380      	movs	r3, #128	; 0x80
    1e1c:	04db      	lsls	r3, r3, #19
    1e1e:	431a      	orrs	r2, r3
    1e20:	e753      	b.n	1cca <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1e22:	0020      	movs	r0, r4
    1e24:	4b26      	ldr	r3, [pc, #152]	; (1ec0 <usart_init+0x388>)
    1e26:	4798      	blx	r3
    1e28:	e007      	b.n	1e3a <usart_init+0x302>
    1e2a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1e2c:	2f04      	cmp	r7, #4
    1e2e:	d00d      	beq.n	1e4c <usart_init+0x314>
    1e30:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1e32:	00bb      	lsls	r3, r7, #2
    1e34:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1e36:	2800      	cmp	r0, #0
    1e38:	d0f3      	beq.n	1e22 <usart_init+0x2ea>
		if (current_pinmux != PINMUX_UNUSED) {
    1e3a:	1c43      	adds	r3, r0, #1
    1e3c:	d0f5      	beq.n	1e2a <usart_init+0x2f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1e3e:	a90e      	add	r1, sp, #56	; 0x38
    1e40:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1e42:	0c00      	lsrs	r0, r0, #16
    1e44:	b2c0      	uxtb	r0, r0
    1e46:	4b1f      	ldr	r3, [pc, #124]	; (1ec4 <usart_init+0x38c>)
    1e48:	4798      	blx	r3
    1e4a:	e7ee      	b.n	1e2a <usart_init+0x2f2>
		module->callback[i]            = NULL;
    1e4c:	2300      	movs	r3, #0
    1e4e:	60eb      	str	r3, [r5, #12]
    1e50:	612b      	str	r3, [r5, #16]
    1e52:	616b      	str	r3, [r5, #20]
    1e54:	61ab      	str	r3, [r5, #24]
    1e56:	61eb      	str	r3, [r5, #28]
    1e58:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1e5a:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1e5c:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1e5e:	2200      	movs	r2, #0
    1e60:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1e62:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1e64:	3330      	adds	r3, #48	; 0x30
    1e66:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1e68:	3301      	adds	r3, #1
    1e6a:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1e6c:	3301      	adds	r3, #1
    1e6e:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1e70:	3301      	adds	r3, #1
    1e72:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1e74:	6828      	ldr	r0, [r5, #0]
    1e76:	4b08      	ldr	r3, [pc, #32]	; (1e98 <usart_init+0x360>)
    1e78:	4798      	blx	r3
    1e7a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1e7c:	4912      	ldr	r1, [pc, #72]	; (1ec8 <usart_init+0x390>)
    1e7e:	4b13      	ldr	r3, [pc, #76]	; (1ecc <usart_init+0x394>)
    1e80:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1e82:	00a4      	lsls	r4, r4, #2
    1e84:	4b12      	ldr	r3, [pc, #72]	; (1ed0 <usart_init+0x398>)
    1e86:	50e5      	str	r5, [r4, r3]
	return status_code;
    1e88:	2000      	movs	r0, #0
    1e8a:	e668      	b.n	1b5e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1e8c:	2310      	movs	r3, #16
    1e8e:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1e90:	2300      	movs	r3, #0
    1e92:	9307      	str	r3, [sp, #28]
    1e94:	e6bf      	b.n	1c16 <usart_init+0xde>
    1e96:	46c0      	nop			; (mov r8, r8)
    1e98:	0000510d 	.word	0x0000510d
    1e9c:	40000800 	.word	0x40000800
    1ea0:	00005fe1 	.word	0x00005fe1
    1ea4:	00005f71 	.word	0x00005f71
    1ea8:	00004fc1 	.word	0x00004fc1
    1eac:	f0ffffff 	.word	0xf0ffffff
    1eb0:	41002000 	.word	0x41002000
    1eb4:	00006005 	.word	0x00006005
    1eb8:	00004f03 	.word	0x00004f03
    1ebc:	00004f2d 	.word	0x00004f2d
    1ec0:	0000500d 	.word	0x0000500d
    1ec4:	000060dd 	.word	0x000060dd
    1ec8:	00001f71 	.word	0x00001f71
    1ecc:	00005159 	.word	0x00005159
    1ed0:	20000b88 	.word	0x20000b88

00001ed4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1ed4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1ed6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1ed8:	2a00      	cmp	r2, #0
    1eda:	d101      	bne.n	1ee0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1edc:	0018      	movs	r0, r3
    1ede:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1ee0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1ee2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1ee4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1ee6:	2a00      	cmp	r2, #0
    1ee8:	d1f8      	bne.n	1edc <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1eea:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1eec:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1eee:	2a00      	cmp	r2, #0
    1ef0:	d1fc      	bne.n	1eec <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1ef2:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1ef4:	2102      	movs	r1, #2
    1ef6:	7e1a      	ldrb	r2, [r3, #24]
    1ef8:	420a      	tst	r2, r1
    1efa:	d0fc      	beq.n	1ef6 <usart_write_wait+0x22>
	return STATUS_OK;
    1efc:	2300      	movs	r3, #0
    1efe:	e7ed      	b.n	1edc <usart_write_wait+0x8>

00001f00 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1f00:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1f02:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1f04:	2a00      	cmp	r2, #0
    1f06:	d101      	bne.n	1f0c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1f08:	0018      	movs	r0, r3
    1f0a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1f0c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1f0e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1f10:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1f12:	2a00      	cmp	r2, #0
    1f14:	d1f8      	bne.n	1f08 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f16:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1f18:	7e10      	ldrb	r0, [r2, #24]
    1f1a:	0740      	lsls	r0, r0, #29
    1f1c:	d5f4      	bpl.n	1f08 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1f1e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1f20:	2b00      	cmp	r3, #0
    1f22:	d1fc      	bne.n	1f1e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1f24:	8b53      	ldrh	r3, [r2, #26]
    1f26:	b2db      	uxtb	r3, r3
	if (error_code) {
    1f28:	0658      	lsls	r0, r3, #25
    1f2a:	d01d      	beq.n	1f68 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1f2c:	0798      	lsls	r0, r3, #30
    1f2e:	d503      	bpl.n	1f38 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1f30:	2302      	movs	r3, #2
    1f32:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1f34:	3318      	adds	r3, #24
    1f36:	e7e7      	b.n	1f08 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1f38:	0758      	lsls	r0, r3, #29
    1f3a:	d503      	bpl.n	1f44 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1f3c:	2304      	movs	r3, #4
    1f3e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1f40:	331a      	adds	r3, #26
    1f42:	e7e1      	b.n	1f08 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1f44:	07d8      	lsls	r0, r3, #31
    1f46:	d503      	bpl.n	1f50 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1f48:	2301      	movs	r3, #1
    1f4a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1f4c:	3312      	adds	r3, #18
    1f4e:	e7db      	b.n	1f08 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1f50:	06d8      	lsls	r0, r3, #27
    1f52:	d503      	bpl.n	1f5c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1f54:	2310      	movs	r3, #16
    1f56:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1f58:	3332      	adds	r3, #50	; 0x32
    1f5a:	e7d5      	b.n	1f08 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1f5c:	069b      	lsls	r3, r3, #26
    1f5e:	d503      	bpl.n	1f68 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1f60:	2320      	movs	r3, #32
    1f62:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1f64:	3321      	adds	r3, #33	; 0x21
    1f66:	e7cf      	b.n	1f08 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1f68:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1f6a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1f6c:	2300      	movs	r3, #0
    1f6e:	e7cb      	b.n	1f08 <usart_read_wait+0x8>

00001f70 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1f72:	0080      	lsls	r0, r0, #2
    1f74:	4b64      	ldr	r3, [pc, #400]	; (2108 <STACK_SIZE+0x108>)
    1f76:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1f78:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1f7a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d1fc      	bne.n	1f7a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1f80:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1f82:	7da6      	ldrb	r6, [r4, #22]
    1f84:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1f86:	2330      	movs	r3, #48	; 0x30
    1f88:	5ceb      	ldrb	r3, [r5, r3]
    1f8a:	2231      	movs	r2, #49	; 0x31
    1f8c:	5caf      	ldrb	r7, [r5, r2]
    1f8e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1f90:	07f3      	lsls	r3, r6, #31
    1f92:	d522      	bpl.n	1fda <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1f94:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1f96:	b29b      	uxth	r3, r3
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d01c      	beq.n	1fd6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1f9c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1f9e:	7813      	ldrb	r3, [r2, #0]
    1fa0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1fa2:	1c51      	adds	r1, r2, #1
    1fa4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1fa6:	7969      	ldrb	r1, [r5, #5]
    1fa8:	2901      	cmp	r1, #1
    1faa:	d00e      	beq.n	1fca <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1fac:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1fae:	05db      	lsls	r3, r3, #23
    1fb0:	0ddb      	lsrs	r3, r3, #23
    1fb2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1fb4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1fb6:	3b01      	subs	r3, #1
    1fb8:	b29b      	uxth	r3, r3
    1fba:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d10c      	bne.n	1fda <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1fc0:	3301      	adds	r3, #1
    1fc2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1fc4:	3301      	adds	r3, #1
    1fc6:	75a3      	strb	r3, [r4, #22]
    1fc8:	e007      	b.n	1fda <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1fca:	7851      	ldrb	r1, [r2, #1]
    1fcc:	0209      	lsls	r1, r1, #8
    1fce:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1fd0:	3202      	adds	r2, #2
    1fd2:	62aa      	str	r2, [r5, #40]	; 0x28
    1fd4:	e7eb      	b.n	1fae <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1fd6:	2301      	movs	r3, #1
    1fd8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1fda:	07b3      	lsls	r3, r6, #30
    1fdc:	d506      	bpl.n	1fec <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1fde:	2302      	movs	r3, #2
    1fe0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1fe2:	2200      	movs	r2, #0
    1fe4:	3331      	adds	r3, #49	; 0x31
    1fe6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1fe8:	07fb      	lsls	r3, r7, #31
    1fea:	d41e      	bmi.n	202a <STACK_SIZE+0x2a>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1fec:	0773      	lsls	r3, r6, #29
    1fee:	d568      	bpl.n	20c2 <STACK_SIZE+0xc2>

		if (module->remaining_rx_buffer_length) {
    1ff0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1ff2:	b29b      	uxth	r3, r3
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d062      	beq.n	20be <STACK_SIZE+0xbe>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1ff8:	8b63      	ldrh	r3, [r4, #26]
    1ffa:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1ffc:	071a      	lsls	r2, r3, #28
    1ffe:	d418      	bmi.n	2032 <STACK_SIZE+0x32>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2000:	227f      	movs	r2, #127	; 0x7f
    2002:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    2004:	065a      	lsls	r2, r3, #25
    2006:	d501      	bpl.n	200c <STACK_SIZE+0xc>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    2008:	2240      	movs	r2, #64	; 0x40
    200a:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    200c:	2b00      	cmp	r3, #0
    200e:	d033      	beq.n	2078 <STACK_SIZE+0x78>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2010:	079a      	lsls	r2, r3, #30
    2012:	d511      	bpl.n	2038 <STACK_SIZE+0x38>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2014:	221a      	movs	r2, #26
    2016:	2332      	movs	r3, #50	; 0x32
    2018:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    201a:	3b30      	subs	r3, #48	; 0x30
    201c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    201e:	077b      	lsls	r3, r7, #29
    2020:	d54f      	bpl.n	20c2 <STACK_SIZE+0xc2>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2022:	0028      	movs	r0, r5
    2024:	696b      	ldr	r3, [r5, #20]
    2026:	4798      	blx	r3
    2028:	e04b      	b.n	20c2 <STACK_SIZE+0xc2>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    202a:	0028      	movs	r0, r5
    202c:	68eb      	ldr	r3, [r5, #12]
    202e:	4798      	blx	r3
    2030:	e7dc      	b.n	1fec <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2032:	2277      	movs	r2, #119	; 0x77
    2034:	4013      	ands	r3, r2
    2036:	e7e5      	b.n	2004 <STACK_SIZE+0x4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2038:	075a      	lsls	r2, r3, #29
    203a:	d505      	bpl.n	2048 <STACK_SIZE+0x48>
					module->rx_status = STATUS_ERR_OVERFLOW;
    203c:	221e      	movs	r2, #30
    203e:	2332      	movs	r3, #50	; 0x32
    2040:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2042:	3b2e      	subs	r3, #46	; 0x2e
    2044:	8363      	strh	r3, [r4, #26]
    2046:	e7ea      	b.n	201e <STACK_SIZE+0x1e>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2048:	07da      	lsls	r2, r3, #31
    204a:	d505      	bpl.n	2058 <STACK_SIZE+0x58>
					module->rx_status = STATUS_ERR_BAD_DATA;
    204c:	2213      	movs	r2, #19
    204e:	2332      	movs	r3, #50	; 0x32
    2050:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2052:	3b31      	subs	r3, #49	; 0x31
    2054:	8363      	strh	r3, [r4, #26]
    2056:	e7e2      	b.n	201e <STACK_SIZE+0x1e>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2058:	06da      	lsls	r2, r3, #27
    205a:	d505      	bpl.n	2068 <STACK_SIZE+0x68>
					module->rx_status = STATUS_ERR_PROTOCOL;
    205c:	2242      	movs	r2, #66	; 0x42
    205e:	2332      	movs	r3, #50	; 0x32
    2060:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2062:	3b22      	subs	r3, #34	; 0x22
    2064:	8363      	strh	r3, [r4, #26]
    2066:	e7da      	b.n	201e <STACK_SIZE+0x1e>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2068:	069b      	lsls	r3, r3, #26
    206a:	d5d8      	bpl.n	201e <STACK_SIZE+0x1e>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    206c:	2241      	movs	r2, #65	; 0x41
    206e:	2332      	movs	r3, #50	; 0x32
    2070:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2072:	3b12      	subs	r3, #18
    2074:	8363      	strh	r3, [r4, #26]
    2076:	e7d2      	b.n	201e <STACK_SIZE+0x1e>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2078:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    207a:	05db      	lsls	r3, r3, #23
    207c:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    207e:	b2da      	uxtb	r2, r3
    2080:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2082:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2084:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2086:	1c51      	adds	r1, r2, #1
    2088:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    208a:	7969      	ldrb	r1, [r5, #5]
    208c:	2901      	cmp	r1, #1
    208e:	d010      	beq.n	20b2 <STACK_SIZE+0xb2>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2090:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2092:	3b01      	subs	r3, #1
    2094:	b29b      	uxth	r3, r3
    2096:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2098:	2b00      	cmp	r3, #0
    209a:	d112      	bne.n	20c2 <STACK_SIZE+0xc2>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    209c:	3304      	adds	r3, #4
    209e:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    20a0:	2200      	movs	r2, #0
    20a2:	332e      	adds	r3, #46	; 0x2e
    20a4:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    20a6:	07bb      	lsls	r3, r7, #30
    20a8:	d50b      	bpl.n	20c2 <STACK_SIZE+0xc2>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    20aa:	0028      	movs	r0, r5
    20ac:	692b      	ldr	r3, [r5, #16]
    20ae:	4798      	blx	r3
    20b0:	e007      	b.n	20c2 <STACK_SIZE+0xc2>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    20b2:	0a1b      	lsrs	r3, r3, #8
    20b4:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    20b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    20b8:	3301      	adds	r3, #1
    20ba:	626b      	str	r3, [r5, #36]	; 0x24
    20bc:	e7e8      	b.n	2090 <STACK_SIZE+0x90>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    20be:	2304      	movs	r3, #4
    20c0:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    20c2:	06f3      	lsls	r3, r6, #27
    20c4:	d504      	bpl.n	20d0 <STACK_SIZE+0xd0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    20c6:	2310      	movs	r3, #16
    20c8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    20ca:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    20cc:	06fb      	lsls	r3, r7, #27
    20ce:	d40e      	bmi.n	20ee <STACK_SIZE+0xee>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    20d0:	06b3      	lsls	r3, r6, #26
    20d2:	d504      	bpl.n	20de <STACK_SIZE+0xde>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    20d4:	2320      	movs	r3, #32
    20d6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    20d8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    20da:	073b      	lsls	r3, r7, #28
    20dc:	d40b      	bmi.n	20f6 <STACK_SIZE+0xf6>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    20de:	0733      	lsls	r3, r6, #28
    20e0:	d504      	bpl.n	20ec <STACK_SIZE+0xec>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    20e2:	2308      	movs	r3, #8
    20e4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    20e6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    20e8:	06bb      	lsls	r3, r7, #26
    20ea:	d408      	bmi.n	20fe <STACK_SIZE+0xfe>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    20ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    20ee:	0028      	movs	r0, r5
    20f0:	69eb      	ldr	r3, [r5, #28]
    20f2:	4798      	blx	r3
    20f4:	e7ec      	b.n	20d0 <STACK_SIZE+0xd0>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    20f6:	0028      	movs	r0, r5
    20f8:	69ab      	ldr	r3, [r5, #24]
    20fa:	4798      	blx	r3
    20fc:	e7ef      	b.n	20de <STACK_SIZE+0xde>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    20fe:	6a2b      	ldr	r3, [r5, #32]
    2100:	0028      	movs	r0, r5
    2102:	4798      	blx	r3
}
    2104:	e7f2      	b.n	20ec <STACK_SIZE+0xec>
    2106:	46c0      	nop			; (mov r8, r8)
    2108:	20000b88 	.word	0x20000b88

0000210c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    210c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    210e:	2301      	movs	r3, #1
    2110:	2801      	cmp	r0, #1
    2112:	d901      	bls.n	2118 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    2114:	0018      	movs	r0, r3
    2116:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    2118:	0140      	lsls	r0, r0, #5
    211a:	4b02      	ldr	r3, [pc, #8]	; (2124 <mem_test_unit_ready+0x18>)
    211c:	58c3      	ldr	r3, [r0, r3]
    211e:	4798      	blx	r3
    2120:	0003      	movs	r3, r0
    2122:	e7f7      	b.n	2114 <mem_test_unit_ready+0x8>
    2124:	000098f4 	.word	0x000098f4

00002128 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    2128:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    212a:	2301      	movs	r3, #1
    212c:	2801      	cmp	r0, #1
    212e:	d901      	bls.n	2134 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    2130:	0018      	movs	r0, r3
    2132:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    2134:	0140      	lsls	r0, r0, #5
    2136:	4b03      	ldr	r3, [pc, #12]	; (2144 <mem_read_capacity+0x1c>)
    2138:	1818      	adds	r0, r3, r0
    213a:	6843      	ldr	r3, [r0, #4]
    213c:	0008      	movs	r0, r1
    213e:	4798      	blx	r3
    2140:	0003      	movs	r3, r0
    2142:	e7f5      	b.n	2130 <mem_read_capacity+0x8>
    2144:	000098f4 	.word	0x000098f4

00002148 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    2148:	2300      	movs	r3, #0
    214a:	2201      	movs	r2, #1
    214c:	4282      	cmp	r2, r0
    214e:	415b      	adcs	r3, r3
    2150:	b2d8      	uxtb	r0, r3
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    2152:	4770      	bx	lr

00002154 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    2154:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    2156:	2301      	movs	r3, #1
    2158:	2801      	cmp	r0, #1
    215a:	d901      	bls.n	2160 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    215c:	0018      	movs	r0, r3
    215e:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    2160:	0140      	lsls	r0, r0, #5
    2162:	4b03      	ldr	r3, [pc, #12]	; (2170 <mem_wr_protect+0x1c>)
    2164:	1818      	adds	r0, r3, r0
    2166:	68c3      	ldr	r3, [r0, #12]
    2168:	4798      	blx	r3
    216a:	0003      	movs	r3, r0
    216c:	e7f6      	b.n	215c <mem_wr_protect+0x8>
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	000098f4 	.word	0x000098f4

00002174 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    2174:	b510      	push	{r4, lr}
    2176:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    2178:	2301      	movs	r3, #1
    217a:	2801      	cmp	r0, #1
    217c:	d901      	bls.n	2182 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    217e:	0018      	movs	r0, r3
    2180:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    2182:	0140      	lsls	r0, r0, #5
    2184:	4b03      	ldr	r3, [pc, #12]	; (2194 <memory_2_ram+0x20>)
    2186:	1818      	adds	r0, r3, r0
    2188:	6943      	ldr	r3, [r0, #20]
    218a:	0011      	movs	r1, r2
    218c:	0020      	movs	r0, r4
    218e:	4798      	blx	r3
    2190:	0003      	movs	r3, r0
    2192:	e7f4      	b.n	217e <memory_2_ram+0xa>
    2194:	000098f4 	.word	0x000098f4

00002198 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    2198:	b510      	push	{r4, lr}
    219a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    219c:	2301      	movs	r3, #1
    219e:	2801      	cmp	r0, #1
    21a0:	d901      	bls.n	21a6 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    21a2:	0018      	movs	r0, r3
    21a4:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    21a6:	0140      	lsls	r0, r0, #5
    21a8:	4b03      	ldr	r3, [pc, #12]	; (21b8 <ram_2_memory+0x20>)
    21aa:	1818      	adds	r0, r3, r0
    21ac:	6983      	ldr	r3, [r0, #24]
    21ae:	0011      	movs	r1, r2
    21b0:	0020      	movs	r0, r4
    21b2:	4798      	blx	r3
    21b4:	0003      	movs	r3, r0
    21b6:	e7f4      	b.n	21a2 <ram_2_memory+0xa>
    21b8:	000098f4 	.word	0x000098f4

000021bc <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    21bc:	b510      	push	{r4, lr}
    21be:	0004      	movs	r4, r0
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    21c0:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    21c2:	2c02      	cmp	r4, #2
    21c4:	d80c      	bhi.n	21e0 <disk_initialize+0x24>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
    21c6:	0020      	movs	r0, r4
    21c8:	4b0b      	ldr	r3, [pc, #44]	; (21f8 <disk_initialize+0x3c>)
    21ca:	4798      	blx	r3
    21cc:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    21ce:	2803      	cmp	r0, #3
    21d0:	d107      	bne.n	21e2 <disk_initialize+0x26>
		mem_status = mem_test_unit_ready(drv);
    21d2:	0020      	movs	r0, r4
    21d4:	4b08      	ldr	r3, [pc, #32]	; (21f8 <disk_initialize+0x3c>)
    21d6:	4798      	blx	r3
    21d8:	0003      	movs	r3, r0
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
    21da:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    21dc:	2b03      	cmp	r3, #3
    21de:	d100      	bne.n	21e2 <disk_initialize+0x26>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    21e0:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
    21e2:	2b00      	cmp	r3, #0
    21e4:	d106      	bne.n	21f4 <disk_initialize+0x38>
	if (mem_wr_protect(drv)) {
    21e6:	0020      	movs	r0, r4
    21e8:	4b04      	ldr	r3, [pc, #16]	; (21fc <disk_initialize+0x40>)
    21ea:	4798      	blx	r3
	return 0;
    21ec:	1e43      	subs	r3, r0, #1
    21ee:	4198      	sbcs	r0, r3
    21f0:	0080      	lsls	r0, r0, #2
    21f2:	e7f5      	b.n	21e0 <disk_initialize+0x24>
		return STA_NOINIT;
    21f4:	2001      	movs	r0, #1
    21f6:	e7f3      	b.n	21e0 <disk_initialize+0x24>
    21f8:	0000210d 	.word	0x0000210d
    21fc:	00002155 	.word	0x00002155

00002200 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    2200:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    2202:	4b05      	ldr	r3, [pc, #20]	; (2218 <disk_status+0x18>)
    2204:	4798      	blx	r3
    2206:	1e03      	subs	r3, r0, #0
    2208:	d004      	beq.n	2214 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    220a:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    220c:	2b02      	cmp	r3, #2
    220e:	d000      	beq.n	2212 <disk_status+0x12>
	default:
		return STA_NOINIT;
    2210:	3802      	subs	r0, #2
	}
}
    2212:	bd10      	pop	{r4, pc}
		return 0;
    2214:	2000      	movs	r0, #0
    2216:	e7fc      	b.n	2212 <disk_status+0x12>
    2218:	0000210d 	.word	0x0000210d

0000221c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    221c:	b5f0      	push	{r4, r5, r6, r7, lr}
    221e:	46de      	mov	lr, fp
    2220:	464f      	mov	r7, r9
    2222:	4646      	mov	r6, r8
    2224:	b5c0      	push	{r6, r7, lr}
    2226:	b084      	sub	sp, #16
    2228:	9001      	str	r0, [sp, #4]
    222a:	000d      	movs	r5, r1
    222c:	0014      	movs	r4, r2
    222e:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    2230:	4b18      	ldr	r3, [pc, #96]	; (2294 <disk_read+0x78>)
    2232:	4798      	blx	r3
    2234:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    2236:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    2238:	2e00      	cmp	r6, #0
    223a:	d105      	bne.n	2248 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    223c:	b004      	add	sp, #16
    223e:	bc1c      	pop	{r2, r3, r4}
    2240:	4690      	mov	r8, r2
    2242:	4699      	mov	r9, r3
    2244:	46a3      	mov	fp, r4
    2246:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    2248:	a903      	add	r1, sp, #12
    224a:	9801      	ldr	r0, [sp, #4]
    224c:	4b12      	ldr	r3, [pc, #72]	; (2298 <disk_read+0x7c>)
    224e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    2250:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    2252:	0032      	movs	r2, r6
    2254:	437a      	muls	r2, r7
    2256:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    2258:	9b03      	ldr	r3, [sp, #12]
    225a:	3301      	adds	r3, #1
    225c:	4373      	muls	r3, r6
		return RES_PARERR;
    225e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    2260:	429a      	cmp	r2, r3
    2262:	d8eb      	bhi.n	223c <disk_read+0x20>
	for (i = 0; i < count; i++) {
    2264:	2f00      	cmp	r7, #0
    2266:	d011      	beq.n	228c <disk_read+0x70>
    2268:	0273      	lsls	r3, r6, #9
    226a:	4698      	mov	r8, r3
    226c:	1c7b      	adds	r3, r7, #1
    226e:	469b      	mov	fp, r3
    2270:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    2272:	4e0a      	ldr	r6, [pc, #40]	; (229c <disk_read+0x80>)
    2274:	002a      	movs	r2, r5
    2276:	0021      	movs	r1, r4
    2278:	9801      	ldr	r0, [sp, #4]
    227a:	47b0      	blx	r6
    227c:	2800      	cmp	r0, #0
    227e:	d107      	bne.n	2290 <disk_read+0x74>
    2280:	3701      	adds	r7, #1
    2282:	444c      	add	r4, r9
    2284:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    2286:	455f      	cmp	r7, fp
    2288:	d1f4      	bne.n	2274 <disk_read+0x58>
    228a:	e7d7      	b.n	223c <disk_read+0x20>
	return RES_OK;
    228c:	2000      	movs	r0, #0
    228e:	e7d5      	b.n	223c <disk_read+0x20>
			return RES_ERROR;
    2290:	2001      	movs	r0, #1
    2292:	e7d3      	b.n	223c <disk_read+0x20>
    2294:	00002149 	.word	0x00002149
    2298:	00002129 	.word	0x00002129
    229c:	00002175 	.word	0x00002175

000022a0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    22a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22a2:	46de      	mov	lr, fp
    22a4:	464f      	mov	r7, r9
    22a6:	4646      	mov	r6, r8
    22a8:	b5c0      	push	{r6, r7, lr}
    22aa:	b084      	sub	sp, #16
    22ac:	9001      	str	r0, [sp, #4]
    22ae:	000d      	movs	r5, r1
    22b0:	0014      	movs	r4, r2
    22b2:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    22b4:	4b18      	ldr	r3, [pc, #96]	; (2318 <disk_write+0x78>)
    22b6:	4798      	blx	r3
    22b8:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    22ba:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    22bc:	2e00      	cmp	r6, #0
    22be:	d105      	bne.n	22cc <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    22c0:	b004      	add	sp, #16
    22c2:	bc1c      	pop	{r2, r3, r4}
    22c4:	4690      	mov	r8, r2
    22c6:	4699      	mov	r9, r3
    22c8:	46a3      	mov	fp, r4
    22ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    22cc:	a903      	add	r1, sp, #12
    22ce:	9801      	ldr	r0, [sp, #4]
    22d0:	4b12      	ldr	r3, [pc, #72]	; (231c <disk_write+0x7c>)
    22d2:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    22d4:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    22d6:	0032      	movs	r2, r6
    22d8:	437a      	muls	r2, r7
    22da:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    22dc:	9b03      	ldr	r3, [sp, #12]
    22de:	3301      	adds	r3, #1
    22e0:	4373      	muls	r3, r6
		return RES_PARERR;
    22e2:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    22e4:	429a      	cmp	r2, r3
    22e6:	d8eb      	bhi.n	22c0 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    22e8:	2f00      	cmp	r7, #0
    22ea:	d011      	beq.n	2310 <disk_write+0x70>
    22ec:	0273      	lsls	r3, r6, #9
    22ee:	4698      	mov	r8, r3
    22f0:	1c7b      	adds	r3, r7, #1
    22f2:	469b      	mov	fp, r3
    22f4:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    22f6:	4e0a      	ldr	r6, [pc, #40]	; (2320 <disk_write+0x80>)
    22f8:	002a      	movs	r2, r5
    22fa:	0021      	movs	r1, r4
    22fc:	9801      	ldr	r0, [sp, #4]
    22fe:	47b0      	blx	r6
    2300:	2800      	cmp	r0, #0
    2302:	d107      	bne.n	2314 <disk_write+0x74>
    2304:	3701      	adds	r7, #1
    2306:	444c      	add	r4, r9
    2308:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    230a:	455f      	cmp	r7, fp
    230c:	d1f4      	bne.n	22f8 <disk_write+0x58>
    230e:	e7d7      	b.n	22c0 <disk_write+0x20>
	return RES_OK;
    2310:	2000      	movs	r0, #0
    2312:	e7d5      	b.n	22c0 <disk_write+0x20>
			return RES_ERROR;
    2314:	2001      	movs	r0, #1
    2316:	e7d3      	b.n	22c0 <disk_write+0x20>
    2318:	00002149 	.word	0x00002149
    231c:	00002129 	.word	0x00002129
    2320:	00002199 	.word	0x00002199

00002324 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    2324:	b510      	push	{r4, lr}
    2326:	b082      	sub	sp, #8
    2328:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    232a:	2901      	cmp	r1, #1
    232c:	d00b      	beq.n	2346 <disk_ioctl+0x22>
    232e:	2900      	cmp	r1, #0
    2330:	d020      	beq.n	2374 <disk_ioctl+0x50>
    2332:	2902      	cmp	r1, #2
    2334:	d00f      	beq.n	2356 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    2336:	2004      	movs	r0, #4
	switch (ctrl) {
    2338:	2903      	cmp	r1, #3
    233a:	d102      	bne.n	2342 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    233c:	2301      	movs	r3, #1
    233e:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    2340:	2000      	movs	r0, #0
	}

	return res;
}
    2342:	b002      	add	sp, #8
    2344:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    2346:	a901      	add	r1, sp, #4
    2348:	4b0e      	ldr	r3, [pc, #56]	; (2384 <disk_ioctl+0x60>)
    234a:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    234c:	9b01      	ldr	r3, [sp, #4]
    234e:	3301      	adds	r3, #1
    2350:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    2352:	2000      	movs	r0, #0
	break;
    2354:	e7f5      	b.n	2342 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    2356:	4b0c      	ldr	r3, [pc, #48]	; (2388 <disk_ioctl+0x64>)
    2358:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    235a:	1e43      	subs	r3, r0, #1
    235c:	b2db      	uxtb	r3, r3
    235e:	2b01      	cmp	r3, #1
    2360:	d904      	bls.n	236c <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    2362:	1f03      	subs	r3, r0, #4
    2364:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    2366:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    2368:	4213      	tst	r3, r2
    236a:	d1ea      	bne.n	2342 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    236c:	2300      	movs	r3, #0
    236e:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    2370:	2000      	movs	r0, #0
	break;
    2372:	e7e6      	b.n	2342 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    2374:	4b05      	ldr	r3, [pc, #20]	; (238c <disk_ioctl+0x68>)
    2376:	4798      	blx	r3
    2378:	2800      	cmp	r0, #0
    237a:	d001      	beq.n	2380 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    237c:	2003      	movs	r0, #3
    237e:	e7e0      	b.n	2342 <disk_ioctl+0x1e>
			res = RES_OK;
    2380:	2000      	movs	r0, #0
    2382:	e7de      	b.n	2342 <disk_ioctl+0x1e>
    2384:	00002129 	.word	0x00002129
    2388:	00002149 	.word	0x00002149
    238c:	0000210d 	.word	0x0000210d

00002390 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    2390:	b500      	push	{lr}
    2392:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    2394:	4669      	mov	r1, sp
    2396:	480f      	ldr	r0, [pc, #60]	; (23d4 <get_fattime+0x44>)
    2398:	4b0f      	ldr	r3, [pc, #60]	; (23d8 <get_fattime+0x48>)
    239a:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    239c:	466b      	mov	r3, sp
    239e:	7958      	ldrb	r0, [r3, #5]
    23a0:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    23a2:	791b      	ldrb	r3, [r3, #4]
    23a4:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    23a6:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    23a8:	466b      	mov	r3, sp
    23aa:	789b      	ldrb	r3, [r3, #2]
    23ac:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    23ae:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    23b0:	466b      	mov	r3, sp
    23b2:	785b      	ldrb	r3, [r3, #1]
    23b4:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    23b6:	4318      	orrs	r0, r3
    23b8:	466b      	mov	r3, sp
    23ba:	781b      	ldrb	r3, [r3, #0]
    23bc:	085b      	lsrs	r3, r3, #1
    23be:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    23c0:	466b      	mov	r3, sp
    23c2:	88db      	ldrh	r3, [r3, #6]
    23c4:	4a05      	ldr	r2, [pc, #20]	; (23dc <get_fattime+0x4c>)
    23c6:	4694      	mov	ip, r2
    23c8:	4463      	add	r3, ip
    23ca:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    23cc:	4318      	orrs	r0, r3

	return ul_time;
}
    23ce:	b003      	add	sp, #12
    23d0:	bd00      	pop	{pc}
    23d2:	46c0      	nop			; (mov r8, r8)
    23d4:	20000b74 	.word	0x20000b74
    23d8:	00004455 	.word	0x00004455
    23dc:	fffff844 	.word	0xfffff844

000023e0 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    23e0:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    23e2:	287f      	cmp	r0, #127	; 0x7f
    23e4:	d911      	bls.n	240a <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    23e6:	2900      	cmp	r1, #0
    23e8:	d111      	bne.n	240e <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    23ea:	28c7      	cmp	r0, #199	; 0xc7
    23ec:	d017      	beq.n	241e <ff_convert+0x3e>
    23ee:	4a0d      	ldr	r2, [pc, #52]	; (2424 <ff_convert+0x44>)
    23f0:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    23f2:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    23f4:	8811      	ldrh	r1, [r2, #0]
    23f6:	4281      	cmp	r1, r0
    23f8:	d004      	beq.n	2404 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    23fa:	3301      	adds	r3, #1
    23fc:	b29b      	uxth	r3, r3
    23fe:	3202      	adds	r2, #2
    2400:	2b80      	cmp	r3, #128	; 0x80
    2402:	d1f7      	bne.n	23f4 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    2404:	3380      	adds	r3, #128	; 0x80
    2406:	20ff      	movs	r0, #255	; 0xff
    2408:	4003      	ands	r3, r0
		}
	}

	return c;
}
    240a:	0018      	movs	r0, r3
    240c:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    240e:	2300      	movs	r3, #0
    2410:	28ff      	cmp	r0, #255	; 0xff
    2412:	d8fa      	bhi.n	240a <ff_convert+0x2a>
    2414:	3880      	subs	r0, #128	; 0x80
    2416:	0040      	lsls	r0, r0, #1
    2418:	4b02      	ldr	r3, [pc, #8]	; (2424 <ff_convert+0x44>)
    241a:	5ac3      	ldrh	r3, [r0, r3]
    241c:	e7f5      	b.n	240a <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    241e:	2300      	movs	r3, #0
    2420:	e7f0      	b.n	2404 <ff_convert+0x24>
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	00009964 	.word	0x00009964

00002428 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    2428:	2861      	cmp	r0, #97	; 0x61
    242a:	d014      	beq.n	2456 <ff_wtoupper+0x2e>
    242c:	4b0b      	ldr	r3, [pc, #44]	; (245c <ff_wtoupper+0x34>)
    242e:	3304      	adds	r3, #4
    2430:	2101      	movs	r1, #1
    2432:	2262      	movs	r2, #98	; 0x62
    2434:	4290      	cmp	r0, r2
    2436:	d007      	beq.n	2448 <ff_wtoupper+0x20>
    2438:	3101      	adds	r1, #1
    243a:	3302      	adds	r3, #2
    243c:	1e9a      	subs	r2, r3, #2
    243e:	8812      	ldrh	r2, [r2, #0]
    2440:	2a00      	cmp	r2, #0
    2442:	d1f7      	bne.n	2434 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    2444:	0003      	movs	r3, r0
    2446:	e004      	b.n	2452 <ff_wtoupper+0x2a>
    2448:	1e03      	subs	r3, r0, #0
    244a:	d002      	beq.n	2452 <ff_wtoupper+0x2a>
    244c:	0049      	lsls	r1, r1, #1
    244e:	4b04      	ldr	r3, [pc, #16]	; (2460 <ff_wtoupper+0x38>)
    2450:	5acb      	ldrh	r3, [r1, r3]
}
    2452:	0018      	movs	r0, r3
    2454:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    2456:	2100      	movs	r1, #0
    2458:	e7f8      	b.n	244c <ff_wtoupper+0x24>
    245a:	46c0      	nop			; (mov r8, r8)
    245c:	00009a64 	.word	0x00009a64
    2460:	00009c44 	.word	0x00009c44

00002464 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    2464:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    2466:	2a00      	cmp	r2, #0
    2468:	d005      	beq.n	2476 <mem_cpy+0x12>
    246a:	2300      	movs	r3, #0
		*d++ = *s++;
    246c:	5ccc      	ldrb	r4, [r1, r3]
    246e:	54c4      	strb	r4, [r0, r3]
    2470:	3301      	adds	r3, #1
	while (cnt--)
    2472:	4293      	cmp	r3, r2
    2474:	d1fa      	bne.n	246c <mem_cpy+0x8>
}
    2476:	bd10      	pop	{r4, pc}

00002478 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    2478:	0002      	movs	r2, r0
	clst -= 2;
    247a:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    247c:	6983      	ldr	r3, [r0, #24]
    247e:	3b02      	subs	r3, #2
    2480:	2000      	movs	r0, #0
    2482:	4299      	cmp	r1, r3
    2484:	d203      	bcs.n	248e <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    2486:	7890      	ldrb	r0, [r2, #2]
    2488:	4341      	muls	r1, r0
    248a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    248c:	1808      	adds	r0, r1, r0
}
    248e:	4770      	bx	lr

00002490 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    2490:	0002      	movs	r2, r0
    2492:	0001      	movs	r1, r0
    2494:	310b      	adds	r1, #11
	BYTE sum = 0;
    2496:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    2498:	0843      	lsrs	r3, r0, #1
    249a:	01c0      	lsls	r0, r0, #7
    249c:	4303      	orrs	r3, r0
    249e:	7810      	ldrb	r0, [r2, #0]
    24a0:	1818      	adds	r0, r3, r0
    24a2:	b2c0      	uxtb	r0, r0
    24a4:	3201      	adds	r2, #1
    24a6:	428a      	cmp	r2, r1
    24a8:	d1f6      	bne.n	2498 <sum_sfn+0x8>
	return sum;
}
    24aa:	4770      	bx	lr

000024ac <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    24ac:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    24ae:	2800      	cmp	r0, #0
    24b0:	d010      	beq.n	24d4 <validate+0x28>
    24b2:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    24b4:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    24b6:	2a00      	cmp	r2, #0
    24b8:	d101      	bne.n	24be <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    24ba:	0018      	movs	r0, r3
    24bc:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    24be:	88c2      	ldrh	r2, [r0, #6]
    24c0:	428a      	cmp	r2, r1
    24c2:	d1fa      	bne.n	24ba <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    24c4:	7840      	ldrb	r0, [r0, #1]
    24c6:	4b04      	ldr	r3, [pc, #16]	; (24d8 <validate+0x2c>)
    24c8:	4798      	blx	r3
		return FR_NOT_READY;
    24ca:	2303      	movs	r3, #3
	return FR_OK;
    24cc:	07c0      	lsls	r0, r0, #31
    24ce:	17c0      	asrs	r0, r0, #31
    24d0:	4003      	ands	r3, r0
    24d2:	e7f2      	b.n	24ba <validate+0xe>
		return FR_INVALID_OBJECT;
    24d4:	2309      	movs	r3, #9
    24d6:	e7f0      	b.n	24ba <validate+0xe>
    24d8:	00002201 	.word	0x00002201

000024dc <check_fs>:
{
    24dc:	b570      	push	{r4, r5, r6, lr}
    24de:	0004      	movs	r4, r0
    24e0:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    24e2:	0001      	movs	r1, r0
    24e4:	3130      	adds	r1, #48	; 0x30
    24e6:	7840      	ldrb	r0, [r0, #1]
    24e8:	2301      	movs	r3, #1
    24ea:	4d1f      	ldr	r5, [pc, #124]	; (2568 <check_fs+0x8c>)
    24ec:	47a8      	blx	r5
		return 3;
    24ee:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    24f0:	2800      	cmp	r0, #0
    24f2:	d001      	beq.n	24f8 <check_fs+0x1c>
}
    24f4:	0018      	movs	r0, r3
    24f6:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    24f8:	4b1c      	ldr	r3, [pc, #112]	; (256c <check_fs+0x90>)
    24fa:	5ce3      	ldrb	r3, [r4, r3]
    24fc:	021b      	lsls	r3, r3, #8
    24fe:	4a1c      	ldr	r2, [pc, #112]	; (2570 <check_fs+0x94>)
    2500:	5ca2      	ldrb	r2, [r4, r2]
    2502:	431a      	orrs	r2, r3
    2504:	491b      	ldr	r1, [pc, #108]	; (2574 <check_fs+0x98>)
    2506:	b212      	sxth	r2, r2
		return 2;
    2508:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    250a:	428a      	cmp	r2, r1
    250c:	d1f2      	bne.n	24f4 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    250e:	3367      	adds	r3, #103	; 0x67
    2510:	5ce3      	ldrb	r3, [r4, r3]
    2512:	061b      	lsls	r3, r3, #24
    2514:	2268      	movs	r2, #104	; 0x68
    2516:	5ca2      	ldrb	r2, [r4, r2]
    2518:	0412      	lsls	r2, r2, #16
    251a:	4313      	orrs	r3, r2
    251c:	2266      	movs	r2, #102	; 0x66
    251e:	5ca2      	ldrb	r2, [r4, r2]
    2520:	4313      	orrs	r3, r2
    2522:	2267      	movs	r2, #103	; 0x67
    2524:	5ca2      	ldrb	r2, [r4, r2]
    2526:	0212      	lsls	r2, r2, #8
    2528:	4313      	orrs	r3, r2
    252a:	021b      	lsls	r3, r3, #8
    252c:	0a1b      	lsrs	r3, r3, #8
    252e:	4a12      	ldr	r2, [pc, #72]	; (2578 <check_fs+0x9c>)
    2530:	4293      	cmp	r3, r2
    2532:	d016      	beq.n	2562 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    2534:	2385      	movs	r3, #133	; 0x85
    2536:	5ce3      	ldrb	r3, [r4, r3]
    2538:	061b      	lsls	r3, r3, #24
    253a:	2284      	movs	r2, #132	; 0x84
    253c:	5ca2      	ldrb	r2, [r4, r2]
    253e:	0412      	lsls	r2, r2, #16
    2540:	4313      	orrs	r3, r2
    2542:	2282      	movs	r2, #130	; 0x82
    2544:	5ca2      	ldrb	r2, [r4, r2]
    2546:	4313      	orrs	r3, r2
    2548:	2283      	movs	r2, #131	; 0x83
    254a:	5ca2      	ldrb	r2, [r4, r2]
    254c:	0212      	lsls	r2, r2, #8
    254e:	4313      	orrs	r3, r2
    2550:	021b      	lsls	r3, r3, #8
    2552:	0a1b      	lsrs	r3, r3, #8
    2554:	4a09      	ldr	r2, [pc, #36]	; (257c <check_fs+0xa0>)
    2556:	4694      	mov	ip, r2
    2558:	4463      	add	r3, ip
    255a:	1e58      	subs	r0, r3, #1
    255c:	4183      	sbcs	r3, r0
		return 3;
    255e:	b2db      	uxtb	r3, r3
    2560:	e7c8      	b.n	24f4 <check_fs+0x18>
		return 0;
    2562:	2300      	movs	r3, #0
    2564:	e7c6      	b.n	24f4 <check_fs+0x18>
    2566:	46c0      	nop			; (mov r8, r8)
    2568:	0000221d 	.word	0x0000221d
    256c:	0000022f 	.word	0x0000022f
    2570:	0000022e 	.word	0x0000022e
    2574:	ffffaa55 	.word	0xffffaa55
    2578:	00544146 	.word	0x00544146
    257c:	ffabbeba 	.word	0xffabbeba

00002580 <chk_mounted>:
{
    2580:	b5f0      	push	{r4, r5, r6, r7, lr}
    2582:	46d6      	mov	lr, sl
    2584:	464f      	mov	r7, r9
    2586:	4646      	mov	r6, r8
    2588:	b5c0      	push	{r6, r7, lr}
    258a:	0014      	movs	r4, r2
	const TCHAR *p = *path;
    258c:	6802      	ldr	r2, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    258e:	7813      	ldrb	r3, [r2, #0]
    2590:	3b30      	subs	r3, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    2592:	2b09      	cmp	r3, #9
    2594:	d802      	bhi.n	259c <chk_mounted+0x1c>
    2596:	7855      	ldrb	r5, [r2, #1]
    2598:	2d3a      	cmp	r5, #58	; 0x3a
    259a:	d016      	beq.n	25ca <chk_mounted+0x4a>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    259c:	4bca      	ldr	r3, [pc, #808]	; (28c8 <chk_mounted+0x348>)
    259e:	681d      	ldr	r5, [r3, #0]
    25a0:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    25a2:	2d00      	cmp	r5, #0
    25a4:	d100      	bne.n	25a8 <chk_mounted+0x28>
    25a6:	e0f1      	b.n	278c <chk_mounted+0x20c>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    25a8:	782b      	ldrb	r3, [r5, #0]
    25aa:	2b00      	cmp	r3, #0
    25ac:	d017      	beq.n	25de <chk_mounted+0x5e>
		stat = disk_status(fs->drv);
    25ae:	7868      	ldrb	r0, [r5, #1]
    25b0:	4bc6      	ldr	r3, [pc, #792]	; (28cc <chk_mounted+0x34c>)
    25b2:	4798      	blx	r3
    25b4:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    25b6:	07c2      	lsls	r2, r0, #31
    25b8:	d411      	bmi.n	25de <chk_mounted+0x5e>
			return FR_OK;				/* The file system object is valid */
    25ba:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    25bc:	2c00      	cmp	r4, #0
    25be:	d009      	beq.n	25d4 <chk_mounted+0x54>
    25c0:	075b      	lsls	r3, r3, #29
    25c2:	d400      	bmi.n	25c6 <chk_mounted+0x46>
    25c4:	e0e4      	b.n	2790 <chk_mounted+0x210>
				return FR_WRITE_PROTECTED;
    25c6:	300a      	adds	r0, #10
    25c8:	e004      	b.n	25d4 <chk_mounted+0x54>
		p += 2; *path = p;				/* Return pointer to the path name */
    25ca:	3202      	adds	r2, #2
    25cc:	6002      	str	r2, [r0, #0]
		return FR_INVALID_DRIVE;
    25ce:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    25d0:	2b00      	cmp	r3, #0
    25d2:	d0e3      	beq.n	259c <chk_mounted+0x1c>
}
    25d4:	bc1c      	pop	{r2, r3, r4}
    25d6:	4690      	mov	r8, r2
    25d8:	4699      	mov	r9, r3
    25da:	46a2      	mov	sl, r4
    25dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
    25de:	2300      	movs	r3, #0
    25e0:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    25e2:	706b      	strb	r3, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    25e4:	2000      	movs	r0, #0
    25e6:	4bba      	ldr	r3, [pc, #744]	; (28d0 <chk_mounted+0x350>)
    25e8:	4798      	blx	r3
    25ea:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    25ec:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    25ee:	07da      	lsls	r2, r3, #31
    25f0:	d4f0      	bmi.n	25d4 <chk_mounted+0x54>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    25f2:	2c00      	cmp	r4, #0
    25f4:	d002      	beq.n	25fc <chk_mounted+0x7c>
		return FR_WRITE_PROTECTED;
    25f6:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    25f8:	075b      	lsls	r3, r3, #29
    25fa:	d4eb      	bmi.n	25d4 <chk_mounted+0x54>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    25fc:	2100      	movs	r1, #0
    25fe:	0028      	movs	r0, r5
    2600:	4bb4      	ldr	r3, [pc, #720]	; (28d4 <chk_mounted+0x354>)
    2602:	4798      	blx	r3
    2604:	0003      	movs	r3, r0
    2606:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    2608:	2801      	cmp	r0, #1
    260a:	d100      	bne.n	260e <chk_mounted+0x8e>
    260c:	e099      	b.n	2742 <chk_mounted+0x1c2>
	if (fmt == 3) return FR_DISK_ERR;
    260e:	2b03      	cmp	r3, #3
    2610:	d100      	bne.n	2614 <chk_mounted+0x94>
    2612:	e0bf      	b.n	2794 <chk_mounted+0x214>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    2614:	200d      	movs	r0, #13
    2616:	2b00      	cmp	r3, #0
    2618:	d1dc      	bne.n	25d4 <chk_mounted+0x54>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    261a:	333c      	adds	r3, #60	; 0x3c
    261c:	5cea      	ldrb	r2, [r5, r3]
    261e:	0212      	lsls	r2, r2, #8
    2620:	3b01      	subs	r3, #1
    2622:	5ceb      	ldrb	r3, [r5, r3]
    2624:	4313      	orrs	r3, r2
    2626:	2280      	movs	r2, #128	; 0x80
    2628:	0092      	lsls	r2, r2, #2
    262a:	b21b      	sxth	r3, r3
    262c:	4293      	cmp	r3, r2
    262e:	d1d1      	bne.n	25d4 <chk_mounted+0x54>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2630:	2347      	movs	r3, #71	; 0x47
    2632:	5ceb      	ldrb	r3, [r5, r3]
    2634:	021b      	lsls	r3, r3, #8
    2636:	3abb      	subs	r2, #187	; 0xbb
    2638:	3aff      	subs	r2, #255	; 0xff
    263a:	5cae      	ldrb	r6, [r5, r2]
    263c:	431e      	orrs	r6, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    263e:	d10d      	bne.n	265c <chk_mounted+0xdc>
    2640:	2357      	movs	r3, #87	; 0x57
    2642:	5cee      	ldrb	r6, [r5, r3]
    2644:	0636      	lsls	r6, r6, #24
    2646:	3b01      	subs	r3, #1
    2648:	5ceb      	ldrb	r3, [r5, r3]
    264a:	041b      	lsls	r3, r3, #16
    264c:	431e      	orrs	r6, r3
    264e:	2354      	movs	r3, #84	; 0x54
    2650:	5ceb      	ldrb	r3, [r5, r3]
    2652:	431e      	orrs	r6, r3
    2654:	2355      	movs	r3, #85	; 0x55
    2656:	5ceb      	ldrb	r3, [r5, r3]
    2658:	021b      	lsls	r3, r3, #8
    265a:	431e      	orrs	r6, r3
	fs->fsize = fasize;
    265c:	61ee      	str	r6, [r5, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    265e:	2340      	movs	r3, #64	; 0x40
    2660:	5cea      	ldrb	r2, [r5, r3]
    2662:	70ea      	strb	r2, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    2664:	1e53      	subs	r3, r2, #1
    2666:	200d      	movs	r0, #13
    2668:	2b01      	cmp	r3, #1
    266a:	d8b3      	bhi.n	25d4 <chk_mounted+0x54>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    266c:	233d      	movs	r3, #61	; 0x3d
    266e:	5ce9      	ldrb	r1, [r5, r3]
    2670:	70a9      	strb	r1, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    2672:	2900      	cmp	r1, #0
    2674:	d0ae      	beq.n	25d4 <chk_mounted+0x54>
    2676:	1e4b      	subs	r3, r1, #1
    2678:	4219      	tst	r1, r3
    267a:	d1ab      	bne.n	25d4 <chk_mounted+0x54>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    267c:	2342      	movs	r3, #66	; 0x42
    267e:	5ceb      	ldrb	r3, [r5, r3]
    2680:	021b      	lsls	r3, r3, #8
    2682:	3034      	adds	r0, #52	; 0x34
    2684:	5c28      	ldrb	r0, [r5, r0]
    2686:	4318      	orrs	r0, r3
    2688:	4680      	mov	r8, r0
    268a:	8128      	strh	r0, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    268c:	200d      	movs	r0, #13
    268e:	4643      	mov	r3, r8
    2690:	071b      	lsls	r3, r3, #28
    2692:	d19f      	bne.n	25d4 <chk_mounted+0x54>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2694:	2344      	movs	r3, #68	; 0x44
    2696:	5ceb      	ldrb	r3, [r5, r3]
    2698:	021b      	lsls	r3, r3, #8
    269a:	3036      	adds	r0, #54	; 0x36
    269c:	5c28      	ldrb	r0, [r5, r0]
    269e:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    26a0:	d10d      	bne.n	26be <chk_mounted+0x13e>
    26a2:	3353      	adds	r3, #83	; 0x53
    26a4:	5ceb      	ldrb	r3, [r5, r3]
    26a6:	061b      	lsls	r3, r3, #24
    26a8:	2052      	movs	r0, #82	; 0x52
    26aa:	5c28      	ldrb	r0, [r5, r0]
    26ac:	0400      	lsls	r0, r0, #16
    26ae:	4303      	orrs	r3, r0
    26b0:	2050      	movs	r0, #80	; 0x50
    26b2:	5c28      	ldrb	r0, [r5, r0]
    26b4:	4303      	orrs	r3, r0
    26b6:	2051      	movs	r0, #81	; 0x51
    26b8:	5c28      	ldrb	r0, [r5, r0]
    26ba:	0200      	lsls	r0, r0, #8
    26bc:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    26be:	203f      	movs	r0, #63	; 0x3f
    26c0:	5c28      	ldrb	r0, [r5, r0]
    26c2:	0200      	lsls	r0, r0, #8
    26c4:	273e      	movs	r7, #62	; 0x3e
    26c6:	5def      	ldrb	r7, [r5, r7]
    26c8:	4307      	orrs	r7, r0
    26ca:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    26cc:	200d      	movs	r0, #13
    26ce:	2f00      	cmp	r7, #0
    26d0:	d100      	bne.n	26d4 <chk_mounted+0x154>
    26d2:	e77f      	b.n	25d4 <chk_mounted+0x54>
	fasize *= b;										/* Number of sectors for FAT area */
    26d4:	4372      	muls	r2, r6
    26d6:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    26d8:	4642      	mov	r2, r8
    26da:	0917      	lsrs	r7, r2, #4
    26dc:	4457      	add	r7, sl
    26de:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    26e0:	42bb      	cmp	r3, r7
    26e2:	d200      	bcs.n	26e6 <chk_mounted+0x166>
    26e4:	e776      	b.n	25d4 <chk_mounted+0x54>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    26e6:	1bd8      	subs	r0, r3, r7
    26e8:	4b7b      	ldr	r3, [pc, #492]	; (28d8 <chk_mounted+0x358>)
    26ea:	4798      	blx	r3
    26ec:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    26ee:	200d      	movs	r0, #13
    26f0:	2b00      	cmp	r3, #0
    26f2:	d100      	bne.n	26f6 <chk_mounted+0x176>
    26f4:	e76e      	b.n	25d4 <chk_mounted+0x54>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    26f6:	4a79      	ldr	r2, [pc, #484]	; (28dc <chk_mounted+0x35c>)
	fmt = FS_FAT12;
    26f8:	429a      	cmp	r2, r3
    26fa:	4192      	sbcs	r2, r2
    26fc:	4252      	negs	r2, r2
    26fe:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2700:	4977      	ldr	r1, [pc, #476]	; (28e0 <chk_mounted+0x360>)
    2702:	428b      	cmp	r3, r1
    2704:	d848      	bhi.n	2798 <chk_mounted+0x218>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    2706:	3302      	adds	r3, #2
    2708:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    270a:	19e7      	adds	r7, r4, r7
    270c:	62af      	str	r7, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    270e:	4454      	add	r4, sl
    2710:	622c      	str	r4, [r5, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    2712:	200d      	movs	r0, #13
    2714:	4641      	mov	r1, r8
    2716:	2900      	cmp	r1, #0
    2718:	d100      	bne.n	271c <chk_mounted+0x19c>
    271a:	e75b      	b.n	25d4 <chk_mounted+0x54>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    271c:	444c      	add	r4, r9
    271e:	626c      	str	r4, [r5, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    2720:	2a02      	cmp	r2, #2
    2722:	d12c      	bne.n	277e <chk_mounted+0x1fe>
    2724:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    2726:	496f      	ldr	r1, [pc, #444]	; (28e4 <chk_mounted+0x364>)
    2728:	468c      	mov	ip, r1
    272a:	4463      	add	r3, ip
    272c:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    272e:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    2730:	429e      	cmp	r6, r3
    2732:	d200      	bcs.n	2736 <chk_mounted+0x1b6>
    2734:	e74e      	b.n	25d4 <chk_mounted+0x54>
	fs->free_clust = 0xFFFFFFFF;
    2736:	2301      	movs	r3, #1
    2738:	425b      	negs	r3, r3
    273a:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
    273c:	2300      	movs	r3, #0
    273e:	60eb      	str	r3, [r5, #12]
    2740:	e0b6      	b.n	28b0 <chk_mounted+0x330>
		if (tbl[4]) {						/* Is the partition existing? */
    2742:	33f2      	adds	r3, #242	; 0xf2
    2744:	33ff      	adds	r3, #255	; 0xff
    2746:	5ceb      	ldrb	r3, [r5, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    2748:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    274a:	2b00      	cmp	r3, #0
    274c:	d100      	bne.n	2750 <chk_mounted+0x1d0>
    274e:	e741      	b.n	25d4 <chk_mounted+0x54>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    2750:	23fa      	movs	r3, #250	; 0xfa
    2752:	33ff      	adds	r3, #255	; 0xff
    2754:	5cec      	ldrb	r4, [r5, r3]
    2756:	0624      	lsls	r4, r4, #24
    2758:	3b01      	subs	r3, #1
    275a:	5ceb      	ldrb	r3, [r5, r3]
    275c:	041b      	lsls	r3, r3, #16
    275e:	431c      	orrs	r4, r3
    2760:	23fb      	movs	r3, #251	; 0xfb
    2762:	005b      	lsls	r3, r3, #1
    2764:	5ceb      	ldrb	r3, [r5, r3]
    2766:	431c      	orrs	r4, r3
    2768:	23f8      	movs	r3, #248	; 0xf8
    276a:	33ff      	adds	r3, #255	; 0xff
    276c:	5cea      	ldrb	r2, [r5, r3]
    276e:	0212      	lsls	r2, r2, #8
    2770:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    2772:	0021      	movs	r1, r4
    2774:	0028      	movs	r0, r5
    2776:	4b57      	ldr	r3, [pc, #348]	; (28d4 <chk_mounted+0x354>)
    2778:	4798      	blx	r3
    277a:	0003      	movs	r3, r0
    277c:	e747      	b.n	260e <chk_mounted+0x8e>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    277e:	2103      	movs	r1, #3
    2780:	4359      	muls	r1, r3
    2782:	0849      	lsrs	r1, r1, #1
    2784:	2001      	movs	r0, #1
    2786:	4003      	ands	r3, r0
    2788:	18cb      	adds	r3, r1, r3
    278a:	e7cc      	b.n	2726 <chk_mounted+0x1a6>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    278c:	200c      	movs	r0, #12
    278e:	e721      	b.n	25d4 <chk_mounted+0x54>
			return FR_OK;				/* The file system object is valid */
    2790:	2000      	movs	r0, #0
    2792:	e71f      	b.n	25d4 <chk_mounted+0x54>
	if (fmt == 3) return FR_DISK_ERR;
    2794:	2001      	movs	r0, #1
    2796:	e71d      	b.n	25d4 <chk_mounted+0x54>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    2798:	3302      	adds	r3, #2
    279a:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    279c:	19e7      	adds	r7, r4, r7
    279e:	62af      	str	r7, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    27a0:	4652      	mov	r2, sl
    27a2:	18a2      	adds	r2, r4, r2
    27a4:	622a      	str	r2, [r5, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    27a6:	200d      	movs	r0, #13
    27a8:	4642      	mov	r2, r8
    27aa:	2a00      	cmp	r2, #0
    27ac:	d000      	beq.n	27b0 <chk_mounted+0x230>
    27ae:	e711      	b.n	25d4 <chk_mounted+0x54>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    27b0:	225f      	movs	r2, #95	; 0x5f
    27b2:	5caa      	ldrb	r2, [r5, r2]
    27b4:	0612      	lsls	r2, r2, #24
    27b6:	215e      	movs	r1, #94	; 0x5e
    27b8:	5c69      	ldrb	r1, [r5, r1]
    27ba:	0409      	lsls	r1, r1, #16
    27bc:	430a      	orrs	r2, r1
    27be:	215c      	movs	r1, #92	; 0x5c
    27c0:	5c69      	ldrb	r1, [r5, r1]
    27c2:	430a      	orrs	r2, r1
    27c4:	215d      	movs	r1, #93	; 0x5d
    27c6:	5c69      	ldrb	r1, [r5, r1]
    27c8:	0209      	lsls	r1, r1, #8
    27ca:	430a      	orrs	r2, r1
    27cc:	626a      	str	r2, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    27ce:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    27d0:	4a44      	ldr	r2, [pc, #272]	; (28e4 <chk_mounted+0x364>)
    27d2:	4694      	mov	ip, r2
    27d4:	4463      	add	r3, ip
    27d6:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    27d8:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    27da:	429e      	cmp	r6, r3
    27dc:	d200      	bcs.n	27e0 <chk_mounted+0x260>
    27de:	e6f9      	b.n	25d4 <chk_mounted+0x54>
	fs->free_clust = 0xFFFFFFFF;
    27e0:	2301      	movs	r3, #1
    27e2:	425b      	negs	r3, r3
    27e4:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
    27e6:	2300      	movs	r3, #0
    27e8:	60eb      	str	r3, [r5, #12]
	 	fs->fsi_flag = 0;
    27ea:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    27ec:	3361      	adds	r3, #97	; 0x61
    27ee:	5ceb      	ldrb	r3, [r5, r3]
    27f0:	021b      	lsls	r3, r3, #8
    27f2:	2260      	movs	r2, #96	; 0x60
    27f4:	5caa      	ldrb	r2, [r5, r2]
    27f6:	431a      	orrs	r2, r3
    27f8:	1912      	adds	r2, r2, r4
    27fa:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    27fc:	0029      	movs	r1, r5
    27fe:	3130      	adds	r1, #48	; 0x30
    2800:	7868      	ldrb	r0, [r5, #1]
    2802:	2301      	movs	r3, #1
    2804:	4c38      	ldr	r4, [pc, #224]	; (28e8 <chk_mounted+0x368>)
    2806:	47a0      	blx	r4
    2808:	2203      	movs	r2, #3
    280a:	2800      	cmp	r0, #0
    280c:	d150      	bne.n	28b0 <chk_mounted+0x330>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    280e:	4b37      	ldr	r3, [pc, #220]	; (28ec <chk_mounted+0x36c>)
    2810:	5cea      	ldrb	r2, [r5, r3]
    2812:	0212      	lsls	r2, r2, #8
    2814:	4b36      	ldr	r3, [pc, #216]	; (28f0 <chk_mounted+0x370>)
    2816:	5ceb      	ldrb	r3, [r5, r3]
    2818:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    281a:	4936      	ldr	r1, [pc, #216]	; (28f4 <chk_mounted+0x374>)
    281c:	b21b      	sxth	r3, r3
    281e:	2203      	movs	r2, #3
    2820:	428b      	cmp	r3, r1
    2822:	d145      	bne.n	28b0 <chk_mounted+0x330>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    2824:	2333      	movs	r3, #51	; 0x33
    2826:	5ceb      	ldrb	r3, [r5, r3]
    2828:	061b      	lsls	r3, r3, #24
    282a:	322f      	adds	r2, #47	; 0x2f
    282c:	5caa      	ldrb	r2, [r5, r2]
    282e:	0412      	lsls	r2, r2, #16
    2830:	4313      	orrs	r3, r2
    2832:	2230      	movs	r2, #48	; 0x30
    2834:	5caa      	ldrb	r2, [r5, r2]
    2836:	4313      	orrs	r3, r2
    2838:	2231      	movs	r2, #49	; 0x31
    283a:	5caa      	ldrb	r2, [r5, r2]
    283c:	0212      	lsls	r2, r2, #8
    283e:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    2840:	492d      	ldr	r1, [pc, #180]	; (28f8 <chk_mounted+0x378>)
    2842:	2203      	movs	r2, #3
    2844:	428b      	cmp	r3, r1
    2846:	d133      	bne.n	28b0 <chk_mounted+0x330>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    2848:	4b2c      	ldr	r3, [pc, #176]	; (28fc <chk_mounted+0x37c>)
    284a:	5ceb      	ldrb	r3, [r5, r3]
    284c:	061b      	lsls	r3, r3, #24
    284e:	4a2c      	ldr	r2, [pc, #176]	; (2900 <chk_mounted+0x380>)
    2850:	5caa      	ldrb	r2, [r5, r2]
    2852:	0412      	lsls	r2, r2, #16
    2854:	4313      	orrs	r3, r2
    2856:	2285      	movs	r2, #133	; 0x85
    2858:	0092      	lsls	r2, r2, #2
    285a:	5caa      	ldrb	r2, [r5, r2]
    285c:	4313      	orrs	r3, r2
    285e:	4a29      	ldr	r2, [pc, #164]	; (2904 <chk_mounted+0x384>)
    2860:	5caa      	ldrb	r2, [r5, r2]
    2862:	0212      	lsls	r2, r2, #8
    2864:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    2866:	4928      	ldr	r1, [pc, #160]	; (2908 <chk_mounted+0x388>)
    2868:	2203      	movs	r2, #3
    286a:	428b      	cmp	r3, r1
    286c:	d120      	bne.n	28b0 <chk_mounted+0x330>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    286e:	4b27      	ldr	r3, [pc, #156]	; (290c <chk_mounted+0x38c>)
    2870:	5ceb      	ldrb	r3, [r5, r3]
    2872:	061b      	lsls	r3, r3, #24
    2874:	4a26      	ldr	r2, [pc, #152]	; (2910 <chk_mounted+0x390>)
    2876:	5caa      	ldrb	r2, [r5, r2]
    2878:	0412      	lsls	r2, r2, #16
    287a:	4313      	orrs	r3, r2
    287c:	2287      	movs	r2, #135	; 0x87
    287e:	0092      	lsls	r2, r2, #2
    2880:	5caa      	ldrb	r2, [r5, r2]
    2882:	4313      	orrs	r3, r2
    2884:	4a23      	ldr	r2, [pc, #140]	; (2914 <chk_mounted+0x394>)
    2886:	5caa      	ldrb	r2, [r5, r2]
    2888:	0212      	lsls	r2, r2, #8
    288a:	4313      	orrs	r3, r2
    288c:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    288e:	4b22      	ldr	r3, [pc, #136]	; (2918 <chk_mounted+0x398>)
    2890:	5ceb      	ldrb	r3, [r5, r3]
    2892:	061b      	lsls	r3, r3, #24
    2894:	4a21      	ldr	r2, [pc, #132]	; (291c <chk_mounted+0x39c>)
    2896:	5caa      	ldrb	r2, [r5, r2]
    2898:	0412      	lsls	r2, r2, #16
    289a:	4313      	orrs	r3, r2
    289c:	2286      	movs	r2, #134	; 0x86
    289e:	0092      	lsls	r2, r2, #2
    28a0:	5caa      	ldrb	r2, [r5, r2]
    28a2:	4313      	orrs	r3, r2
    28a4:	4a1e      	ldr	r2, [pc, #120]	; (2920 <chk_mounted+0x3a0>)
    28a6:	5caa      	ldrb	r2, [r5, r2]
    28a8:	0212      	lsls	r2, r2, #8
    28aa:	4313      	orrs	r3, r2
    28ac:	612b      	str	r3, [r5, #16]
    28ae:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    28b0:	702a      	strb	r2, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    28b2:	4a1c      	ldr	r2, [pc, #112]	; (2924 <chk_mounted+0x3a4>)
    28b4:	8813      	ldrh	r3, [r2, #0]
    28b6:	3301      	adds	r3, #1
    28b8:	b29b      	uxth	r3, r3
    28ba:	8013      	strh	r3, [r2, #0]
    28bc:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    28be:	2000      	movs	r0, #0
    28c0:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
    28c2:	7128      	strb	r0, [r5, #4]
	return FR_OK;
    28c4:	e686      	b.n	25d4 <chk_mounted+0x54>
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	200000fc 	.word	0x200000fc
    28cc:	00002201 	.word	0x00002201
    28d0:	000021bd 	.word	0x000021bd
    28d4:	000024dd 	.word	0x000024dd
    28d8:	00006479 	.word	0x00006479
    28dc:	00000ff5 	.word	0x00000ff5
    28e0:	0000fff5 	.word	0x0000fff5
    28e4:	000001ff 	.word	0x000001ff
    28e8:	0000221d 	.word	0x0000221d
    28ec:	0000022f 	.word	0x0000022f
    28f0:	0000022e 	.word	0x0000022e
    28f4:	ffffaa55 	.word	0xffffaa55
    28f8:	41615252 	.word	0x41615252
    28fc:	00000217 	.word	0x00000217
    2900:	00000216 	.word	0x00000216
    2904:	00000215 	.word	0x00000215
    2908:	61417272 	.word	0x61417272
    290c:	0000021f 	.word	0x0000021f
    2910:	0000021e 	.word	0x0000021e
    2914:	0000021d 	.word	0x0000021d
    2918:	0000021b 	.word	0x0000021b
    291c:	0000021a 	.word	0x0000021a
    2920:	00000219 	.word	0x00000219
    2924:	20000100 	.word	0x20000100

00002928 <get_fileinfo>:
{
    2928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    292a:	46de      	mov	lr, fp
    292c:	4657      	mov	r7, sl
    292e:	464e      	mov	r6, r9
    2930:	4645      	mov	r5, r8
    2932:	b5e0      	push	{r5, r6, r7, lr}
    2934:	4683      	mov	fp, r0
    2936:	000d      	movs	r5, r1
	p = fno->fname;
    2938:	000e      	movs	r6, r1
    293a:	3609      	adds	r6, #9
	if (dj->sect) {
    293c:	6903      	ldr	r3, [r0, #16]
    293e:	2b00      	cmp	r3, #0
    2940:	d062      	beq.n	2a08 <get_fileinfo+0xe0>
		dir = dj->dir;
    2942:	6944      	ldr	r4, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
    2944:	7b23      	ldrb	r3, [r4, #12]
    2946:	4698      	mov	r8, r3
			c = dir[i];
    2948:	7823      	ldrb	r3, [r4, #0]
			if (c == ' ') break;
    294a:	2b20      	cmp	r3, #32
    294c:	d01f      	beq.n	298e <get_fileinfo+0x66>
    294e:	2211      	movs	r2, #17
    2950:	4691      	mov	r9, r2
    2952:	4489      	add	r9, r1
    2954:	0031      	movs	r1, r6
    2956:	2200      	movs	r2, #0
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    2958:	2708      	movs	r7, #8
    295a:	4640      	mov	r0, r8
    295c:	4038      	ands	r0, r7
    295e:	e008      	b.n	2972 <get_fileinfo+0x4a>
			if (c == NDDE) c = (TCHAR)DDE;
    2960:	23e5      	movs	r3, #229	; 0xe5
			*p++ = c;
    2962:	3101      	adds	r1, #1
    2964:	54b3      	strb	r3, [r6, r2]
		for (i = 0; i < 8; i++) {	/* Copy name body */
    2966:	3201      	adds	r2, #1
    2968:	4549      	cmp	r1, r9
    296a:	d011      	beq.n	2990 <get_fileinfo+0x68>
			c = dir[i];
    296c:	5ca3      	ldrb	r3, [r4, r2]
			if (c == ' ') break;
    296e:	2b20      	cmp	r3, #32
    2970:	d00e      	beq.n	2990 <get_fileinfo+0x68>
			if (c == NDDE) c = (TCHAR)DDE;
    2972:	2b05      	cmp	r3, #5
    2974:	d0f4      	beq.n	2960 <get_fileinfo+0x38>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    2976:	2800      	cmp	r0, #0
    2978:	d0f3      	beq.n	2962 <get_fileinfo+0x3a>
    297a:	2741      	movs	r7, #65	; 0x41
    297c:	427f      	negs	r7, r7
    297e:	46ba      	mov	sl, r7
    2980:	449a      	add	sl, r3
    2982:	4657      	mov	r7, sl
    2984:	2f19      	cmp	r7, #25
    2986:	d8ec      	bhi.n	2962 <get_fileinfo+0x3a>
    2988:	3320      	adds	r3, #32
    298a:	b2db      	uxtb	r3, r3
    298c:	e7e9      	b.n	2962 <get_fileinfo+0x3a>
	p = fno->fname;
    298e:	0031      	movs	r1, r6
		if (dir[8] != ' ') {		/* Copy name extension */
    2990:	7a23      	ldrb	r3, [r4, #8]
    2992:	2b20      	cmp	r3, #32
    2994:	d020      	beq.n	29d8 <get_fileinfo+0xb0>
			*p++ = '.';
    2996:	1c4a      	adds	r2, r1, #1
    2998:	232e      	movs	r3, #46	; 0x2e
    299a:	700b      	strb	r3, [r1, #0]
				c = dir[i];
    299c:	7a23      	ldrb	r3, [r4, #8]
				if (c == ' ') break;
    299e:	2b20      	cmp	r3, #32
    29a0:	d05e      	beq.n	2a60 <get_fileinfo+0x138>
    29a2:	0027      	movs	r7, r4
    29a4:	3709      	adds	r7, #9
    29a6:	3104      	adds	r1, #4
    29a8:	468c      	mov	ip, r1
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    29aa:	2110      	movs	r1, #16
    29ac:	4640      	mov	r0, r8
    29ae:	4001      	ands	r1, r0
    29b0:	e009      	b.n	29c6 <get_fileinfo+0x9e>
				*p++ = c;
    29b2:	1c56      	adds	r6, r2, #1
    29b4:	7013      	strb	r3, [r2, #0]
			for (i = 8; i < 11; i++) {
    29b6:	4566      	cmp	r6, ip
    29b8:	d00f      	beq.n	29da <get_fileinfo+0xb2>
    29ba:	3701      	adds	r7, #1
				c = dir[i];
    29bc:	1e7b      	subs	r3, r7, #1
    29be:	781b      	ldrb	r3, [r3, #0]
				if (c == ' ') break;
    29c0:	2b20      	cmp	r3, #32
    29c2:	d00a      	beq.n	29da <get_fileinfo+0xb2>
				*p++ = c;
    29c4:	0032      	movs	r2, r6
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    29c6:	2900      	cmp	r1, #0
    29c8:	d0f3      	beq.n	29b2 <get_fileinfo+0x8a>
    29ca:	001e      	movs	r6, r3
    29cc:	3e41      	subs	r6, #65	; 0x41
    29ce:	2e19      	cmp	r6, #25
    29d0:	d8ef      	bhi.n	29b2 <get_fileinfo+0x8a>
    29d2:	3320      	adds	r3, #32
    29d4:	b2db      	uxtb	r3, r3
    29d6:	e7ec      	b.n	29b2 <get_fileinfo+0x8a>
    29d8:	000e      	movs	r6, r1
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    29da:	7ae3      	ldrb	r3, [r4, #11]
    29dc:	722b      	strb	r3, [r5, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    29de:	7fe3      	ldrb	r3, [r4, #31]
    29e0:	061b      	lsls	r3, r3, #24
    29e2:	7fa2      	ldrb	r2, [r4, #30]
    29e4:	0412      	lsls	r2, r2, #16
    29e6:	4313      	orrs	r3, r2
    29e8:	7f22      	ldrb	r2, [r4, #28]
    29ea:	4313      	orrs	r3, r2
    29ec:	7f62      	ldrb	r2, [r4, #29]
    29ee:	0212      	lsls	r2, r2, #8
    29f0:	4313      	orrs	r3, r2
    29f2:	602b      	str	r3, [r5, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    29f4:	7e62      	ldrb	r2, [r4, #25]
    29f6:	0212      	lsls	r2, r2, #8
    29f8:	7e23      	ldrb	r3, [r4, #24]
    29fa:	4313      	orrs	r3, r2
    29fc:	80ab      	strh	r3, [r5, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    29fe:	7de2      	ldrb	r2, [r4, #23]
    2a00:	0212      	lsls	r2, r2, #8
    2a02:	7da3      	ldrb	r3, [r4, #22]
    2a04:	4313      	orrs	r3, r2
    2a06:	80eb      	strh	r3, [r5, #6]
	*p = 0;		/* Terminate SFN str by a \0 */
    2a08:	2300      	movs	r3, #0
    2a0a:	7033      	strb	r3, [r6, #0]
	if (fno->lfname && fno->lfsize) {
    2a0c:	69af      	ldr	r7, [r5, #24]
    2a0e:	2f00      	cmp	r7, #0
    2a10:	d02b      	beq.n	2a6a <get_fileinfo+0x142>
    2a12:	69eb      	ldr	r3, [r5, #28]
    2a14:	2b00      	cmp	r3, #0
    2a16:	d028      	beq.n	2a6a <get_fileinfo+0x142>
		i = 0;
    2a18:	2400      	movs	r4, #0
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
    2a1a:	465b      	mov	r3, fp
    2a1c:	691b      	ldr	r3, [r3, #16]
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d021      	beq.n	2a66 <get_fileinfo+0x13e>
    2a22:	465b      	mov	r3, fp
    2a24:	8c1a      	ldrh	r2, [r3, #32]
    2a26:	4b17      	ldr	r3, [pc, #92]	; (2a84 <get_fileinfo+0x15c>)
    2a28:	429a      	cmp	r2, r3
    2a2a:	d01b      	beq.n	2a64 <get_fileinfo+0x13c>
			lfn = dj->lfn;
    2a2c:	465b      	mov	r3, fp
    2a2e:	69db      	ldr	r3, [r3, #28]
    2a30:	4698      	mov	r8, r3
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    2a32:	8818      	ldrh	r0, [r3, #0]
    2a34:	2800      	cmp	r0, #0
    2a36:	d01e      	beq.n	2a76 <get_fileinfo+0x14e>
    2a38:	003e      	movs	r6, r7
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
    2a3a:	4b13      	ldr	r3, [pc, #76]	; (2a88 <get_fileinfo+0x160>)
    2a3c:	4699      	mov	r9, r3
    2a3e:	2100      	movs	r1, #0
    2a40:	47c8      	blx	r9
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
    2a42:	2800      	cmp	r0, #0
    2a44:	d019      	beq.n	2a7a <get_fileinfo+0x152>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
    2a46:	69eb      	ldr	r3, [r5, #28]
    2a48:	3b01      	subs	r3, #1
    2a4a:	42a3      	cmp	r3, r4
    2a4c:	d917      	bls.n	2a7e <get_fileinfo+0x156>
				tp[i++] = (TCHAR)w;
    2a4e:	3401      	adds	r4, #1
    2a50:	7030      	strb	r0, [r6, #0]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    2a52:	0063      	lsls	r3, r4, #1
    2a54:	4642      	mov	r2, r8
    2a56:	5ad0      	ldrh	r0, [r2, r3]
    2a58:	3601      	adds	r6, #1
    2a5a:	2800      	cmp	r0, #0
    2a5c:	d1ef      	bne.n	2a3e <get_fileinfo+0x116>
    2a5e:	e002      	b.n	2a66 <get_fileinfo+0x13e>
			*p++ = '.';
    2a60:	0016      	movs	r6, r2
    2a62:	e7ba      	b.n	29da <get_fileinfo+0xb2>
		i = 0;
    2a64:	2400      	movs	r4, #0
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
    2a66:	2300      	movs	r3, #0
    2a68:	553b      	strb	r3, [r7, r4]
}
    2a6a:	bc3c      	pop	{r2, r3, r4, r5}
    2a6c:	4690      	mov	r8, r2
    2a6e:	4699      	mov	r9, r3
    2a70:	46a2      	mov	sl, r4
    2a72:	46ab      	mov	fp, r5
    2a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		i = 0;
    2a76:	2400      	movs	r4, #0
    2a78:	e7f5      	b.n	2a66 <get_fileinfo+0x13e>
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
    2a7a:	2400      	movs	r4, #0
    2a7c:	e7f3      	b.n	2a66 <get_fileinfo+0x13e>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
    2a7e:	2400      	movs	r4, #0
    2a80:	e7f1      	b.n	2a66 <get_fileinfo+0x13e>
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	0000ffff 	.word	0x0000ffff
    2a88:	000023e1 	.word	0x000023e1

00002a8c <move_window>:
{
    2a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a8e:	46ce      	mov	lr, r9
    2a90:	b500      	push	{lr}
    2a92:	b082      	sub	sp, #8
    2a94:	0004      	movs	r4, r0
    2a96:	000f      	movs	r7, r1
	wsect = fs->winsect;
    2a98:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    2a9a:	428d      	cmp	r5, r1
    2a9c:	d03f      	beq.n	2b1e <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    2a9e:	7903      	ldrb	r3, [r0, #4]
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d107      	bne.n	2ab4 <move_window+0x28>
	return FR_OK;
    2aa4:	2300      	movs	r3, #0
		if (sector) {
    2aa6:	2f00      	cmp	r7, #0
    2aa8:	d12c      	bne.n	2b04 <move_window+0x78>
}
    2aaa:	0018      	movs	r0, r3
    2aac:	b002      	add	sp, #8
    2aae:	bc04      	pop	{r2}
    2ab0:	4691      	mov	r9, r2
    2ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    2ab4:	2330      	movs	r3, #48	; 0x30
    2ab6:	469c      	mov	ip, r3
    2ab8:	4484      	add	ip, r0
    2aba:	4663      	mov	r3, ip
    2abc:	4661      	mov	r1, ip
    2abe:	9301      	str	r3, [sp, #4]
    2ac0:	7840      	ldrb	r0, [r0, #1]
    2ac2:	2301      	movs	r3, #1
    2ac4:	002a      	movs	r2, r5
    2ac6:	4e17      	ldr	r6, [pc, #92]	; (2b24 <move_window+0x98>)
    2ac8:	47b0      	blx	r6
				return FR_DISK_ERR;
    2aca:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    2acc:	2800      	cmp	r0, #0
    2ace:	d1ec      	bne.n	2aaa <move_window+0x1e>
			fs->wflag = 0;
    2ad0:	2300      	movs	r3, #0
    2ad2:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    2ad4:	6a23      	ldr	r3, [r4, #32]
    2ad6:	69e2      	ldr	r2, [r4, #28]
    2ad8:	4694      	mov	ip, r2
    2ada:	4463      	add	r3, ip
    2adc:	429d      	cmp	r5, r3
    2ade:	d2e1      	bcs.n	2aa4 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    2ae0:	78e6      	ldrb	r6, [r4, #3]
    2ae2:	2e01      	cmp	r6, #1
    2ae4:	d9de      	bls.n	2aa4 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    2ae6:	4b0f      	ldr	r3, [pc, #60]	; (2b24 <move_window+0x98>)
    2ae8:	4699      	mov	r9, r3
					wsect += fs->fsize;
    2aea:	69e3      	ldr	r3, [r4, #28]
    2aec:	469c      	mov	ip, r3
    2aee:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    2af0:	7860      	ldrb	r0, [r4, #1]
    2af2:	2301      	movs	r3, #1
    2af4:	002a      	movs	r2, r5
    2af6:	9901      	ldr	r1, [sp, #4]
    2af8:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    2afa:	3e01      	subs	r6, #1
    2afc:	b2f6      	uxtb	r6, r6
    2afe:	2e01      	cmp	r6, #1
    2b00:	d1f3      	bne.n	2aea <move_window+0x5e>
    2b02:	e7cf      	b.n	2aa4 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    2b04:	0021      	movs	r1, r4
    2b06:	3130      	adds	r1, #48	; 0x30
    2b08:	7860      	ldrb	r0, [r4, #1]
    2b0a:	3301      	adds	r3, #1
    2b0c:	003a      	movs	r2, r7
    2b0e:	4d06      	ldr	r5, [pc, #24]	; (2b28 <move_window+0x9c>)
    2b10:	47a8      	blx	r5
				return FR_DISK_ERR;
    2b12:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    2b14:	2800      	cmp	r0, #0
    2b16:	d1c8      	bne.n	2aaa <move_window+0x1e>
			fs->winsect = sector;
    2b18:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    2b1a:	2300      	movs	r3, #0
    2b1c:	e7c5      	b.n	2aaa <move_window+0x1e>
    2b1e:	2300      	movs	r3, #0
    2b20:	e7c3      	b.n	2aaa <move_window+0x1e>
    2b22:	46c0      	nop			; (mov r8, r8)
    2b24:	000022a1 	.word	0x000022a1
    2b28:	0000221d 	.word	0x0000221d

00002b2c <get_fat>:
{
    2b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b2e:	0005      	movs	r5, r0
    2b30:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    2b32:	2901      	cmp	r1, #1
    2b34:	d974      	bls.n	2c20 <get_fat+0xf4>
		return 1;
    2b36:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    2b38:	69ab      	ldr	r3, [r5, #24]
    2b3a:	4299      	cmp	r1, r3
    2b3c:	d271      	bcs.n	2c22 <get_fat+0xf6>
	switch (fs->fs_type) {
    2b3e:	782b      	ldrb	r3, [r5, #0]
    2b40:	2b02      	cmp	r3, #2
    2b42:	d034      	beq.n	2bae <get_fat+0x82>
    2b44:	2b03      	cmp	r3, #3
    2b46:	d049      	beq.n	2bdc <get_fat+0xb0>
    2b48:	2b01      	cmp	r3, #1
    2b4a:	d002      	beq.n	2b52 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    2b4c:	2001      	movs	r0, #1
    2b4e:	4240      	negs	r0, r0
    2b50:	e067      	b.n	2c22 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    2b52:	084e      	lsrs	r6, r1, #1
    2b54:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    2b56:	0a71      	lsrs	r1, r6, #9
    2b58:	6a2b      	ldr	r3, [r5, #32]
    2b5a:	469c      	mov	ip, r3
    2b5c:	4461      	add	r1, ip
    2b5e:	0028      	movs	r0, r5
    2b60:	4b30      	ldr	r3, [pc, #192]	; (2c24 <get_fat+0xf8>)
    2b62:	4798      	blx	r3
    2b64:	2800      	cmp	r0, #0
    2b66:	d002      	beq.n	2b6e <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    2b68:	2001      	movs	r0, #1
    2b6a:	4240      	negs	r0, r0
    2b6c:	e059      	b.n	2c22 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    2b6e:	05f3      	lsls	r3, r6, #23
    2b70:	0ddb      	lsrs	r3, r3, #23
    2b72:	18eb      	adds	r3, r5, r3
    2b74:	3330      	adds	r3, #48	; 0x30
    2b76:	781f      	ldrb	r7, [r3, #0]
    2b78:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    2b7a:	0a71      	lsrs	r1, r6, #9
    2b7c:	6a2b      	ldr	r3, [r5, #32]
    2b7e:	469c      	mov	ip, r3
    2b80:	4461      	add	r1, ip
    2b82:	0028      	movs	r0, r5
    2b84:	4b27      	ldr	r3, [pc, #156]	; (2c24 <get_fat+0xf8>)
    2b86:	4798      	blx	r3
    2b88:	2800      	cmp	r0, #0
    2b8a:	d002      	beq.n	2b92 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    2b8c:	2001      	movs	r0, #1
    2b8e:	4240      	negs	r0, r0
    2b90:	e047      	b.n	2c22 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    2b92:	05f6      	lsls	r6, r6, #23
    2b94:	0df6      	lsrs	r6, r6, #23
    2b96:	19ad      	adds	r5, r5, r6
    2b98:	3530      	adds	r5, #48	; 0x30
    2b9a:	7828      	ldrb	r0, [r5, #0]
    2b9c:	0200      	lsls	r0, r0, #8
    2b9e:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    2ba0:	07e3      	lsls	r3, r4, #31
    2ba2:	d501      	bpl.n	2ba8 <get_fat+0x7c>
    2ba4:	0900      	lsrs	r0, r0, #4
    2ba6:	e03c      	b.n	2c22 <get_fat+0xf6>
    2ba8:	0500      	lsls	r0, r0, #20
    2baa:	0d00      	lsrs	r0, r0, #20
    2bac:	e039      	b.n	2c22 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    2bae:	0a09      	lsrs	r1, r1, #8
    2bb0:	6a2b      	ldr	r3, [r5, #32]
    2bb2:	469c      	mov	ip, r3
    2bb4:	4461      	add	r1, ip
    2bb6:	0028      	movs	r0, r5
    2bb8:	4b1a      	ldr	r3, [pc, #104]	; (2c24 <get_fat+0xf8>)
    2bba:	4798      	blx	r3
    2bbc:	2800      	cmp	r0, #0
    2bbe:	d002      	beq.n	2bc6 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    2bc0:	2001      	movs	r0, #1
    2bc2:	4240      	negs	r0, r0
    2bc4:	e02d      	b.n	2c22 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    2bc6:	0064      	lsls	r4, r4, #1
    2bc8:	23ff      	movs	r3, #255	; 0xff
    2bca:	005b      	lsls	r3, r3, #1
    2bcc:	401c      	ands	r4, r3
		return LD_WORD(p);
    2bce:	192d      	adds	r5, r5, r4
    2bd0:	3530      	adds	r5, #48	; 0x30
    2bd2:	786b      	ldrb	r3, [r5, #1]
    2bd4:	021b      	lsls	r3, r3, #8
    2bd6:	7828      	ldrb	r0, [r5, #0]
    2bd8:	4318      	orrs	r0, r3
    2bda:	e022      	b.n	2c22 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    2bdc:	09c9      	lsrs	r1, r1, #7
    2bde:	6a2b      	ldr	r3, [r5, #32]
    2be0:	469c      	mov	ip, r3
    2be2:	4461      	add	r1, ip
    2be4:	0028      	movs	r0, r5
    2be6:	4b0f      	ldr	r3, [pc, #60]	; (2c24 <get_fat+0xf8>)
    2be8:	4798      	blx	r3
    2bea:	2800      	cmp	r0, #0
    2bec:	d002      	beq.n	2bf4 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    2bee:	2001      	movs	r0, #1
    2bf0:	4240      	negs	r0, r0
    2bf2:	e016      	b.n	2c22 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    2bf4:	00a4      	lsls	r4, r4, #2
    2bf6:	23fe      	movs	r3, #254	; 0xfe
    2bf8:	005b      	lsls	r3, r3, #1
    2bfa:	401c      	ands	r4, r3
    2bfc:	0023      	movs	r3, r4
    2bfe:	3330      	adds	r3, #48	; 0x30
    2c00:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    2c02:	78d8      	ldrb	r0, [r3, #3]
    2c04:	0600      	lsls	r0, r0, #24
    2c06:	789a      	ldrb	r2, [r3, #2]
    2c08:	0412      	lsls	r2, r2, #16
    2c0a:	4310      	orrs	r0, r2
    2c0c:	192c      	adds	r4, r5, r4
    2c0e:	3430      	adds	r4, #48	; 0x30
    2c10:	7822      	ldrb	r2, [r4, #0]
    2c12:	4310      	orrs	r0, r2
    2c14:	785b      	ldrb	r3, [r3, #1]
    2c16:	021b      	lsls	r3, r3, #8
    2c18:	4318      	orrs	r0, r3
    2c1a:	0100      	lsls	r0, r0, #4
    2c1c:	0900      	lsrs	r0, r0, #4
    2c1e:	e000      	b.n	2c22 <get_fat+0xf6>
		return 1;
    2c20:	2001      	movs	r0, #1
}
    2c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c24:	00002a8d 	.word	0x00002a8d

00002c28 <dir_sdi>:
{
    2c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c2a:	0004      	movs	r4, r0
    2c2c:	000d      	movs	r5, r1
	dj->index = idx;
    2c2e:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    2c30:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    2c32:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    2c34:	2901      	cmp	r1, #1
    2c36:	d003      	beq.n	2c40 <dir_sdi+0x18>
    2c38:	6823      	ldr	r3, [r4, #0]
    2c3a:	699a      	ldr	r2, [r3, #24]
    2c3c:	4291      	cmp	r1, r2
    2c3e:	d300      	bcc.n	2c42 <dir_sdi+0x1a>
}
    2c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    2c42:	2900      	cmp	r1, #0
    2c44:	d119      	bne.n	2c7a <dir_sdi+0x52>
    2c46:	781a      	ldrb	r2, [r3, #0]
    2c48:	2a03      	cmp	r2, #3
    2c4a:	d013      	beq.n	2c74 <dir_sdi+0x4c>
		dj->clust = clst;
    2c4c:	2200      	movs	r2, #0
    2c4e:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    2c50:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    2c52:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    2c54:	42aa      	cmp	r2, r5
    2c56:	d9f3      	bls.n	2c40 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    2c58:	092a      	lsrs	r2, r5, #4
    2c5a:	b292      	uxth	r2, r2
    2c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c5e:	189b      	adds	r3, r3, r2
    2c60:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    2c62:	6823      	ldr	r3, [r4, #0]
    2c64:	3330      	adds	r3, #48	; 0x30
    2c66:	220f      	movs	r2, #15
    2c68:	4015      	ands	r5, r2
    2c6a:	016d      	lsls	r5, r5, #5
    2c6c:	195d      	adds	r5, r3, r5
    2c6e:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    2c70:	2000      	movs	r0, #0
    2c72:	e7e5      	b.n	2c40 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    2c74:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    2c76:	2900      	cmp	r1, #0
    2c78:	d0e8      	beq.n	2c4c <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    2c7a:	789e      	ldrb	r6, [r3, #2]
    2c7c:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    2c7e:	42b5      	cmp	r5, r6
    2c80:	d313      	bcc.n	2caa <dir_sdi+0x82>
    2c82:	1bad      	subs	r5, r5, r6
    2c84:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    2c86:	4f10      	ldr	r7, [pc, #64]	; (2cc8 <dir_sdi+0xa0>)
    2c88:	e000      	b.n	2c8c <dir_sdi+0x64>
    2c8a:	001d      	movs	r5, r3
    2c8c:	6820      	ldr	r0, [r4, #0]
    2c8e:	47b8      	blx	r7
    2c90:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2c92:	1c43      	adds	r3, r0, #1
    2c94:	d012      	beq.n	2cbc <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    2c96:	2801      	cmp	r0, #1
    2c98:	d912      	bls.n	2cc0 <dir_sdi+0x98>
    2c9a:	6823      	ldr	r3, [r4, #0]
    2c9c:	699b      	ldr	r3, [r3, #24]
    2c9e:	4298      	cmp	r0, r3
    2ca0:	d210      	bcs.n	2cc4 <dir_sdi+0x9c>
    2ca2:	1bab      	subs	r3, r5, r6
    2ca4:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    2ca6:	42b5      	cmp	r5, r6
    2ca8:	d2ef      	bcs.n	2c8a <dir_sdi+0x62>
		dj->clust = clst;
    2caa:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    2cac:	6820      	ldr	r0, [r4, #0]
    2cae:	4b07      	ldr	r3, [pc, #28]	; (2ccc <dir_sdi+0xa4>)
    2cb0:	4798      	blx	r3
    2cb2:	092b      	lsrs	r3, r5, #4
    2cb4:	b29b      	uxth	r3, r3
    2cb6:	1818      	adds	r0, r3, r0
    2cb8:	6120      	str	r0, [r4, #16]
    2cba:	e7d2      	b.n	2c62 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2cbc:	2001      	movs	r0, #1
    2cbe:	e7bf      	b.n	2c40 <dir_sdi+0x18>
				return FR_INT_ERR;
    2cc0:	2002      	movs	r0, #2
    2cc2:	e7bd      	b.n	2c40 <dir_sdi+0x18>
    2cc4:	2002      	movs	r0, #2
    2cc6:	e7bb      	b.n	2c40 <dir_sdi+0x18>
    2cc8:	00002b2d 	.word	0x00002b2d
    2ccc:	00002479 	.word	0x00002479

00002cd0 <put_fat>:
{
    2cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cd2:	46c6      	mov	lr, r8
    2cd4:	b500      	push	{lr}
    2cd6:	0007      	movs	r7, r0
    2cd8:	000c      	movs	r4, r1
    2cda:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    2cdc:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2cde:	2901      	cmp	r1, #1
    2ce0:	d902      	bls.n	2ce8 <put_fat+0x18>
    2ce2:	6983      	ldr	r3, [r0, #24]
    2ce4:	4299      	cmp	r1, r3
    2ce6:	d303      	bcc.n	2cf0 <put_fat+0x20>
}
    2ce8:	0028      	movs	r0, r5
    2cea:	bc04      	pop	{r2}
    2cec:	4690      	mov	r8, r2
    2cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    2cf0:	7803      	ldrb	r3, [r0, #0]
    2cf2:	2b02      	cmp	r3, #2
    2cf4:	d053      	beq.n	2d9e <put_fat+0xce>
    2cf6:	2b03      	cmp	r3, #3
    2cf8:	d063      	beq.n	2dc2 <put_fat+0xf2>
			res = FR_INT_ERR;
    2cfa:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    2cfc:	2b01      	cmp	r3, #1
    2cfe:	d002      	beq.n	2d06 <put_fat+0x36>
		fs->wflag = 1;
    2d00:	2301      	movs	r3, #1
    2d02:	713b      	strb	r3, [r7, #4]
    2d04:	e7f0      	b.n	2ce8 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    2d06:	084b      	lsrs	r3, r1, #1
    2d08:	4698      	mov	r8, r3
    2d0a:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2d0c:	4643      	mov	r3, r8
    2d0e:	0a59      	lsrs	r1, r3, #9
    2d10:	6a03      	ldr	r3, [r0, #32]
    2d12:	469c      	mov	ip, r3
    2d14:	4461      	add	r1, ip
    2d16:	4b3b      	ldr	r3, [pc, #236]	; (2e04 <put_fat+0x134>)
    2d18:	4798      	blx	r3
    2d1a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    2d1c:	d1f0      	bne.n	2d00 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    2d1e:	4643      	mov	r3, r8
    2d20:	05db      	lsls	r3, r3, #23
    2d22:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2d24:	07e2      	lsls	r2, r4, #31
    2d26:	d51f      	bpl.n	2d68 <put_fat+0x98>
    2d28:	18fb      	adds	r3, r7, r3
    2d2a:	3330      	adds	r3, #48	; 0x30
    2d2c:	7819      	ldrb	r1, [r3, #0]
    2d2e:	220f      	movs	r2, #15
    2d30:	400a      	ands	r2, r1
    2d32:	0131      	lsls	r1, r6, #4
    2d34:	20ff      	movs	r0, #255	; 0xff
    2d36:	0100      	lsls	r0, r0, #4
    2d38:	4001      	ands	r1, r0
    2d3a:	430a      	orrs	r2, r1
    2d3c:	701a      	strb	r2, [r3, #0]
			bc++;
    2d3e:	4644      	mov	r4, r8
    2d40:	3401      	adds	r4, #1
			fs->wflag = 1;
    2d42:	2301      	movs	r3, #1
    2d44:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2d46:	0a61      	lsrs	r1, r4, #9
    2d48:	6a3b      	ldr	r3, [r7, #32]
    2d4a:	469c      	mov	ip, r3
    2d4c:	4461      	add	r1, ip
    2d4e:	0038      	movs	r0, r7
    2d50:	4b2c      	ldr	r3, [pc, #176]	; (2e04 <put_fat+0x134>)
    2d52:	4798      	blx	r3
			if (res != FR_OK) break;
    2d54:	2800      	cmp	r0, #0
    2d56:	d151      	bne.n	2dfc <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    2d58:	05e4      	lsls	r4, r4, #23
    2d5a:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2d5c:	0936      	lsrs	r6, r6, #4
    2d5e:	b2f6      	uxtb	r6, r6
    2d60:	193c      	adds	r4, r7, r4
    2d62:	3430      	adds	r4, #48	; 0x30
    2d64:	7026      	strb	r6, [r4, #0]
			break;
    2d66:	e7cb      	b.n	2d00 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2d68:	18fb      	adds	r3, r7, r3
    2d6a:	3330      	adds	r3, #48	; 0x30
    2d6c:	701e      	strb	r6, [r3, #0]
			bc++;
    2d6e:	4644      	mov	r4, r8
    2d70:	3401      	adds	r4, #1
			fs->wflag = 1;
    2d72:	2301      	movs	r3, #1
    2d74:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2d76:	0a61      	lsrs	r1, r4, #9
    2d78:	6a3b      	ldr	r3, [r7, #32]
    2d7a:	469c      	mov	ip, r3
    2d7c:	4461      	add	r1, ip
    2d7e:	0038      	movs	r0, r7
    2d80:	4b20      	ldr	r3, [pc, #128]	; (2e04 <put_fat+0x134>)
    2d82:	4798      	blx	r3
			if (res != FR_OK) break;
    2d84:	2800      	cmp	r0, #0
    2d86:	d13b      	bne.n	2e00 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    2d88:	05e4      	lsls	r4, r4, #23
    2d8a:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2d8c:	193b      	adds	r3, r7, r4
    2d8e:	3330      	adds	r3, #48	; 0x30
    2d90:	781b      	ldrb	r3, [r3, #0]
    2d92:	220f      	movs	r2, #15
    2d94:	4393      	bics	r3, r2
    2d96:	0536      	lsls	r6, r6, #20
    2d98:	0f36      	lsrs	r6, r6, #28
    2d9a:	431e      	orrs	r6, r3
    2d9c:	e7e0      	b.n	2d60 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    2d9e:	0a09      	lsrs	r1, r1, #8
    2da0:	6a03      	ldr	r3, [r0, #32]
    2da2:	469c      	mov	ip, r3
    2da4:	4461      	add	r1, ip
    2da6:	4b17      	ldr	r3, [pc, #92]	; (2e04 <put_fat+0x134>)
    2da8:	4798      	blx	r3
    2daa:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    2dac:	d1a8      	bne.n	2d00 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    2dae:	0063      	lsls	r3, r4, #1
    2db0:	24ff      	movs	r4, #255	; 0xff
    2db2:	0064      	lsls	r4, r4, #1
    2db4:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    2db6:	18fb      	adds	r3, r7, r3
    2db8:	3330      	adds	r3, #48	; 0x30
    2dba:	701e      	strb	r6, [r3, #0]
    2dbc:	0a36      	lsrs	r6, r6, #8
    2dbe:	705e      	strb	r6, [r3, #1]
			break;
    2dc0:	e79e      	b.n	2d00 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    2dc2:	09c9      	lsrs	r1, r1, #7
    2dc4:	6a03      	ldr	r3, [r0, #32]
    2dc6:	469c      	mov	ip, r3
    2dc8:	4461      	add	r1, ip
    2dca:	4b0e      	ldr	r3, [pc, #56]	; (2e04 <put_fat+0x134>)
    2dcc:	4798      	blx	r3
    2dce:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    2dd0:	d196      	bne.n	2d00 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    2dd2:	00a4      	lsls	r4, r4, #2
    2dd4:	23fe      	movs	r3, #254	; 0xfe
    2dd6:	005b      	lsls	r3, r3, #1
    2dd8:	401c      	ands	r4, r3
    2dda:	0022      	movs	r2, r4
    2ddc:	3230      	adds	r2, #48	; 0x30
    2dde:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    2de0:	78d3      	ldrb	r3, [r2, #3]
    2de2:	193c      	adds	r4, r7, r4
    2de4:	3430      	adds	r4, #48	; 0x30
    2de6:	091b      	lsrs	r3, r3, #4
    2de8:	071b      	lsls	r3, r3, #28
    2dea:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    2dec:	7026      	strb	r6, [r4, #0]
    2dee:	0a33      	lsrs	r3, r6, #8
    2df0:	7053      	strb	r3, [r2, #1]
    2df2:	0c33      	lsrs	r3, r6, #16
    2df4:	7093      	strb	r3, [r2, #2]
    2df6:	0e36      	lsrs	r6, r6, #24
    2df8:	70d6      	strb	r6, [r2, #3]
			break;
    2dfa:	e781      	b.n	2d00 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2dfc:	0005      	movs	r5, r0
    2dfe:	e77f      	b.n	2d00 <put_fat+0x30>
    2e00:	0005      	movs	r5, r0
    2e02:	e77d      	b.n	2d00 <put_fat+0x30>
    2e04:	00002a8d 	.word	0x00002a8d

00002e08 <create_chain>:
{
    2e08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e0a:	46c6      	mov	lr, r8
    2e0c:	b500      	push	{lr}
    2e0e:	0005      	movs	r5, r0
    2e10:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    2e12:	2900      	cmp	r1, #0
    2e14:	d107      	bne.n	2e26 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    2e16:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    2e18:	2e00      	cmp	r6, #0
    2e1a:	d00d      	beq.n	2e38 <create_chain+0x30>
    2e1c:	6983      	ldr	r3, [r0, #24]
    2e1e:	429e      	cmp	r6, r3
    2e20:	d30b      	bcc.n	2e3a <create_chain+0x32>
    2e22:	2601      	movs	r6, #1
    2e24:	e009      	b.n	2e3a <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    2e26:	4b26      	ldr	r3, [pc, #152]	; (2ec0 <create_chain+0xb8>)
    2e28:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    2e2a:	2801      	cmp	r0, #1
    2e2c:	d93d      	bls.n	2eaa <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    2e2e:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    2e30:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    2e32:	4298      	cmp	r0, r3
    2e34:	d201      	bcs.n	2e3a <create_chain+0x32>
    2e36:	e03d      	b.n	2eb4 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    2e38:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    2e3a:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    2e3c:	4f20      	ldr	r7, [pc, #128]	; (2ec0 <create_chain+0xb8>)
    2e3e:	e00a      	b.n	2e56 <create_chain+0x4e>
    2e40:	0021      	movs	r1, r4
    2e42:	0028      	movs	r0, r5
    2e44:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    2e46:	2800      	cmp	r0, #0
    2e48:	d00d      	beq.n	2e66 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    2e4a:	1c43      	adds	r3, r0, #1
    2e4c:	d032      	beq.n	2eb4 <create_chain+0xac>
    2e4e:	2801      	cmp	r0, #1
    2e50:	d030      	beq.n	2eb4 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    2e52:	42b4      	cmp	r4, r6
    2e54:	d02d      	beq.n	2eb2 <create_chain+0xaa>
		ncl++;							/* Next cluster */
    2e56:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    2e58:	69ab      	ldr	r3, [r5, #24]
    2e5a:	429c      	cmp	r4, r3
    2e5c:	d3f0      	bcc.n	2e40 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    2e5e:	2e01      	cmp	r6, #1
    2e60:	d925      	bls.n	2eae <create_chain+0xa6>
			ncl = 2;
    2e62:	2402      	movs	r4, #2
    2e64:	e7ec      	b.n	2e40 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    2e66:	4a17      	ldr	r2, [pc, #92]	; (2ec4 <create_chain+0xbc>)
    2e68:	0021      	movs	r1, r4
    2e6a:	0028      	movs	r0, r5
    2e6c:	4b16      	ldr	r3, [pc, #88]	; (2ec8 <create_chain+0xc0>)
    2e6e:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    2e70:	2800      	cmp	r0, #0
    2e72:	d113      	bne.n	2e9c <create_chain+0x94>
    2e74:	4643      	mov	r3, r8
    2e76:	2b00      	cmp	r3, #0
    2e78:	d109      	bne.n	2e8e <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    2e7a:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    2e7c:	692b      	ldr	r3, [r5, #16]
    2e7e:	1c5a      	adds	r2, r3, #1
    2e80:	d01b      	beq.n	2eba <create_chain+0xb2>
			fs->free_clust--;
    2e82:	3b01      	subs	r3, #1
    2e84:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    2e86:	2301      	movs	r3, #1
    2e88:	716b      	strb	r3, [r5, #5]
    2e8a:	0020      	movs	r0, r4
    2e8c:	e012      	b.n	2eb4 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    2e8e:	0022      	movs	r2, r4
    2e90:	4641      	mov	r1, r8
    2e92:	0028      	movs	r0, r5
    2e94:	4b0c      	ldr	r3, [pc, #48]	; (2ec8 <create_chain+0xc0>)
    2e96:	4798      	blx	r3
	if (res == FR_OK) {
    2e98:	2800      	cmp	r0, #0
    2e9a:	d0ee      	beq.n	2e7a <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    2e9c:	3801      	subs	r0, #1
    2e9e:	4242      	negs	r2, r0
    2ea0:	4142      	adcs	r2, r0
    2ea2:	4250      	negs	r0, r2
    2ea4:	2301      	movs	r3, #1
    2ea6:	4318      	orrs	r0, r3
    2ea8:	e004      	b.n	2eb4 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    2eaa:	2001      	movs	r0, #1
    2eac:	e002      	b.n	2eb4 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    2eae:	2000      	movs	r0, #0
    2eb0:	e000      	b.n	2eb4 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    2eb2:	2000      	movs	r0, #0
}
    2eb4:	bc04      	pop	{r2}
    2eb6:	4690      	mov	r8, r2
    2eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eba:	0020      	movs	r0, r4
    2ebc:	e7fa      	b.n	2eb4 <create_chain+0xac>
    2ebe:	46c0      	nop			; (mov r8, r8)
    2ec0:	00002b2d 	.word	0x00002b2d
    2ec4:	0fffffff 	.word	0x0fffffff
    2ec8:	00002cd1 	.word	0x00002cd1

00002ecc <remove_chain>:
{
    2ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ece:	46ce      	mov	lr, r9
    2ed0:	4647      	mov	r7, r8
    2ed2:	b580      	push	{r7, lr}
    2ed4:	0004      	movs	r4, r0
    2ed6:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    2ed8:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2eda:	2901      	cmp	r1, #1
    2edc:	d902      	bls.n	2ee4 <remove_chain+0x18>
    2ede:	69a3      	ldr	r3, [r4, #24]
    2ee0:	4299      	cmp	r1, r3
    2ee2:	d303      	bcc.n	2eec <remove_chain+0x20>
}
    2ee4:	bc0c      	pop	{r2, r3}
    2ee6:	4690      	mov	r8, r2
    2ee8:	4699      	mov	r9, r3
    2eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2eec:	4f13      	ldr	r7, [pc, #76]	; (2f3c <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2eee:	4b14      	ldr	r3, [pc, #80]	; (2f40 <remove_chain+0x74>)
    2ef0:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    2ef2:	2301      	movs	r3, #1
    2ef4:	4699      	mov	r9, r3
    2ef6:	e003      	b.n	2f00 <remove_chain+0x34>
    2ef8:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2efa:	69a3      	ldr	r3, [r4, #24]
    2efc:	42b3      	cmp	r3, r6
    2efe:	d9f1      	bls.n	2ee4 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2f00:	0029      	movs	r1, r5
    2f02:	0020      	movs	r0, r4
    2f04:	47b8      	blx	r7
    2f06:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    2f08:	d011      	beq.n	2f2e <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2f0a:	2801      	cmp	r0, #1
    2f0c:	d011      	beq.n	2f32 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2f0e:	1c43      	adds	r3, r0, #1
    2f10:	d011      	beq.n	2f36 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2f12:	2200      	movs	r2, #0
    2f14:	0029      	movs	r1, r5
    2f16:	0020      	movs	r0, r4
    2f18:	47c0      	blx	r8
			if (res != FR_OK) break;
    2f1a:	2800      	cmp	r0, #0
    2f1c:	d1e2      	bne.n	2ee4 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    2f1e:	6923      	ldr	r3, [r4, #16]
    2f20:	1c5a      	adds	r2, r3, #1
    2f22:	d0e9      	beq.n	2ef8 <remove_chain+0x2c>
				fs->free_clust++;
    2f24:	3301      	adds	r3, #1
    2f26:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    2f28:	464b      	mov	r3, r9
    2f2a:	7163      	strb	r3, [r4, #5]
    2f2c:	e7e4      	b.n	2ef8 <remove_chain+0x2c>
    2f2e:	2000      	movs	r0, #0
    2f30:	e7d8      	b.n	2ee4 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2f32:	2002      	movs	r0, #2
    2f34:	e7d6      	b.n	2ee4 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2f36:	2001      	movs	r0, #1
    2f38:	e7d4      	b.n	2ee4 <remove_chain+0x18>
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	00002b2d 	.word	0x00002b2d
    2f40:	00002cd1 	.word	0x00002cd1

00002f44 <sync>:
{
    2f44:	b570      	push	{r4, r5, r6, lr}
    2f46:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    2f48:	2100      	movs	r1, #0
    2f4a:	4b2e      	ldr	r3, [pc, #184]	; (3004 <sync+0xc0>)
    2f4c:	4798      	blx	r3
	if (res == FR_OK) {
    2f4e:	2800      	cmp	r0, #0
    2f50:	d10a      	bne.n	2f68 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    2f52:	7823      	ldrb	r3, [r4, #0]
    2f54:	2b03      	cmp	r3, #3
    2f56:	d008      	beq.n	2f6a <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    2f58:	7860      	ldrb	r0, [r4, #1]
    2f5a:	2200      	movs	r2, #0
    2f5c:	2100      	movs	r1, #0
    2f5e:	4b2a      	ldr	r3, [pc, #168]	; (3008 <sync+0xc4>)
    2f60:	4798      	blx	r3
    2f62:	1e43      	subs	r3, r0, #1
    2f64:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    2f66:	b2c0      	uxtb	r0, r0
}
    2f68:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    2f6a:	7963      	ldrb	r3, [r4, #5]
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d0f3      	beq.n	2f58 <sync+0x14>
			fs->winsect = 0;
    2f70:	2300      	movs	r3, #0
    2f72:	62e3      	str	r3, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    2f74:	0021      	movs	r1, r4
    2f76:	3130      	adds	r1, #48	; 0x30
    2f78:	000b      	movs	r3, r1
    2f7a:	228c      	movs	r2, #140	; 0x8c
    2f7c:	0092      	lsls	r2, r2, #2
    2f7e:	18a0      	adds	r0, r4, r2
		*d++ = (BYTE)val;
    2f80:	2200      	movs	r2, #0
    2f82:	701a      	strb	r2, [r3, #0]
    2f84:	3301      	adds	r3, #1
	while (cnt--)
    2f86:	4283      	cmp	r3, r0
    2f88:	d1fb      	bne.n	2f82 <sync+0x3e>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    2f8a:	2255      	movs	r2, #85	; 0x55
    2f8c:	4b1f      	ldr	r3, [pc, #124]	; (300c <sync+0xc8>)
    2f8e:	54e2      	strb	r2, [r4, r3]
    2f90:	3255      	adds	r2, #85	; 0x55
    2f92:	4b1f      	ldr	r3, [pc, #124]	; (3010 <sync+0xcc>)
    2f94:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2f96:	3bde      	subs	r3, #222	; 0xde
    2f98:	3bff      	subs	r3, #255	; 0xff
    2f9a:	3a7a      	subs	r2, #122	; 0x7a
    2f9c:	54a3      	strb	r3, [r4, r2]
    2f9e:	3201      	adds	r2, #1
    2fa0:	54a3      	strb	r3, [r4, r2]
    2fa2:	330f      	adds	r3, #15
    2fa4:	3201      	adds	r2, #1
    2fa6:	54a3      	strb	r3, [r4, r2]
    2fa8:	320f      	adds	r2, #15
    2faa:	2033      	movs	r0, #51	; 0x33
    2fac:	5422      	strb	r2, [r4, r0]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2fae:	303f      	adds	r0, #63	; 0x3f
    2fb0:	2585      	movs	r5, #133	; 0x85
    2fb2:	00ad      	lsls	r5, r5, #2
    2fb4:	5560      	strb	r0, [r4, r5]
    2fb6:	4d17      	ldr	r5, [pc, #92]	; (3014 <sync+0xd0>)
    2fb8:	5560      	strb	r0, [r4, r5]
    2fba:	4817      	ldr	r0, [pc, #92]	; (3018 <sync+0xd4>)
    2fbc:	5422      	strb	r2, [r4, r0]
    2fbe:	4a17      	ldr	r2, [pc, #92]	; (301c <sync+0xd8>)
    2fc0:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2fc2:	6923      	ldr	r3, [r4, #16]
    2fc4:	3201      	adds	r2, #1
    2fc6:	54a3      	strb	r3, [r4, r2]
    2fc8:	0a18      	lsrs	r0, r3, #8
    2fca:	4a15      	ldr	r2, [pc, #84]	; (3020 <sync+0xdc>)
    2fcc:	54a0      	strb	r0, [r4, r2]
    2fce:	0c18      	lsrs	r0, r3, #16
    2fd0:	4a14      	ldr	r2, [pc, #80]	; (3024 <sync+0xe0>)
    2fd2:	54a0      	strb	r0, [r4, r2]
    2fd4:	0e1b      	lsrs	r3, r3, #24
    2fd6:	4a14      	ldr	r2, [pc, #80]	; (3028 <sync+0xe4>)
    2fd8:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    2fda:	68e3      	ldr	r3, [r4, #12]
    2fdc:	3201      	adds	r2, #1
    2fde:	54a3      	strb	r3, [r4, r2]
    2fe0:	0a18      	lsrs	r0, r3, #8
    2fe2:	4a12      	ldr	r2, [pc, #72]	; (302c <sync+0xe8>)
    2fe4:	54a0      	strb	r0, [r4, r2]
    2fe6:	0c18      	lsrs	r0, r3, #16
    2fe8:	4a11      	ldr	r2, [pc, #68]	; (3030 <sync+0xec>)
    2fea:	54a0      	strb	r0, [r4, r2]
    2fec:	0e1b      	lsrs	r3, r3, #24
    2fee:	4a11      	ldr	r2, [pc, #68]	; (3034 <sync+0xf0>)
    2ff0:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    2ff2:	7860      	ldrb	r0, [r4, #1]
    2ff4:	2301      	movs	r3, #1
    2ff6:	6962      	ldr	r2, [r4, #20]
    2ff8:	4d0f      	ldr	r5, [pc, #60]	; (3038 <sync+0xf4>)
    2ffa:	47a8      	blx	r5
			fs->fsi_flag = 0;
    2ffc:	2300      	movs	r3, #0
    2ffe:	7163      	strb	r3, [r4, #5]
    3000:	e7aa      	b.n	2f58 <sync+0x14>
    3002:	46c0      	nop			; (mov r8, r8)
    3004:	00002a8d 	.word	0x00002a8d
    3008:	00002325 	.word	0x00002325
    300c:	0000022e 	.word	0x0000022e
    3010:	0000022f 	.word	0x0000022f
    3014:	00000215 	.word	0x00000215
    3018:	00000216 	.word	0x00000216
    301c:	00000217 	.word	0x00000217
    3020:	00000219 	.word	0x00000219
    3024:	0000021a 	.word	0x0000021a
    3028:	0000021b 	.word	0x0000021b
    302c:	0000021d 	.word	0x0000021d
    3030:	0000021e 	.word	0x0000021e
    3034:	0000021f 	.word	0x0000021f
    3038:	000022a1 	.word	0x000022a1

0000303c <dir_next>:
{
    303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    303e:	46d6      	mov	lr, sl
    3040:	4647      	mov	r7, r8
    3042:	b580      	push	{r7, lr}
    3044:	0006      	movs	r6, r0
    3046:	000d      	movs	r5, r1
	i = dj->index + 1;
    3048:	88c4      	ldrh	r4, [r0, #6]
    304a:	3401      	adds	r4, #1
    304c:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    304e:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    3050:	2c00      	cmp	r4, #0
    3052:	d103      	bne.n	305c <dir_next+0x20>
}
    3054:	bc0c      	pop	{r2, r3}
    3056:	4690      	mov	r8, r2
    3058:	469a      	mov	sl, r3
    305a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    305c:	6933      	ldr	r3, [r6, #16]
    305e:	2b00      	cmp	r3, #0
    3060:	d0f8      	beq.n	3054 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    3062:	270f      	movs	r7, #15
    3064:	4027      	ands	r7, r4
    3066:	d10f      	bne.n	3088 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    3068:	3301      	adds	r3, #1
    306a:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    306c:	68f1      	ldr	r1, [r6, #12]
    306e:	2900      	cmp	r1, #0
    3070:	d104      	bne.n	307c <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    3072:	6833      	ldr	r3, [r6, #0]
    3074:	891b      	ldrh	r3, [r3, #8]
    3076:	42a3      	cmp	r3, r4
    3078:	d9ec      	bls.n	3054 <dir_next+0x18>
    307a:	e005      	b.n	3088 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    307c:	6830      	ldr	r0, [r6, #0]
    307e:	7883      	ldrb	r3, [r0, #2]
    3080:	3b01      	subs	r3, #1
    3082:	0922      	lsrs	r2, r4, #4
    3084:	421a      	tst	r2, r3
    3086:	d007      	beq.n	3098 <dir_next+0x5c>
	dj->index = i;
    3088:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    308a:	6833      	ldr	r3, [r6, #0]
    308c:	3330      	adds	r3, #48	; 0x30
    308e:	017f      	lsls	r7, r7, #5
    3090:	19df      	adds	r7, r3, r7
    3092:	6177      	str	r7, [r6, #20]
	return FR_OK;
    3094:	2000      	movs	r0, #0
    3096:	e7dd      	b.n	3054 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    3098:	4b2e      	ldr	r3, [pc, #184]	; (3154 <dir_next+0x118>)
    309a:	4798      	blx	r3
    309c:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    309e:	2002      	movs	r0, #2
    30a0:	4643      	mov	r3, r8
    30a2:	2b01      	cmp	r3, #1
    30a4:	d9d6      	bls.n	3054 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    30a6:	3301      	adds	r3, #1
    30a8:	d050      	beq.n	314c <dir_next+0x110>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    30aa:	6833      	ldr	r3, [r6, #0]
    30ac:	699a      	ldr	r2, [r3, #24]
    30ae:	4590      	cmp	r8, r2
    30b0:	d344      	bcc.n	313c <dir_next+0x100>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    30b2:	3002      	adds	r0, #2
    30b4:	2d00      	cmp	r5, #0
    30b6:	d0cd      	beq.n	3054 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    30b8:	68f1      	ldr	r1, [r6, #12]
    30ba:	0018      	movs	r0, r3
    30bc:	4b26      	ldr	r3, [pc, #152]	; (3158 <dir_next+0x11c>)
    30be:	4798      	blx	r3
    30c0:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    30c2:	2007      	movs	r0, #7
    30c4:	4643      	mov	r3, r8
    30c6:	2b00      	cmp	r3, #0
    30c8:	d0c4      	beq.n	3054 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    30ca:	3805      	subs	r0, #5
    30cc:	2b01      	cmp	r3, #1
    30ce:	d0c1      	beq.n	3054 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    30d0:	3801      	subs	r0, #1
    30d2:	3301      	adds	r3, #1
    30d4:	d0be      	beq.n	3054 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    30d6:	2100      	movs	r1, #0
    30d8:	6830      	ldr	r0, [r6, #0]
    30da:	4b20      	ldr	r3, [pc, #128]	; (315c <dir_next+0x120>)
    30dc:	4798      	blx	r3
    30de:	0003      	movs	r3, r0
    30e0:	2001      	movs	r0, #1
    30e2:	2b00      	cmp	r3, #0
    30e4:	d1b6      	bne.n	3054 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    30e6:	6833      	ldr	r3, [r6, #0]
    30e8:	001a      	movs	r2, r3
    30ea:	3230      	adds	r2, #48	; 0x30
    30ec:	218c      	movs	r1, #140	; 0x8c
    30ee:	0089      	lsls	r1, r1, #2
    30f0:	468c      	mov	ip, r1
    30f2:	4463      	add	r3, ip
		*d++ = (BYTE)val;
    30f4:	2100      	movs	r1, #0
    30f6:	7011      	strb	r1, [r2, #0]
    30f8:	3201      	adds	r2, #1
	while (cnt--)
    30fa:	429a      	cmp	r2, r3
    30fc:	d1fb      	bne.n	30f6 <dir_next+0xba>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    30fe:	6835      	ldr	r5, [r6, #0]
    3100:	4641      	mov	r1, r8
    3102:	0028      	movs	r0, r5
    3104:	4b16      	ldr	r3, [pc, #88]	; (3160 <dir_next+0x124>)
    3106:	4798      	blx	r3
    3108:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    310a:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    310c:	2301      	movs	r3, #1
    310e:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    3110:	6833      	ldr	r3, [r6, #0]
    3112:	789a      	ldrb	r2, [r3, #2]
    3114:	42aa      	cmp	r2, r5
    3116:	d90e      	bls.n	3136 <dir_next+0xfa>
						dj->fs->wflag = 1;
    3118:	4652      	mov	r2, sl
    311a:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    311c:	2100      	movs	r1, #0
    311e:	6830      	ldr	r0, [r6, #0]
    3120:	4b0e      	ldr	r3, [pc, #56]	; (315c <dir_next+0x120>)
    3122:	4798      	blx	r3
    3124:	2800      	cmp	r0, #0
    3126:	d113      	bne.n	3150 <dir_next+0x114>
						dj->fs->winsect++;
    3128:	6832      	ldr	r2, [r6, #0]
    312a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    312c:	3301      	adds	r3, #1
    312e:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    3130:	3501      	adds	r5, #1
    3132:	b2ed      	uxtb	r5, r5
    3134:	e7ec      	b.n	3110 <dir_next+0xd4>
					dj->fs->winsect -= c;						/* Rewind window address */
    3136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3138:	1b52      	subs	r2, r2, r5
    313a:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    313c:	4643      	mov	r3, r8
    313e:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    3140:	4641      	mov	r1, r8
    3142:	6830      	ldr	r0, [r6, #0]
    3144:	4b06      	ldr	r3, [pc, #24]	; (3160 <dir_next+0x124>)
    3146:	4798      	blx	r3
    3148:	6130      	str	r0, [r6, #16]
    314a:	e79d      	b.n	3088 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    314c:	2001      	movs	r0, #1
    314e:	e781      	b.n	3054 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    3150:	2001      	movs	r0, #1
    3152:	e77f      	b.n	3054 <dir_next+0x18>
    3154:	00002b2d 	.word	0x00002b2d
    3158:	00002e09 	.word	0x00002e09
    315c:	00002a8d 	.word	0x00002a8d
    3160:	00002479 	.word	0x00002479

00003164 <dir_find>:
{
    3164:	b5f0      	push	{r4, r5, r6, r7, lr}
    3166:	46de      	mov	lr, fp
    3168:	4657      	mov	r7, sl
    316a:	464e      	mov	r6, r9
    316c:	4645      	mov	r5, r8
    316e:	b5e0      	push	{r5, r6, r7, lr}
    3170:	b083      	sub	sp, #12
    3172:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    3174:	2100      	movs	r1, #0
    3176:	4b5a      	ldr	r3, [pc, #360]	; (32e0 <dir_find+0x17c>)
    3178:	4798      	blx	r3
    317a:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    317c:	d000      	beq.n	3180 <dir_find+0x1c>
    317e:	e09e      	b.n	32be <dir_find+0x15a>
    3180:	23ff      	movs	r3, #255	; 0xff
    3182:	4699      	mov	r9, r3
    3184:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    3186:	4b57      	ldr	r3, [pc, #348]	; (32e4 <dir_find+0x180>)
    3188:	469b      	mov	fp, r3
    318a:	e01b      	b.n	31c4 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    318c:	2b0f      	cmp	r3, #15
    318e:	d030      	beq.n	31f2 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    3190:	4653      	mov	r3, sl
    3192:	2b00      	cmp	r3, #0
    3194:	d105      	bne.n	31a2 <dir_find+0x3e>
    3196:	0020      	movs	r0, r4
    3198:	4b53      	ldr	r3, [pc, #332]	; (32e8 <dir_find+0x184>)
    319a:	4798      	blx	r3
    319c:	4581      	cmp	r9, r0
    319e:	d100      	bne.n	31a2 <dir_find+0x3e>
    31a0:	e08d      	b.n	32be <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    31a2:	2301      	movs	r3, #1
    31a4:	425b      	negs	r3, r3
    31a6:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    31a8:	69a8      	ldr	r0, [r5, #24]
    31aa:	7ac3      	ldrb	r3, [r0, #11]
    31ac:	07db      	lsls	r3, r3, #31
    31ae:	d400      	bmi.n	31b2 <dir_find+0x4e>
    31b0:	e07d      	b.n	32ae <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    31b2:	23ff      	movs	r3, #255	; 0xff
    31b4:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    31b6:	2100      	movs	r1, #0
    31b8:	0028      	movs	r0, r5
    31ba:	4b4c      	ldr	r3, [pc, #304]	; (32ec <dir_find+0x188>)
    31bc:	4798      	blx	r3
    31be:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    31c0:	d000      	beq.n	31c4 <dir_find+0x60>
    31c2:	e07c      	b.n	32be <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    31c4:	6929      	ldr	r1, [r5, #16]
    31c6:	6828      	ldr	r0, [r5, #0]
    31c8:	47d8      	blx	fp
    31ca:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    31cc:	d177      	bne.n	32be <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    31ce:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    31d0:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    31d2:	2e00      	cmp	r6, #0
    31d4:	d100      	bne.n	31d8 <dir_find+0x74>
    31d6:	e080      	b.n	32da <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    31d8:	7ae2      	ldrb	r2, [r4, #11]
    31da:	233f      	movs	r3, #63	; 0x3f
    31dc:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    31de:	2ee5      	cmp	r6, #229	; 0xe5
    31e0:	d100      	bne.n	31e4 <dir_find+0x80>
    31e2:	e077      	b.n	32d4 <dir_find+0x170>
    31e4:	0712      	lsls	r2, r2, #28
    31e6:	d5d1      	bpl.n	318c <dir_find+0x28>
    31e8:	2b0f      	cmp	r3, #15
    31ea:	d002      	beq.n	31f2 <dir_find+0x8e>
			ord = 0xFF;
    31ec:	23ff      	movs	r3, #255	; 0xff
    31ee:	469a      	mov	sl, r3
    31f0:	e7e1      	b.n	31b6 <dir_find+0x52>
				if (dj->lfn) {
    31f2:	69ef      	ldr	r7, [r5, #28]
    31f4:	2f00      	cmp	r7, #0
    31f6:	d0de      	beq.n	31b6 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    31f8:	0673      	lsls	r3, r6, #25
    31fa:	d518      	bpl.n	322e <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    31fc:	7b63      	ldrb	r3, [r4, #13]
    31fe:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    3200:	2340      	movs	r3, #64	; 0x40
    3202:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    3204:	88eb      	ldrh	r3, [r5, #6]
    3206:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    3208:	7b63      	ldrb	r3, [r4, #13]
    320a:	9300      	str	r3, [sp, #0]
    320c:	22ff      	movs	r2, #255	; 0xff
    320e:	4692      	mov	sl, r2
    3210:	454b      	cmp	r3, r9
    3212:	d1d0      	bne.n	31b6 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    3214:	7823      	ldrb	r3, [r4, #0]
    3216:	3abf      	subs	r2, #191	; 0xbf
    3218:	4393      	bics	r3, r2
    321a:	3b01      	subs	r3, #1
    321c:	005a      	lsls	r2, r3, #1
    321e:	18d2      	adds	r2, r2, r3
    3220:	0092      	lsls	r2, r2, #2
    3222:	4692      	mov	sl, r2
    3224:	449a      	add	sl, r3
	s = 0; wc = 1;
    3226:	2201      	movs	r2, #1
    3228:	2300      	movs	r3, #0
    322a:	4699      	mov	r9, r3
    322c:	e01d      	b.n	326a <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    322e:	45b2      	cmp	sl, r6
    3230:	d0ea      	beq.n	3208 <dir_find+0xa4>
    3232:	23ff      	movs	r3, #255	; 0xff
    3234:	469a      	mov	sl, r3
    3236:	e7be      	b.n	31b6 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    3238:	4b2d      	ldr	r3, [pc, #180]	; (32f0 <dir_find+0x18c>)
    323a:	4798      	blx	r3
    323c:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    323e:	4653      	mov	r3, sl
    3240:	2bfe      	cmp	r3, #254	; 0xfe
    3242:	d81f      	bhi.n	3284 <dir_find+0x120>
    3244:	2301      	movs	r3, #1
    3246:	4453      	add	r3, sl
    3248:	4698      	mov	r8, r3
    324a:	4653      	mov	r3, sl
    324c:	005b      	lsls	r3, r3, #1
    324e:	5bd8      	ldrh	r0, [r3, r7]
    3250:	4b27      	ldr	r3, [pc, #156]	; (32f0 <dir_find+0x18c>)
    3252:	4798      	blx	r3
    3254:	0002      	movs	r2, r0
    3256:	9b01      	ldr	r3, [sp, #4]
    3258:	4283      	cmp	r3, r0
    325a:	d113      	bne.n	3284 <dir_find+0x120>
    325c:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    325e:	2301      	movs	r3, #1
    3260:	469c      	mov	ip, r3
    3262:	44e1      	add	r9, ip
    3264:	464b      	mov	r3, r9
    3266:	2b0d      	cmp	r3, #13
    3268:	d011      	beq.n	328e <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    326a:	4b22      	ldr	r3, [pc, #136]	; (32f4 <dir_find+0x190>)
    326c:	4649      	mov	r1, r9
    326e:	5cc9      	ldrb	r1, [r1, r3]
    3270:	1863      	adds	r3, r4, r1
    3272:	785b      	ldrb	r3, [r3, #1]
    3274:	021b      	lsls	r3, r3, #8
    3276:	5c60      	ldrb	r0, [r4, r1]
    3278:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    327a:	2a00      	cmp	r2, #0
    327c:	d1dc      	bne.n	3238 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    327e:	4b1e      	ldr	r3, [pc, #120]	; (32f8 <dir_find+0x194>)
    3280:	4298      	cmp	r0, r3
    3282:	d0ec      	beq.n	325e <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    3284:	9b00      	ldr	r3, [sp, #0]
    3286:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    3288:	23ff      	movs	r3, #255	; 0xff
    328a:	469a      	mov	sl, r3
    328c:	e793      	b.n	31b6 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    328e:	7823      	ldrb	r3, [r4, #0]
    3290:	065b      	lsls	r3, r3, #25
    3292:	d506      	bpl.n	32a2 <dir_find+0x13e>
    3294:	2a00      	cmp	r2, #0
    3296:	d004      	beq.n	32a2 <dir_find+0x13e>
    3298:	4653      	mov	r3, sl
    329a:	005b      	lsls	r3, r3, #1
    329c:	5bdb      	ldrh	r3, [r3, r7]
    329e:	2b00      	cmp	r3, #0
    32a0:	d1f0      	bne.n	3284 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    32a2:	3e01      	subs	r6, #1
    32a4:	b2f3      	uxtb	r3, r6
    32a6:	469a      	mov	sl, r3
    32a8:	9b00      	ldr	r3, [sp, #0]
    32aa:	4699      	mov	r9, r3
    32ac:	e783      	b.n	31b6 <dir_find+0x52>
    32ae:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    32b0:	5ce1      	ldrb	r1, [r4, r3]
    32b2:	5cc2      	ldrb	r2, [r0, r3]
    32b4:	4291      	cmp	r1, r2
    32b6:	d10a      	bne.n	32ce <dir_find+0x16a>
    32b8:	3301      	adds	r3, #1
    32ba:	2b0b      	cmp	r3, #11
    32bc:	d1f8      	bne.n	32b0 <dir_find+0x14c>
}
    32be:	0038      	movs	r0, r7
    32c0:	b003      	add	sp, #12
    32c2:	bc3c      	pop	{r2, r3, r4, r5}
    32c4:	4690      	mov	r8, r2
    32c6:	4699      	mov	r9, r3
    32c8:	46a2      	mov	sl, r4
    32ca:	46ab      	mov	fp, r5
    32cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    32ce:	23ff      	movs	r3, #255	; 0xff
    32d0:	469a      	mov	sl, r3
    32d2:	e770      	b.n	31b6 <dir_find+0x52>
			ord = 0xFF;
    32d4:	23ff      	movs	r3, #255	; 0xff
    32d6:	469a      	mov	sl, r3
    32d8:	e76d      	b.n	31b6 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    32da:	2704      	movs	r7, #4
    32dc:	e7ef      	b.n	32be <dir_find+0x15a>
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	00002c29 	.word	0x00002c29
    32e4:	00002a8d 	.word	0x00002a8d
    32e8:	00002491 	.word	0x00002491
    32ec:	0000303d 	.word	0x0000303d
    32f0:	00002429 	.word	0x00002429
    32f4:	00009e24 	.word	0x00009e24
    32f8:	0000ffff 	.word	0x0000ffff

000032fc <follow_path>:
{
    32fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    32fe:	46de      	mov	lr, fp
    3300:	4657      	mov	r7, sl
    3302:	464e      	mov	r6, r9
    3304:	4645      	mov	r5, r8
    3306:	b5e0      	push	{r5, r6, r7, lr}
    3308:	b083      	sub	sp, #12
    330a:	9000      	str	r0, [sp, #0]
    330c:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    330e:	780b      	ldrb	r3, [r1, #0]
    3310:	2b2f      	cmp	r3, #47	; 0x2f
    3312:	d00f      	beq.n	3334 <follow_path+0x38>
    3314:	2b5c      	cmp	r3, #92	; 0x5c
    3316:	d00d      	beq.n	3334 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    3318:	2300      	movs	r3, #0
    331a:	9a00      	ldr	r2, [sp, #0]
    331c:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    331e:	782b      	ldrb	r3, [r5, #0]
    3320:	2b1f      	cmp	r3, #31
    3322:	d80a      	bhi.n	333a <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    3324:	2100      	movs	r1, #0
    3326:	0014      	movs	r4, r2
    3328:	0010      	movs	r0, r2
    332a:	4bb2      	ldr	r3, [pc, #712]	; (35f4 <follow_path+0x2f8>)
    332c:	4798      	blx	r3
		dj->dir = 0;
    332e:	2300      	movs	r3, #0
    3330:	6163      	str	r3, [r4, #20]
    3332:	e13c      	b.n	35ae <follow_path+0x2b2>
		path++;
    3334:	3501      	adds	r5, #1
    3336:	e7ef      	b.n	3318 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    3338:	3501      	adds	r5, #1
    333a:	7828      	ldrb	r0, [r5, #0]
    333c:	282f      	cmp	r0, #47	; 0x2f
    333e:	d0fb      	beq.n	3338 <follow_path+0x3c>
    3340:	285c      	cmp	r0, #92	; 0x5c
    3342:	d0f9      	beq.n	3338 <follow_path+0x3c>
	lfn = dj->lfn;
    3344:	9b00      	ldr	r3, [sp, #0]
    3346:	69db      	ldr	r3, [r3, #28]
    3348:	4698      	mov	r8, r3
		w = p[si++];					/* Get a character */
    334a:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    334c:	281f      	cmp	r0, #31
    334e:	d800      	bhi.n	3352 <follow_path+0x56>
    3350:	e13c      	b.n	35cc <follow_path+0x2d0>
    3352:	282f      	cmp	r0, #47	; 0x2f
    3354:	d100      	bne.n	3358 <follow_path+0x5c>
    3356:	e13c      	b.n	35d2 <follow_path+0x2d6>
    3358:	285c      	cmp	r0, #92	; 0x5c
    335a:	d100      	bne.n	335e <follow_path+0x62>
    335c:	e13c      	b.n	35d8 <follow_path+0x2dc>
    335e:	001e      	movs	r6, r3
    3360:	1c6f      	adds	r7, r5, #1
    3362:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    3364:	2380      	movs	r3, #128	; 0x80
    3366:	005b      	lsls	r3, r3, #1
    3368:	4699      	mov	r9, r3
    336a:	46aa      	mov	sl, r5
    336c:	e011      	b.n	3392 <follow_path+0x96>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    336e:	2b00      	cmp	r3, #0
    3370:	d133      	bne.n	33da <follow_path+0xde>
		lfn[di++] = w;					/* Store the Unicode char */
    3372:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    3374:	1c63      	adds	r3, r4, #1
    3376:	7838      	ldrb	r0, [r7, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    3378:	281f      	cmp	r0, #31
    337a:	d91e      	bls.n	33ba <follow_path+0xbe>
    337c:	282f      	cmp	r0, #47	; 0x2f
    337e:	d100      	bne.n	3382 <follow_path+0x86>
    3380:	e12d      	b.n	35de <follow_path+0x2e2>
    3382:	285c      	cmp	r0, #92	; 0x5c
    3384:	d100      	bne.n	3388 <follow_path+0x8c>
    3386:	e143      	b.n	3610 <follow_path+0x314>
    3388:	3602      	adds	r6, #2
    338a:	3701      	adds	r7, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    338c:	454b      	cmp	r3, r9
    338e:	d024      	beq.n	33da <follow_path+0xde>
		w = p[si++];					/* Get a character */
    3390:	001c      	movs	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    3392:	2101      	movs	r1, #1
    3394:	4b98      	ldr	r3, [pc, #608]	; (35f8 <follow_path+0x2fc>)
    3396:	4798      	blx	r3
    3398:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    339a:	d01e      	beq.n	33da <follow_path+0xde>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    339c:	287f      	cmp	r0, #127	; 0x7f
    339e:	d8e8      	bhi.n	3372 <follow_path+0x76>
	while (*str && *str != chr) str++;
    33a0:	2822      	cmp	r0, #34	; 0x22
    33a2:	d100      	bne.n	33a6 <follow_path+0xaa>
    33a4:	e102      	b.n	35ac <follow_path+0x2b0>
    33a6:	232a      	movs	r3, #42	; 0x2a
    33a8:	4a94      	ldr	r2, [pc, #592]	; (35fc <follow_path+0x300>)
    33aa:	b29d      	uxth	r5, r3
    33ac:	428d      	cmp	r5, r1
    33ae:	d0de      	beq.n	336e <follow_path+0x72>
    33b0:	3201      	adds	r2, #1
    33b2:	7813      	ldrb	r3, [r2, #0]
    33b4:	2b00      	cmp	r3, #0
    33b6:	d1f8      	bne.n	33aa <follow_path+0xae>
    33b8:	e7db      	b.n	3372 <follow_path+0x76>
    33ba:	4655      	mov	r5, sl
	*path = &p[si];						/* Return pointer to the next segment */
    33bc:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    33be:	2604      	movs	r6, #4
    33c0:	e110      	b.n	35e4 <follow_path+0x2e8>
		di--;
    33c2:	3c01      	subs	r4, #1
    33c4:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    33c6:	2c00      	cmp	r4, #0
    33c8:	d100      	bne.n	33cc <follow_path+0xd0>
    33ca:	e0ef      	b.n	35ac <follow_path+0x2b0>
		w = lfn[di-1];
    33cc:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    33ce:	2a20      	cmp	r2, #32
    33d0:	d0f7      	beq.n	33c2 <follow_path+0xc6>
    33d2:	2a2e      	cmp	r2, #46	; 0x2e
    33d4:	d0f5      	beq.n	33c2 <follow_path+0xc6>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    33d6:	2c00      	cmp	r4, #0
    33d8:	d101      	bne.n	33de <follow_path+0xe2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    33da:	2006      	movs	r0, #6
	return res;
    33dc:	e0e7      	b.n	35ae <follow_path+0x2b2>
	lfn[di] = 0;						/* LFN is created */
    33de:	0060      	lsls	r0, r4, #1
    33e0:	2300      	movs	r3, #0
    33e2:	4642      	mov	r2, r8
    33e4:	5213      	strh	r3, [r2, r0]
	mem_set(dj->fn, ' ', 11);
    33e6:	9b00      	ldr	r3, [sp, #0]
    33e8:	699b      	ldr	r3, [r3, #24]
    33ea:	0019      	movs	r1, r3
    33ec:	310b      	adds	r1, #11
		*d++ = (BYTE)val;
    33ee:	2220      	movs	r2, #32
    33f0:	701a      	strb	r2, [r3, #0]
    33f2:	3301      	adds	r3, #1
	while (cnt--)
    33f4:	428b      	cmp	r3, r1
    33f6:	d1fb      	bne.n	33f0 <follow_path+0xf4>
    33f8:	4642      	mov	r2, r8
    33fa:	2300      	movs	r3, #0
    33fc:	e001      	b.n	3402 <follow_path+0x106>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    33fe:	3301      	adds	r3, #1
    3400:	3202      	adds	r2, #2
    3402:	8811      	ldrh	r1, [r2, #0]
    3404:	2920      	cmp	r1, #32
    3406:	d0fa      	beq.n	33fe <follow_path+0x102>
    3408:	292e      	cmp	r1, #46	; 0x2e
    340a:	d0f8      	beq.n	33fe <follow_path+0x102>
	if (si) cf |= NS_LOSS | NS_LFN;
    340c:	2b00      	cmp	r3, #0
    340e:	d001      	beq.n	3414 <follow_path+0x118>
    3410:	2203      	movs	r2, #3
    3412:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    3414:	4642      	mov	r2, r8
    3416:	1812      	adds	r2, r2, r0
    3418:	3a02      	subs	r2, #2
    341a:	8812      	ldrh	r2, [r2, #0]
    341c:	2a2e      	cmp	r2, #46	; 0x2e
    341e:	d008      	beq.n	3432 <follow_path+0x136>
    3420:	1f02      	subs	r2, r0, #4
    3422:	4442      	add	r2, r8
    3424:	3c01      	subs	r4, #1
    3426:	2c00      	cmp	r4, #0
    3428:	d003      	beq.n	3432 <follow_path+0x136>
    342a:	3a02      	subs	r2, #2
    342c:	8851      	ldrh	r1, [r2, #2]
    342e:	292e      	cmp	r1, #46	; 0x2e
    3430:	d1f8      	bne.n	3424 <follow_path+0x128>
		dj->fn[i++] = (BYTE)w;
    3432:	2208      	movs	r2, #8
    3434:	4693      	mov	fp, r2
    3436:	2200      	movs	r2, #0
    3438:	4692      	mov	sl, r2
    343a:	4691      	mov	r9, r2
    343c:	e006      	b.n	344c <follow_path+0x150>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    343e:	42a7      	cmp	r7, r4
    3440:	d100      	bne.n	3444 <follow_path+0x148>
    3442:	e0e7      	b.n	3614 <follow_path+0x318>
			cf |= NS_LOSS | NS_LFN; continue;
    3444:	2303      	movs	r3, #3
    3446:	431e      	orrs	r6, r3
    3448:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    344a:	003b      	movs	r3, r7
    344c:	1c5f      	adds	r7, r3, #1
    344e:	005b      	lsls	r3, r3, #1
    3450:	4642      	mov	r2, r8
    3452:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    3454:	2800      	cmp	r0, #0
    3456:	d02b      	beq.n	34b0 <follow_path+0x1b4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    3458:	2820      	cmp	r0, #32
    345a:	d0f3      	beq.n	3444 <follow_path+0x148>
    345c:	282e      	cmp	r0, #46	; 0x2e
    345e:	d0ee      	beq.n	343e <follow_path+0x142>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    3460:	45da      	cmp	sl, fp
    3462:	d219      	bcs.n	3498 <follow_path+0x19c>
    3464:	42a7      	cmp	r7, r4
    3466:	d100      	bne.n	346a <follow_path+0x16e>
    3468:	e0d4      	b.n	3614 <follow_path+0x318>
		if (w >= 0x80) {				/* Non ASCII char */
    346a:	287f      	cmp	r0, #127	; 0x7f
    346c:	d864      	bhi.n	3538 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    346e:	282b      	cmp	r0, #43	; 0x2b
    3470:	d074      	beq.n	355c <follow_path+0x260>
    3472:	232c      	movs	r3, #44	; 0x2c
    3474:	4a62      	ldr	r2, [pc, #392]	; (3600 <follow_path+0x304>)
    3476:	b299      	uxth	r1, r3
    3478:	4281      	cmp	r1, r0
    347a:	d06d      	beq.n	3558 <follow_path+0x25c>
    347c:	3201      	adds	r2, #1
    347e:	7813      	ldrb	r3, [r2, #0]
    3480:	2b00      	cmp	r3, #0
    3482:	d1f8      	bne.n	3476 <follow_path+0x17a>
				if (IsUpper(w)) {		/* ASCII large capital */
    3484:	0003      	movs	r3, r0
    3486:	3b41      	subs	r3, #65	; 0x41
    3488:	b29b      	uxth	r3, r3
    348a:	2b19      	cmp	r3, #25
    348c:	d874      	bhi.n	3578 <follow_path+0x27c>
					b |= 2;
    348e:	2302      	movs	r3, #2
    3490:	464a      	mov	r2, r9
    3492:	431a      	orrs	r2, r3
    3494:	4691      	mov	r9, r2
    3496:	e065      	b.n	3564 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    3498:	465b      	mov	r3, fp
    349a:	2b0b      	cmp	r3, #11
    349c:	d040      	beq.n	3520 <follow_path+0x224>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    349e:	42a7      	cmp	r7, r4
    34a0:	d100      	bne.n	34a4 <follow_path+0x1a8>
    34a2:	e0bb      	b.n	361c <follow_path+0x320>
    34a4:	2303      	movs	r3, #3
    34a6:	431e      	orrs	r6, r3
    34a8:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    34aa:	42a7      	cmp	r7, r4
    34ac:	d800      	bhi.n	34b0 <follow_path+0x1b4>
    34ae:	e0b5      	b.n	361c <follow_path+0x320>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    34b0:	9b00      	ldr	r3, [sp, #0]
    34b2:	699b      	ldr	r3, [r3, #24]
    34b4:	781a      	ldrb	r2, [r3, #0]
    34b6:	2ae5      	cmp	r2, #229	; 0xe5
    34b8:	d03b      	beq.n	3532 <follow_path+0x236>
	if (ni == 8) b <<= 2;
    34ba:	465b      	mov	r3, fp
    34bc:	2b08      	cmp	r3, #8
    34be:	d067      	beq.n	3590 <follow_path+0x294>
    34c0:	230c      	movs	r3, #12
    34c2:	464a      	mov	r2, r9
    34c4:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    34c6:	2b0c      	cmp	r3, #12
    34c8:	d067      	beq.n	359a <follow_path+0x29e>
    34ca:	43d2      	mvns	r2, r2
    34cc:	0792      	lsls	r2, r2, #30
    34ce:	d064      	beq.n	359a <follow_path+0x29e>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    34d0:	07b2      	lsls	r2, r6, #30
    34d2:	d406      	bmi.n	34e2 <follow_path+0x1e6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    34d4:	2203      	movs	r2, #3
    34d6:	4649      	mov	r1, r9
    34d8:	400a      	ands	r2, r1
    34da:	2a01      	cmp	r2, #1
    34dc:	d060      	beq.n	35a0 <follow_path+0x2a4>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    34de:	2b04      	cmp	r3, #4
    34e0:	d061      	beq.n	35a6 <follow_path+0x2aa>
	dj->fn[NS] = cf;	/* SFN is created */
    34e2:	9c00      	ldr	r4, [sp, #0]
    34e4:	69a2      	ldr	r2, [r4, #24]
    34e6:	9201      	str	r2, [sp, #4]
    34e8:	72d6      	strb	r6, [r2, #11]
			res = dir_find(dj);				/* Find it */
    34ea:	0020      	movs	r0, r4
    34ec:	4a45      	ldr	r2, [pc, #276]	; (3604 <follow_path+0x308>)
    34ee:	4790      	blx	r2
			ns = *(dj->fn+NS);
    34f0:	69a3      	ldr	r3, [r4, #24]
    34f2:	9301      	str	r3, [sp, #4]
    34f4:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    34f6:	2800      	cmp	r0, #0
    34f8:	d160      	bne.n	35bc <follow_path+0x2c0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    34fa:	075b      	lsls	r3, r3, #29
    34fc:	d457      	bmi.n	35ae <follow_path+0x2b2>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    34fe:	9800      	ldr	r0, [sp, #0]
    3500:	6942      	ldr	r2, [r0, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    3502:	7ad3      	ldrb	r3, [r2, #11]
    3504:	06db      	lsls	r3, r3, #27
    3506:	d55f      	bpl.n	35c8 <follow_path+0x2cc>
			dj->sclust = LD_CLUST(dir);
    3508:	7d51      	ldrb	r1, [r2, #21]
    350a:	0209      	lsls	r1, r1, #8
    350c:	7d13      	ldrb	r3, [r2, #20]
    350e:	430b      	orrs	r3, r1
    3510:	041b      	lsls	r3, r3, #16
    3512:	7ed1      	ldrb	r1, [r2, #27]
    3514:	0209      	lsls	r1, r1, #8
    3516:	7e92      	ldrb	r2, [r2, #26]
    3518:	430a      	orrs	r2, r1
    351a:	4313      	orrs	r3, r2
    351c:	6083      	str	r3, [r0, #8]
			res = create_name(dj, &path);	/* Get a segment */
    351e:	e70c      	b.n	333a <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    3520:	2303      	movs	r3, #3
    3522:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    3524:	9b00      	ldr	r3, [sp, #0]
    3526:	699b      	ldr	r3, [r3, #24]
    3528:	781a      	ldrb	r2, [r3, #0]
    352a:	2ae5      	cmp	r2, #229	; 0xe5
    352c:	d1c8      	bne.n	34c0 <follow_path+0x1c4>
    352e:	220b      	movs	r2, #11
    3530:	4693      	mov	fp, r2
    3532:	2205      	movs	r2, #5
    3534:	701a      	strb	r2, [r3, #0]
    3536:	e7c0      	b.n	34ba <follow_path+0x1be>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    3538:	2100      	movs	r1, #0
    353a:	4b2f      	ldr	r3, [pc, #188]	; (35f8 <follow_path+0x2fc>)
    353c:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    353e:	2800      	cmp	r0, #0
    3540:	d100      	bne.n	3544 <follow_path+0x248>
    3542:	e075      	b.n	3630 <follow_path+0x334>
    3544:	4b30      	ldr	r3, [pc, #192]	; (3608 <follow_path+0x30c>)
    3546:	469c      	mov	ip, r3
    3548:	4460      	add	r0, ip
    354a:	3880      	subs	r0, #128	; 0x80
    354c:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    354e:	2302      	movs	r3, #2
    3550:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    3552:	2800      	cmp	r0, #0
    3554:	d002      	beq.n	355c <follow_path+0x260>
    3556:	e78a      	b.n	346e <follow_path+0x172>
    3558:	2b00      	cmp	r3, #0
    355a:	d093      	beq.n	3484 <follow_path+0x188>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    355c:	2303      	movs	r3, #3
    355e:	431e      	orrs	r6, r3
    3560:	b2f6      	uxtb	r6, r6
    3562:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    3564:	9b00      	ldr	r3, [sp, #0]
    3566:	699b      	ldr	r3, [r3, #24]
    3568:	9301      	str	r3, [sp, #4]
    356a:	4652      	mov	r2, sl
    356c:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    356e:	003b      	movs	r3, r7
		dj->fn[i++] = (BYTE)w;
    3570:	2201      	movs	r2, #1
    3572:	4694      	mov	ip, r2
    3574:	44e2      	add	sl, ip
    3576:	e769      	b.n	344c <follow_path+0x150>
					if (IsLower(w)) {	/* ASCII small capital */
    3578:	0003      	movs	r3, r0
    357a:	3b61      	subs	r3, #97	; 0x61
    357c:	b29b      	uxth	r3, r3
    357e:	2b19      	cmp	r3, #25
    3580:	d8f0      	bhi.n	3564 <follow_path+0x268>
						b |= 1; w -= 0x20;
    3582:	2301      	movs	r3, #1
    3584:	464a      	mov	r2, r9
    3586:	431a      	orrs	r2, r3
    3588:	4691      	mov	r9, r2
    358a:	3820      	subs	r0, #32
    358c:	b280      	uxth	r0, r0
    358e:	e7e9      	b.n	3564 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    3590:	464b      	mov	r3, r9
    3592:	009b      	lsls	r3, r3, #2
    3594:	b2db      	uxtb	r3, r3
    3596:	4699      	mov	r9, r3
    3598:	e792      	b.n	34c0 <follow_path+0x1c4>
		cf |= NS_LFN;
    359a:	2202      	movs	r2, #2
    359c:	4316      	orrs	r6, r2
    359e:	e797      	b.n	34d0 <follow_path+0x1d4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    35a0:	320f      	adds	r2, #15
    35a2:	4316      	orrs	r6, r2
    35a4:	e79b      	b.n	34de <follow_path+0x1e2>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    35a6:	3304      	adds	r3, #4
    35a8:	431e      	orrs	r6, r3
    35aa:	e79a      	b.n	34e2 <follow_path+0x1e6>
    35ac:	2006      	movs	r0, #6
}
    35ae:	b003      	add	sp, #12
    35b0:	bc3c      	pop	{r2, r3, r4, r5}
    35b2:	4690      	mov	r8, r2
    35b4:	4699      	mov	r9, r3
    35b6:	46a2      	mov	sl, r4
    35b8:	46ab      	mov	fp, r5
    35ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    35bc:	2804      	cmp	r0, #4
    35be:	d1f6      	bne.n	35ae <follow_path+0x2b2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    35c0:	075b      	lsls	r3, r3, #29
    35c2:	d4f4      	bmi.n	35ae <follow_path+0x2b2>
    35c4:	3001      	adds	r0, #1
    35c6:	e7f2      	b.n	35ae <follow_path+0x2b2>
				res = FR_NO_PATH; break;
    35c8:	2005      	movs	r0, #5
    35ca:	e7f0      	b.n	35ae <follow_path+0x2b2>
		w = p[si++];					/* Get a character */
    35cc:	2301      	movs	r3, #1
	si = di = 0;
    35ce:	2400      	movs	r4, #0
    35d0:	e6f4      	b.n	33bc <follow_path+0xc0>
		w = p[si++];					/* Get a character */
    35d2:	2301      	movs	r3, #1
	si = di = 0;
    35d4:	2400      	movs	r4, #0
    35d6:	e003      	b.n	35e0 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    35d8:	2301      	movs	r3, #1
	si = di = 0;
    35da:	2400      	movs	r4, #0
    35dc:	e000      	b.n	35e0 <follow_path+0x2e4>
    35de:	4655      	mov	r5, sl
	*path = &p[si];						/* Return pointer to the next segment */
    35e0:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    35e2:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    35e4:	2c00      	cmp	r4, #0
    35e6:	d0e1      	beq.n	35ac <follow_path+0x2b0>
    35e8:	4b08      	ldr	r3, [pc, #32]	; (360c <follow_path+0x310>)
    35ea:	18e3      	adds	r3, r4, r3
    35ec:	005b      	lsls	r3, r3, #1
    35ee:	4443      	add	r3, r8
    35f0:	e6ec      	b.n	33cc <follow_path+0xd0>
    35f2:	46c0      	nop			; (mov r8, r8)
    35f4:	00002c29 	.word	0x00002c29
    35f8:	000023e1 	.word	0x000023e1
    35fc:	00009eb5 	.word	0x00009eb5
    3600:	00009ec1 	.word	0x00009ec1
    3604:	00003165 	.word	0x00003165
    3608:	00009e34 	.word	0x00009e34
    360c:	7fffffff 	.word	0x7fffffff
    3610:	4655      	mov	r5, sl
    3612:	e7e5      	b.n	35e0 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    3614:	465b      	mov	r3, fp
    3616:	2b0b      	cmp	r3, #11
    3618:	d100      	bne.n	361c <follow_path+0x320>
    361a:	e781      	b.n	3520 <follow_path+0x224>
			b <<= 2; continue;
    361c:	464b      	mov	r3, r9
    361e:	009b      	lsls	r3, r3, #2
    3620:	b2db      	uxtb	r3, r3
    3622:	4699      	mov	r9, r3
    3624:	0023      	movs	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
    3626:	220b      	movs	r2, #11
    3628:	4693      	mov	fp, r2
    362a:	3a03      	subs	r2, #3
    362c:	4692      	mov	sl, r2
    362e:	e70d      	b.n	344c <follow_path+0x150>
			cf |= NS_LFN;				/* Force create LFN entry */
    3630:	2302      	movs	r3, #2
    3632:	431e      	orrs	r6, r3
    3634:	e792      	b.n	355c <follow_path+0x260>
    3636:	46c0      	nop			; (mov r8, r8)

00003638 <dir_register>:
{
    3638:	b5f0      	push	{r4, r5, r6, r7, lr}
    363a:	46de      	mov	lr, fp
    363c:	4657      	mov	r7, sl
    363e:	464e      	mov	r6, r9
    3640:	4645      	mov	r5, r8
    3642:	b5e0      	push	{r5, r6, r7, lr}
    3644:	b089      	sub	sp, #36	; 0x24
    3646:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    3648:	6987      	ldr	r7, [r0, #24]
    364a:	69c3      	ldr	r3, [r0, #28]
    364c:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    364e:	ad05      	add	r5, sp, #20
    3650:	220c      	movs	r2, #12
    3652:	0039      	movs	r1, r7
    3654:	0028      	movs	r0, r5
    3656:	4ba8      	ldr	r3, [pc, #672]	; (38f8 <dir_register+0x2c0>)
    3658:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    365a:	7aeb      	ldrb	r3, [r5, #11]
    365c:	07db      	lsls	r3, r3, #31
    365e:	d400      	bmi.n	3662 <dir_register+0x2a>
    3660:	e070      	b.n	3744 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    3662:	2300      	movs	r3, #0
    3664:	72fb      	strb	r3, [r7, #11]
    3666:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    3668:	220b      	movs	r2, #11
    366a:	a905      	add	r1, sp, #20
    366c:	0038      	movs	r0, r7
    366e:	4ba2      	ldr	r3, [pc, #648]	; (38f8 <dir_register+0x2c0>)
    3670:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    3672:	2301      	movs	r3, #1
		ns[i--] = c;
    3674:	ad03      	add	r5, sp, #12
    3676:	001e      	movs	r6, r3
    3678:	46a0      	mov	r8, r4
    367a:	e049      	b.n	3710 <dir_register+0xd8>
    367c:	3801      	subs	r0, #1
    367e:	1829      	adds	r1, r5, r0
    3680:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    3682:	091b      	lsrs	r3, r3, #4
    3684:	b29b      	uxth	r3, r3
	} while (seq);
    3686:	2b00      	cmp	r3, #0
    3688:	d007      	beq.n	369a <dir_register+0x62>
		c = (seq % 16) + '0';
    368a:	0021      	movs	r1, r4
    368c:	4019      	ands	r1, r3
    368e:	000a      	movs	r2, r1
    3690:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    3692:	2a39      	cmp	r2, #57	; 0x39
    3694:	d9f2      	bls.n	367c <dir_register+0x44>
    3696:	3207      	adds	r2, #7
    3698:	e7f0      	b.n	367c <dir_register+0x44>
	ns[i] = '~';
    369a:	337e      	adds	r3, #126	; 0x7e
    369c:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    369e:	2800      	cmp	r0, #0
    36a0:	d00a      	beq.n	36b8 <dir_register+0x80>
    36a2:	783b      	ldrb	r3, [r7, #0]
    36a4:	2b20      	cmp	r3, #32
    36a6:	d009      	beq.n	36bc <dir_register+0x84>
    36a8:	2300      	movs	r3, #0
    36aa:	3301      	adds	r3, #1
    36ac:	4298      	cmp	r0, r3
    36ae:	d007      	beq.n	36c0 <dir_register+0x88>
    36b0:	5cfa      	ldrb	r2, [r7, r3]
    36b2:	2a20      	cmp	r2, #32
    36b4:	d1f9      	bne.n	36aa <dir_register+0x72>
    36b6:	e009      	b.n	36cc <dir_register+0x94>
    36b8:	0003      	movs	r3, r0
    36ba:	e007      	b.n	36cc <dir_register+0x94>
    36bc:	2300      	movs	r3, #0
    36be:	e005      	b.n	36cc <dir_register+0x94>
    36c0:	0003      	movs	r3, r0
    36c2:	e003      	b.n	36cc <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    36c4:	54fa      	strb	r2, [r7, r3]
    36c6:	3301      	adds	r3, #1
	} while (j < 8);
    36c8:	2b07      	cmp	r3, #7
    36ca:	d805      	bhi.n	36d8 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    36cc:	2220      	movs	r2, #32
    36ce:	2807      	cmp	r0, #7
    36d0:	d8f8      	bhi.n	36c4 <dir_register+0x8c>
    36d2:	5c2a      	ldrb	r2, [r5, r0]
    36d4:	3001      	adds	r0, #1
    36d6:	e7f5      	b.n	36c4 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    36d8:	4640      	mov	r0, r8
    36da:	4b88      	ldr	r3, [pc, #544]	; (38fc <dir_register+0x2c4>)
    36dc:	4798      	blx	r3
			if (res != FR_OK) break;
    36de:	2800      	cmp	r0, #0
    36e0:	d11c      	bne.n	371c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    36e2:	3601      	adds	r6, #1
    36e4:	b2b6      	uxth	r6, r6
    36e6:	2e64      	cmp	r6, #100	; 0x64
    36e8:	d015      	beq.n	3716 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    36ea:	220b      	movs	r2, #11
    36ec:	a905      	add	r1, sp, #20
    36ee:	0038      	movs	r0, r7
    36f0:	4b81      	ldr	r3, [pc, #516]	; (38f8 <dir_register+0x2c0>)
    36f2:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    36f4:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    36f6:	2e05      	cmp	r6, #5
    36f8:	d90a      	bls.n	3710 <dir_register+0xd8>
    36fa:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    36fc:	085a      	lsrs	r2, r3, #1
    36fe:	03db      	lsls	r3, r3, #15
    3700:	4313      	orrs	r3, r2
    3702:	880a      	ldrh	r2, [r1, #0]
    3704:	189b      	adds	r3, r3, r2
    3706:	b29b      	uxth	r3, r3
    3708:	3102      	adds	r1, #2
    370a:	880a      	ldrh	r2, [r1, #0]
    370c:	2a00      	cmp	r2, #0
    370e:	d1f5      	bne.n	36fc <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    3710:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    3712:	240f      	movs	r4, #15
    3714:	e7b9      	b.n	368a <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    3716:	2307      	movs	r3, #7
    3718:	4698      	mov	r8, r3
    371a:	e006      	b.n	372a <dir_register+0xf2>
    371c:	4644      	mov	r4, r8
    371e:	4680      	mov	r8, r0
    3720:	2e64      	cmp	r6, #100	; 0x64
    3722:	d100      	bne.n	3726 <dir_register+0xee>
    3724:	e0a5      	b.n	3872 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    3726:	2804      	cmp	r0, #4
    3728:	d007      	beq.n	373a <dir_register+0x102>
}
    372a:	4640      	mov	r0, r8
    372c:	b009      	add	sp, #36	; 0x24
    372e:	bc3c      	pop	{r2, r3, r4, r5}
    3730:	4690      	mov	r8, r2
    3732:	4699      	mov	r9, r3
    3734:	46a2      	mov	sl, r4
    3736:	46ab      	mov	fp, r5
    3738:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    373a:	ab05      	add	r3, sp, #20
    373c:	7adb      	ldrb	r3, [r3, #11]
    373e:	72fb      	strb	r3, [r7, #11]
    3740:	4653      	mov	r3, sl
    3742:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    3744:	ab05      	add	r3, sp, #20
    3746:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    3748:	2201      	movs	r2, #1
    374a:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    374c:	079b      	lsls	r3, r3, #30
    374e:	d511      	bpl.n	3774 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    3750:	4653      	mov	r3, sl
    3752:	881b      	ldrh	r3, [r3, #0]
    3754:	2b00      	cmp	r3, #0
    3756:	d01b      	beq.n	3790 <dir_register+0x158>
    3758:	2000      	movs	r0, #0
    375a:	4652      	mov	r2, sl
    375c:	3001      	adds	r0, #1
    375e:	b280      	uxth	r0, r0
    3760:	0043      	lsls	r3, r0, #1
    3762:	5a9b      	ldrh	r3, [r3, r2]
    3764:	2b00      	cmp	r3, #0
    3766:	d1f9      	bne.n	375c <dir_register+0x124>
		ne = (ne + 25) / 13;
    3768:	3019      	adds	r0, #25
    376a:	210d      	movs	r1, #13
    376c:	4b64      	ldr	r3, [pc, #400]	; (3900 <dir_register+0x2c8>)
    376e:	4798      	blx	r3
    3770:	b283      	uxth	r3, r0
    3772:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    3774:	2100      	movs	r1, #0
    3776:	0020      	movs	r0, r4
    3778:	4b62      	ldr	r3, [pc, #392]	; (3904 <dir_register+0x2cc>)
    377a:	4798      	blx	r3
    377c:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    377e:	2800      	cmp	r0, #0
    3780:	d1d3      	bne.n	372a <dir_register+0xf2>
    3782:	4682      	mov	sl, r0
    3784:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    3786:	4f60      	ldr	r7, [pc, #384]	; (3908 <dir_register+0x2d0>)
			n = 0;					/* Not a blank entry. Restart to search */
    3788:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    378a:	4b60      	ldr	r3, [pc, #384]	; (390c <dir_register+0x2d4>)
    378c:	4699      	mov	r9, r3
    378e:	e00b      	b.n	37a8 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    3790:	2000      	movs	r0, #0
    3792:	e7e9      	b.n	3768 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    3794:	1c6b      	adds	r3, r5, #1
    3796:	b29b      	uxth	r3, r3
    3798:	459b      	cmp	fp, r3
    379a:	d06d      	beq.n	3878 <dir_register+0x240>
    379c:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    379e:	2101      	movs	r1, #1
    37a0:	0020      	movs	r0, r4
    37a2:	47c8      	blx	r9
	} while (res == FR_OK);
    37a4:	2800      	cmp	r0, #0
    37a6:	d112      	bne.n	37ce <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    37a8:	6921      	ldr	r1, [r4, #16]
    37aa:	6820      	ldr	r0, [r4, #0]
    37ac:	47b8      	blx	r7
		if (res != FR_OK) break;
    37ae:	2800      	cmp	r0, #0
    37b0:	d000      	beq.n	37b4 <dir_register+0x17c>
    37b2:	e09b      	b.n	38ec <dir_register+0x2b4>
		c = *dj->dir;				/* Check the entry status */
    37b4:	6963      	ldr	r3, [r4, #20]
    37b6:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    37b8:	2be5      	cmp	r3, #229	; 0xe5
    37ba:	d001      	beq.n	37c0 <dir_register+0x188>
    37bc:	2b00      	cmp	r3, #0
    37be:	d104      	bne.n	37ca <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    37c0:	2d00      	cmp	r5, #0
    37c2:	d1e7      	bne.n	3794 <dir_register+0x15c>
    37c4:	88e3      	ldrh	r3, [r4, #6]
    37c6:	469a      	mov	sl, r3
    37c8:	e7e4      	b.n	3794 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    37ca:	0035      	movs	r5, r6
    37cc:	e7e7      	b.n	379e <dir_register+0x166>
    37ce:	4680      	mov	r8, r0
    37d0:	e7ab      	b.n	372a <dir_register+0xf2>
		res = dir_sdi(dj, is);
    37d2:	4651      	mov	r1, sl
    37d4:	0020      	movs	r0, r4
    37d6:	4b4b      	ldr	r3, [pc, #300]	; (3904 <dir_register+0x2cc>)
    37d8:	4798      	blx	r3
    37da:	4680      	mov	r8, r0
		if (res == FR_OK) {
    37dc:	2800      	cmp	r0, #0
    37de:	d1a4      	bne.n	372a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    37e0:	69a0      	ldr	r0, [r4, #24]
    37e2:	4b4b      	ldr	r3, [pc, #300]	; (3910 <dir_register+0x2d8>)
    37e4:	4798      	blx	r3
    37e6:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    37e8:	46a8      	mov	r8, r5
    37ea:	e01f      	b.n	382c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    37ec:	0022      	movs	r2, r4
    37ee:	e06a      	b.n	38c6 <dir_register+0x28e>
    37f0:	465e      	mov	r6, fp
    37f2:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    37f4:	4947      	ldr	r1, [pc, #284]	; (3914 <dir_register+0x2dc>)
    37f6:	428b      	cmp	r3, r1
    37f8:	d003      	beq.n	3802 <dir_register+0x1ca>
    37fa:	0052      	lsls	r2, r2, #1
    37fc:	5b93      	ldrh	r3, [r2, r6]
    37fe:	2b00      	cmp	r3, #0
    3800:	d103      	bne.n	380a <dir_register+0x1d2>
    3802:	2340      	movs	r3, #64	; 0x40
    3804:	464a      	mov	r2, r9
    3806:	431a      	orrs	r2, r3
    3808:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    380a:	464b      	mov	r3, r9
    380c:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    380e:	2301      	movs	r3, #1
    3810:	6822      	ldr	r2, [r4, #0]
    3812:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    3814:	2100      	movs	r1, #0
    3816:	0020      	movs	r0, r4
    3818:	4b3c      	ldr	r3, [pc, #240]	; (390c <dir_register+0x2d4>)
    381a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    381c:	2800      	cmp	r0, #0
    381e:	d169      	bne.n	38f4 <dir_register+0x2bc>
    3820:	4645      	mov	r5, r8
    3822:	3d01      	subs	r5, #1
    3824:	b2ab      	uxth	r3, r5
    3826:	4698      	mov	r8, r3
    3828:	2b00      	cmp	r3, #0
    382a:	d027      	beq.n	387c <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    382c:	6921      	ldr	r1, [r4, #16]
    382e:	6820      	ldr	r0, [r4, #0]
    3830:	4b35      	ldr	r3, [pc, #212]	; (3908 <dir_register+0x2d0>)
    3832:	4798      	blx	r3
				if (res != FR_OK) break;
    3834:	2800      	cmp	r0, #0
    3836:	d15b      	bne.n	38f0 <dir_register+0x2b8>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    3838:	69e6      	ldr	r6, [r4, #28]
    383a:	6960      	ldr	r0, [r4, #20]
    383c:	4643      	mov	r3, r8
    383e:	466a      	mov	r2, sp
    3840:	70d3      	strb	r3, [r2, #3]
    3842:	78d3      	ldrb	r3, [r2, #3]
    3844:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    3846:	7913      	ldrb	r3, [r2, #4]
    3848:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    384a:	230f      	movs	r3, #15
    384c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    384e:	2300      	movs	r3, #0
    3850:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    3852:	7683      	strb	r3, [r0, #26]
    3854:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    3856:	464b      	mov	r3, r9
    3858:	3b01      	subs	r3, #1
    385a:	005a      	lsls	r2, r3, #1
    385c:	18d2      	adds	r2, r2, r3
    385e:	0092      	lsls	r2, r2, #2
    3860:	18d2      	adds	r2, r2, r3
    3862:	492d      	ldr	r1, [pc, #180]	; (3918 <dir_register+0x2e0>)
    3864:	000d      	movs	r5, r1
    3866:	350d      	adds	r5, #13
	s = wc = 0;
    3868:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    386a:	4f2a      	ldr	r7, [pc, #168]	; (3914 <dir_register+0x2dc>)
    386c:	46b3      	mov	fp, r6
    386e:	46a4      	mov	ip, r4
    3870:	e02c      	b.n	38cc <dir_register+0x294>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    3872:	2307      	movs	r3, #7
    3874:	4698      	mov	r8, r3
    3876:	e758      	b.n	372a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    3878:	2b01      	cmp	r3, #1
    387a:	d8aa      	bhi.n	37d2 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    387c:	6921      	ldr	r1, [r4, #16]
    387e:	6820      	ldr	r0, [r4, #0]
    3880:	4b21      	ldr	r3, [pc, #132]	; (3908 <dir_register+0x2d0>)
    3882:	4798      	blx	r3
    3884:	4680      	mov	r8, r0
		if (res == FR_OK) {
    3886:	2800      	cmp	r0, #0
    3888:	d000      	beq.n	388c <dir_register+0x254>
    388a:	e74e      	b.n	372a <dir_register+0xf2>
			dir = dj->dir;
    388c:	6965      	ldr	r5, [r4, #20]
    388e:	002b      	movs	r3, r5
    3890:	0029      	movs	r1, r5
    3892:	3120      	adds	r1, #32
		*d++ = (BYTE)val;
    3894:	2200      	movs	r2, #0
    3896:	701a      	strb	r2, [r3, #0]
    3898:	3301      	adds	r3, #1
	while (cnt--)
    389a:	4299      	cmp	r1, r3
    389c:	d1fb      	bne.n	3896 <dir_register+0x25e>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    389e:	220b      	movs	r2, #11
    38a0:	69a1      	ldr	r1, [r4, #24]
    38a2:	0028      	movs	r0, r5
    38a4:	4b14      	ldr	r3, [pc, #80]	; (38f8 <dir_register+0x2c0>)
    38a6:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    38a8:	69a3      	ldr	r3, [r4, #24]
    38aa:	7ada      	ldrb	r2, [r3, #11]
    38ac:	2318      	movs	r3, #24
    38ae:	4013      	ands	r3, r2
    38b0:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    38b2:	6823      	ldr	r3, [r4, #0]
    38b4:	2201      	movs	r2, #1
    38b6:	711a      	strb	r2, [r3, #4]
    38b8:	e737      	b.n	372a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    38ba:	780c      	ldrb	r4, [r1, #0]
    38bc:	26ff      	movs	r6, #255	; 0xff
    38be:	5506      	strb	r6, [r0, r4]
    38c0:	1904      	adds	r4, r0, r4
    38c2:	26ff      	movs	r6, #255	; 0xff
    38c4:	7066      	strb	r6, [r4, #1]
    38c6:	3101      	adds	r1, #1
	} while (++s < 13);
    38c8:	428d      	cmp	r5, r1
    38ca:	d091      	beq.n	37f0 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    38cc:	42bb      	cmp	r3, r7
    38ce:	d0f4      	beq.n	38ba <dir_register+0x282>
    38d0:	1c54      	adds	r4, r2, #1
    38d2:	0052      	lsls	r2, r2, #1
    38d4:	465b      	mov	r3, fp
    38d6:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    38d8:	780a      	ldrb	r2, [r1, #0]
    38da:	5483      	strb	r3, [r0, r2]
    38dc:	1882      	adds	r2, r0, r2
    38de:	0a1e      	lsrs	r6, r3, #8
    38e0:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    38e2:	2b00      	cmp	r3, #0
    38e4:	d182      	bne.n	37ec <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    38e6:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    38e8:	003b      	movs	r3, r7
    38ea:	e7ec      	b.n	38c6 <dir_register+0x28e>
    38ec:	4680      	mov	r8, r0
    38ee:	e71c      	b.n	372a <dir_register+0xf2>
    38f0:	4680      	mov	r8, r0
    38f2:	e71a      	b.n	372a <dir_register+0xf2>
    38f4:	4680      	mov	r8, r0
    38f6:	e718      	b.n	372a <dir_register+0xf2>
    38f8:	00002465 	.word	0x00002465
    38fc:	00003165 	.word	0x00003165
    3900:	0000658d 	.word	0x0000658d
    3904:	00002c29 	.word	0x00002c29
    3908:	00002a8d 	.word	0x00002a8d
    390c:	0000303d 	.word	0x0000303d
    3910:	00002491 	.word	0x00002491
    3914:	0000ffff 	.word	0x0000ffff
    3918:	00009e24 	.word	0x00009e24

0000391c <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    391c:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    391e:	2800      	cmp	r0, #0
    3920:	d001      	beq.n	3926 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    3922:	0018      	movs	r0, r3
    3924:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    3926:	4b07      	ldr	r3, [pc, #28]	; (3944 <f_mount+0x28>)
    3928:	681b      	ldr	r3, [r3, #0]
	if (rfs) {
    392a:	2b00      	cmp	r3, #0
    392c:	d001      	beq.n	3932 <f_mount+0x16>
		rfs->fs_type = 0;		/* Clear old fs object */
    392e:	2200      	movs	r2, #0
    3930:	701a      	strb	r2, [r3, #0]
	if (fs) {
    3932:	2900      	cmp	r1, #0
    3934:	d001      	beq.n	393a <f_mount+0x1e>
		fs->fs_type = 0;		/* Clear new fs object */
    3936:	2300      	movs	r3, #0
    3938:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    393a:	4b02      	ldr	r3, [pc, #8]	; (3944 <f_mount+0x28>)
    393c:	6019      	str	r1, [r3, #0]
	return FR_OK;
    393e:	2300      	movs	r3, #0
    3940:	e7ef      	b.n	3922 <f_mount+0x6>
    3942:	46c0      	nop			; (mov r8, r8)
    3944:	200000fc 	.word	0x200000fc

00003948 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    3948:	b5f0      	push	{r4, r5, r6, r7, lr}
    394a:	46c6      	mov	lr, r8
    394c:	b500      	push	{lr}
    394e:	4c59      	ldr	r4, [pc, #356]	; (3ab4 <f_open+0x16c>)
    3950:	44a5      	add	sp, r4
    3952:	0005      	movs	r5, r0
    3954:	9101      	str	r1, [sp, #4]
    3956:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    3958:	2300      	movs	r3, #0
    395a:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    395c:	261f      	movs	r6, #31
    395e:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    3960:	221e      	movs	r2, #30
    3962:	403a      	ands	r2, r7
    3964:	a985      	add	r1, sp, #532	; 0x214
    3966:	a801      	add	r0, sp, #4
    3968:	4b53      	ldr	r3, [pc, #332]	; (3ab8 <f_open+0x170>)
    396a:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    396c:	ab82      	add	r3, sp, #520	; 0x208
    396e:	938b      	str	r3, [sp, #556]	; 0x22c
    3970:	ab02      	add	r3, sp, #8
    3972:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    3974:	2800      	cmp	r0, #0
    3976:	d006      	beq.n	3986 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    3978:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    397a:	231c      	movs	r3, #28
    397c:	423b      	tst	r3, r7
    397e:	d145      	bne.n	3a0c <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    3980:	2800      	cmp	r0, #0
    3982:	d13d      	bne.n	3a00 <f_open+0xb8>
    3984:	e00c      	b.n	39a0 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    3986:	9901      	ldr	r1, [sp, #4]
    3988:	a885      	add	r0, sp, #532	; 0x214
    398a:	4b4c      	ldr	r3, [pc, #304]	; (3abc <f_open+0x174>)
    398c:	4798      	blx	r3
	dir = dj.dir;
    398e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    3990:	2800      	cmp	r0, #0
    3992:	d1f2      	bne.n	397a <f_open+0x32>
		if (!dir)	/* Current dir itself */
    3994:	2c00      	cmp	r4, #0
    3996:	d100      	bne.n	399a <f_open+0x52>
    3998:	e086      	b.n	3aa8 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    399a:	231c      	movs	r3, #28
    399c:	423b      	tst	r3, r7
    399e:	d146      	bne.n	3a2e <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    39a0:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    39a2:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    39a4:	06da      	lsls	r2, r3, #27
    39a6:	d42b      	bmi.n	3a00 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    39a8:	07ba      	lsls	r2, r7, #30
    39aa:	d502      	bpl.n	39b2 <f_open+0x6a>
					res = FR_DENIED;
    39ac:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    39ae:	07db      	lsls	r3, r3, #31
    39b0:	d426      	bmi.n	3a00 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    39b2:	073b      	lsls	r3, r7, #28
    39b4:	d501      	bpl.n	39ba <f_open+0x72>
			mode |= FA__WRITTEN;
    39b6:	2320      	movs	r3, #32
    39b8:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    39ba:	9b85      	ldr	r3, [sp, #532]	; 0x214
    39bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    39be:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    39c0:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    39c2:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    39c4:	7d62      	ldrb	r2, [r4, #21]
    39c6:	0212      	lsls	r2, r2, #8
    39c8:	7d23      	ldrb	r3, [r4, #20]
    39ca:	4313      	orrs	r3, r2
    39cc:	041b      	lsls	r3, r3, #16
    39ce:	7ee1      	ldrb	r1, [r4, #27]
    39d0:	0209      	lsls	r1, r1, #8
    39d2:	7ea2      	ldrb	r2, [r4, #26]
    39d4:	430a      	orrs	r2, r1
    39d6:	4313      	orrs	r3, r2
    39d8:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    39da:	7fe3      	ldrb	r3, [r4, #31]
    39dc:	061b      	lsls	r3, r3, #24
    39de:	7fa2      	ldrb	r2, [r4, #30]
    39e0:	0412      	lsls	r2, r2, #16
    39e2:	4313      	orrs	r3, r2
    39e4:	7f22      	ldrb	r2, [r4, #28]
    39e6:	4313      	orrs	r3, r2
    39e8:	7f62      	ldrb	r2, [r4, #29]
    39ea:	0212      	lsls	r2, r2, #8
    39ec:	4313      	orrs	r3, r2
    39ee:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    39f0:	2300      	movs	r3, #0
    39f2:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    39f4:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    39f6:	9b85      	ldr	r3, [sp, #532]	; 0x214
    39f8:	602b      	str	r3, [r5, #0]
    39fa:	88db      	ldrh	r3, [r3, #6]
    39fc:	80ab      	strh	r3, [r5, #4]
    39fe:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    3a00:	238e      	movs	r3, #142	; 0x8e
    3a02:	009b      	lsls	r3, r3, #2
    3a04:	449d      	add	sp, r3
    3a06:	bc04      	pop	{r2}
    3a08:	4690      	mov	r8, r2
    3a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    3a0c:	2804      	cmp	r0, #4
    3a0e:	d005      	beq.n	3a1c <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    3a10:	2308      	movs	r3, #8
    3a12:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    3a14:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    3a16:	2800      	cmp	r0, #0
    3a18:	d0d3      	beq.n	39c2 <f_open+0x7a>
    3a1a:	e7f1      	b.n	3a00 <f_open+0xb8>
				res = dir_register(&dj);
    3a1c:	a885      	add	r0, sp, #532	; 0x214
    3a1e:	4b28      	ldr	r3, [pc, #160]	; (3ac0 <f_open+0x178>)
    3a20:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    3a22:	2308      	movs	r3, #8
    3a24:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    3a26:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    3a28:	2800      	cmp	r0, #0
    3a2a:	d008      	beq.n	3a3e <f_open+0xf6>
    3a2c:	e7e8      	b.n	3a00 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    3a2e:	7ae3      	ldrb	r3, [r4, #11]
    3a30:	2211      	movs	r2, #17
				res = FR_DENIED;
    3a32:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    3a34:	421a      	tst	r2, r3
    3a36:	d1e3      	bne.n	3a00 <f_open+0xb8>
					res = FR_EXIST;
    3a38:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    3a3a:	077b      	lsls	r3, r7, #29
    3a3c:	d4e0      	bmi.n	3a00 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    3a3e:	0733      	lsls	r3, r6, #28
    3a40:	d5bb      	bpl.n	39ba <f_open+0x72>
			dw = get_fattime();					/* Created time */
    3a42:	4b20      	ldr	r3, [pc, #128]	; (3ac4 <f_open+0x17c>)
    3a44:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    3a46:	73a0      	strb	r0, [r4, #14]
    3a48:	0a03      	lsrs	r3, r0, #8
    3a4a:	73e3      	strb	r3, [r4, #15]
    3a4c:	0c03      	lsrs	r3, r0, #16
    3a4e:	7423      	strb	r3, [r4, #16]
    3a50:	0e00      	lsrs	r0, r0, #24
    3a52:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    3a54:	2300      	movs	r3, #0
    3a56:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    3a58:	7723      	strb	r3, [r4, #28]
    3a5a:	7763      	strb	r3, [r4, #29]
    3a5c:	77a3      	strb	r3, [r4, #30]
    3a5e:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    3a60:	7d62      	ldrb	r2, [r4, #21]
    3a62:	0212      	lsls	r2, r2, #8
    3a64:	7d27      	ldrb	r7, [r4, #20]
    3a66:	4317      	orrs	r7, r2
    3a68:	043f      	lsls	r7, r7, #16
    3a6a:	7ee1      	ldrb	r1, [r4, #27]
    3a6c:	0209      	lsls	r1, r1, #8
    3a6e:	7ea2      	ldrb	r2, [r4, #26]
    3a70:	430a      	orrs	r2, r1
    3a72:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    3a74:	76a3      	strb	r3, [r4, #26]
    3a76:	76e3      	strb	r3, [r4, #27]
    3a78:	7523      	strb	r3, [r4, #20]
    3a7a:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    3a7c:	9885      	ldr	r0, [sp, #532]	; 0x214
    3a7e:	3301      	adds	r3, #1
    3a80:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    3a82:	2f00      	cmp	r7, #0
    3a84:	d097      	beq.n	39b6 <f_open+0x6e>
				dw = dj.fs->winsect;
    3a86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3a88:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    3a8a:	0039      	movs	r1, r7
    3a8c:	4b0e      	ldr	r3, [pc, #56]	; (3ac8 <f_open+0x180>)
    3a8e:	4798      	blx	r3
				if (res == FR_OK) {
    3a90:	2800      	cmp	r0, #0
    3a92:	d1b5      	bne.n	3a00 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    3a94:	9885      	ldr	r0, [sp, #532]	; 0x214
    3a96:	3f01      	subs	r7, #1
    3a98:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    3a9a:	4641      	mov	r1, r8
    3a9c:	4b0b      	ldr	r3, [pc, #44]	; (3acc <f_open+0x184>)
    3a9e:	4798      	blx	r3
	if (res == FR_OK) {
    3aa0:	2800      	cmp	r0, #0
    3aa2:	d100      	bne.n	3aa6 <f_open+0x15e>
    3aa4:	e787      	b.n	39b6 <f_open+0x6e>
    3aa6:	e7ab      	b.n	3a00 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    3aa8:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    3aaa:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    3aac:	423b      	tst	r3, r7
    3aae:	d0b2      	beq.n	3a16 <f_open+0xce>
			res = FR_INVALID_NAME;
    3ab0:	2006      	movs	r0, #6
    3ab2:	e7ad      	b.n	3a10 <f_open+0xc8>
    3ab4:	fffffdc8 	.word	0xfffffdc8
    3ab8:	00002581 	.word	0x00002581
    3abc:	000032fd 	.word	0x000032fd
    3ac0:	00003639 	.word	0x00003639
    3ac4:	00002391 	.word	0x00002391
    3ac8:	00002ecd 	.word	0x00002ecd
    3acc:	00002a8d 	.word	0x00002a8d

00003ad0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    3ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ad2:	46de      	mov	lr, fp
    3ad4:	4657      	mov	r7, sl
    3ad6:	464e      	mov	r6, r9
    3ad8:	4645      	mov	r5, r8
    3ada:	b5e0      	push	{r5, r6, r7, lr}
    3adc:	b083      	sub	sp, #12
    3ade:	0004      	movs	r4, r0
    3ae0:	000d      	movs	r5, r1
    3ae2:	0016      	movs	r6, r2
    3ae4:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    3ae6:	2300      	movs	r3, #0
    3ae8:	464a      	mov	r2, r9
    3aea:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    3aec:	8881      	ldrh	r1, [r0, #4]
    3aee:	6800      	ldr	r0, [r0, #0]
    3af0:	4b7d      	ldr	r3, [pc, #500]	; (3ce8 <f_write+0x218>)
    3af2:	4798      	blx	r3
    3af4:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3af6:	2800      	cmp	r0, #0
    3af8:	d000      	beq.n	3afc <f_write+0x2c>
    3afa:	e0ec      	b.n	3cd6 <f_write+0x206>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    3afc:	79a3      	ldrb	r3, [r4, #6]
    3afe:	b25a      	sxtb	r2, r3
    3b00:	2a00      	cmp	r2, #0
    3b02:	da00      	bge.n	3b06 <f_write+0x36>
    3b04:	e0e5      	b.n	3cd2 <f_write+0x202>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    3b06:	079b      	lsls	r3, r3, #30
    3b08:	d402      	bmi.n	3b10 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    3b0a:	2307      	movs	r3, #7
    3b0c:	9300      	str	r3, [sp, #0]
    3b0e:	e0e2      	b.n	3cd6 <f_write+0x206>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    3b10:	68e3      	ldr	r3, [r4, #12]
    3b12:	199a      	adds	r2, r3, r6
    3b14:	4293      	cmp	r3, r2
    3b16:	d810      	bhi.n	3b3a <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    3b18:	2e00      	cmp	r6, #0
    3b1a:	d00e      	beq.n	3b3a <f_write+0x6a>
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    3b1c:	002f      	movs	r7, r5
    3b1e:	e07f      	b.n	3c20 <f_write+0x150>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3b20:	2100      	movs	r1, #0
    3b22:	4b72      	ldr	r3, [pc, #456]	; (3cec <f_write+0x21c>)
    3b24:	4798      	blx	r3
    3b26:	0003      	movs	r3, r0
    3b28:	6120      	str	r0, [r4, #16]
    3b2a:	e003      	b.n	3b34 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    3b2c:	6961      	ldr	r1, [r4, #20]
    3b2e:	4b6f      	ldr	r3, [pc, #444]	; (3cec <f_write+0x21c>)
    3b30:	4798      	blx	r3
    3b32:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    3b34:	2b00      	cmp	r3, #0
    3b36:	d000      	beq.n	3b3a <f_write+0x6a>
    3b38:	e085      	b.n	3c46 <f_write+0x176>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3b3a:	68a3      	ldr	r3, [r4, #8]
    3b3c:	68e2      	ldr	r2, [r4, #12]
    3b3e:	4293      	cmp	r3, r2
    3b40:	d900      	bls.n	3b44 <f_write+0x74>
    3b42:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    3b44:	79a3      	ldrb	r3, [r4, #6]
    3b46:	2220      	movs	r2, #32
    3b48:	4313      	orrs	r3, r2
    3b4a:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    3b4c:	e0c3      	b.n	3cd6 <f_write+0x206>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3b4e:	79a2      	ldrb	r2, [r4, #6]
    3b50:	3b81      	subs	r3, #129	; 0x81
    3b52:	4313      	orrs	r3, r2
    3b54:	71a3      	strb	r3, [r4, #6]
    3b56:	2302      	movs	r3, #2
    3b58:	9300      	str	r3, [sp, #0]
    3b5a:	e0bc      	b.n	3cd6 <f_write+0x206>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3b5c:	79a2      	ldrb	r2, [r4, #6]
    3b5e:	3b7f      	subs	r3, #127	; 0x7f
    3b60:	4313      	orrs	r3, r2
    3b62:	71a3      	strb	r3, [r4, #6]
    3b64:	2301      	movs	r3, #1
    3b66:	9300      	str	r3, [sp, #0]
    3b68:	e0b5      	b.n	3cd6 <f_write+0x206>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    3b6a:	0021      	movs	r1, r4
    3b6c:	3124      	adds	r1, #36	; 0x24
    3b6e:	6823      	ldr	r3, [r4, #0]
    3b70:	7858      	ldrb	r0, [r3, #1]
    3b72:	2301      	movs	r3, #1
    3b74:	69a2      	ldr	r2, [r4, #24]
    3b76:	4d5e      	ldr	r5, [pc, #376]	; (3cf0 <f_write+0x220>)
    3b78:	47a8      	blx	r5
    3b7a:	2800      	cmp	r0, #0
    3b7c:	d104      	bne.n	3b88 <f_write+0xb8>
				fp->flag &= ~FA__DIRTY;
    3b7e:	79a3      	ldrb	r3, [r4, #6]
    3b80:	2240      	movs	r2, #64	; 0x40
    3b82:	4393      	bics	r3, r2
    3b84:	71a3      	strb	r3, [r4, #6]
    3b86:	e067      	b.n	3c58 <f_write+0x188>
					ABORT(fp->fs, FR_DISK_ERR);
    3b88:	79a2      	ldrb	r2, [r4, #6]
    3b8a:	2380      	movs	r3, #128	; 0x80
    3b8c:	425b      	negs	r3, r3
    3b8e:	4313      	orrs	r3, r2
    3b90:	71a3      	strb	r3, [r4, #6]
    3b92:	2301      	movs	r3, #1
    3b94:	9300      	str	r3, [sp, #0]
    3b96:	e09e      	b.n	3cd6 <f_write+0x206>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3b98:	79a2      	ldrb	r2, [r4, #6]
    3b9a:	2380      	movs	r3, #128	; 0x80
    3b9c:	425b      	negs	r3, r3
    3b9e:	4313      	orrs	r3, r2
    3ba0:	71a3      	strb	r3, [r4, #6]
    3ba2:	2302      	movs	r3, #2
    3ba4:	9300      	str	r3, [sp, #0]
    3ba6:	e096      	b.n	3cd6 <f_write+0x206>
					ABORT(fp->fs, FR_DISK_ERR);
    3ba8:	79a2      	ldrb	r2, [r4, #6]
    3baa:	2380      	movs	r3, #128	; 0x80
    3bac:	425b      	negs	r3, r3
    3bae:	4313      	orrs	r3, r2
    3bb0:	71a3      	strb	r3, [r4, #6]
    3bb2:	2301      	movs	r3, #1
    3bb4:	9300      	str	r3, [sp, #0]
    3bb6:	e08e      	b.n	3cd6 <f_write+0x206>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    3bb8:	0240      	lsls	r0, r0, #9
    3bba:	1839      	adds	r1, r7, r0
    3bbc:	0020      	movs	r0, r4
    3bbe:	3024      	adds	r0, #36	; 0x24
    3bc0:	2280      	movs	r2, #128	; 0x80
    3bc2:	0092      	lsls	r2, r2, #2
    3bc4:	4b4b      	ldr	r3, [pc, #300]	; (3cf4 <f_write+0x224>)
    3bc6:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
    3bc8:	79a3      	ldrb	r3, [r4, #6]
    3bca:	2240      	movs	r2, #64	; 0x40
    3bcc:	4393      	bics	r3, r2
    3bce:	71a3      	strb	r3, [r4, #6]
    3bd0:	e06a      	b.n	3ca8 <f_write+0x1d8>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    3bd2:	69a3      	ldr	r3, [r4, #24]
    3bd4:	4598      	cmp	r8, r3
    3bd6:	d003      	beq.n	3be0 <f_write+0x110>
				if (fp->fptr < fp->fsize &&
    3bd8:	68a3      	ldr	r3, [r4, #8]
    3bda:	68e2      	ldr	r2, [r4, #12]
    3bdc:	4293      	cmp	r3, r2
    3bde:	d366      	bcc.n	3cae <f_write+0x1de>
			fp->dsect = sect;
    3be0:	4643      	mov	r3, r8
    3be2:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    3be4:	68a3      	ldr	r3, [r4, #8]
    3be6:	05d8      	lsls	r0, r3, #23
    3be8:	0dc0      	lsrs	r0, r0, #23
    3bea:	2580      	movs	r5, #128	; 0x80
    3bec:	00ad      	lsls	r5, r5, #2
    3bee:	1a2d      	subs	r5, r5, r0
    3bf0:	42b5      	cmp	r5, r6
    3bf2:	d900      	bls.n	3bf6 <f_write+0x126>
    3bf4:	0035      	movs	r5, r6
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3bf6:	3024      	adds	r0, #36	; 0x24
    3bf8:	1820      	adds	r0, r4, r0
    3bfa:	002a      	movs	r2, r5
    3bfc:	0039      	movs	r1, r7
    3bfe:	4b3d      	ldr	r3, [pc, #244]	; (3cf4 <f_write+0x224>)
    3c00:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
    3c02:	79a3      	ldrb	r3, [r4, #6]
    3c04:	2240      	movs	r2, #64	; 0x40
    3c06:	4313      	orrs	r3, r2
    3c08:	71a3      	strb	r3, [r4, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3c0a:	197f      	adds	r7, r7, r5
    3c0c:	68a3      	ldr	r3, [r4, #8]
    3c0e:	195b      	adds	r3, r3, r5
    3c10:	60a3      	str	r3, [r4, #8]
    3c12:	464b      	mov	r3, r9
    3c14:	681b      	ldr	r3, [r3, #0]
    3c16:	195b      	adds	r3, r3, r5
    3c18:	464a      	mov	r2, r9
    3c1a:	6013      	str	r3, [r2, #0]
    3c1c:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    3c1e:	d08c      	beq.n	3b3a <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    3c20:	68a3      	ldr	r3, [r4, #8]
    3c22:	05da      	lsls	r2, r3, #23
    3c24:	d1de      	bne.n	3be4 <f_write+0x114>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    3c26:	6820      	ldr	r0, [r4, #0]
    3c28:	7882      	ldrb	r2, [r0, #2]
    3c2a:	3a01      	subs	r2, #1
    3c2c:	0a5d      	lsrs	r5, r3, #9
    3c2e:	4015      	ands	r5, r2
    3c30:	b2ea      	uxtb	r2, r5
    3c32:	4693      	mov	fp, r2
			if (!csect) {					/* On the cluster boundary? */
    3c34:	2a00      	cmp	r2, #0
    3c36:	d10c      	bne.n	3c52 <f_write+0x182>
				if (fp->fptr == 0) {		/* On the top of the file? */
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d000      	beq.n	3c3e <f_write+0x16e>
    3c3c:	e776      	b.n	3b2c <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    3c3e:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    3c40:	2b00      	cmp	r3, #0
    3c42:	d100      	bne.n	3c46 <f_write+0x176>
    3c44:	e76c      	b.n	3b20 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3c46:	2b01      	cmp	r3, #1
    3c48:	d100      	bne.n	3c4c <f_write+0x17c>
    3c4a:	e780      	b.n	3b4e <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3c4c:	1c5a      	adds	r2, r3, #1
    3c4e:	d085      	beq.n	3b5c <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    3c50:	6163      	str	r3, [r4, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    3c52:	79a3      	ldrb	r3, [r4, #6]
    3c54:	065b      	lsls	r3, r3, #25
    3c56:	d488      	bmi.n	3b6a <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    3c58:	6823      	ldr	r3, [r4, #0]
    3c5a:	469a      	mov	sl, r3
    3c5c:	6961      	ldr	r1, [r4, #20]
    3c5e:	0018      	movs	r0, r3
    3c60:	4b25      	ldr	r3, [pc, #148]	; (3cf8 <f_write+0x228>)
    3c62:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3c64:	2800      	cmp	r0, #0
    3c66:	d097      	beq.n	3b98 <f_write+0xc8>
			sect += csect;
    3c68:	4680      	mov	r8, r0
    3c6a:	4658      	mov	r0, fp
    3c6c:	4684      	mov	ip, r0
    3c6e:	44d8      	add	r8, fp
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    3c70:	0a73      	lsrs	r3, r6, #9
    3c72:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    3c74:	d0ad      	beq.n	3bd2 <f_write+0x102>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3c76:	4653      	mov	r3, sl
    3c78:	789b      	ldrb	r3, [r3, #2]
    3c7a:	465a      	mov	r2, fp
    3c7c:	4462      	add	r2, ip
    3c7e:	429a      	cmp	r2, r3
    3c80:	d901      	bls.n	3c86 <f_write+0x1b6>
					cc = fp->fs->csize - csect;
    3c82:	1a1b      	subs	r3, r3, r0
    3c84:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    3c86:	465b      	mov	r3, fp
    3c88:	466a      	mov	r2, sp
    3c8a:	71d3      	strb	r3, [r2, #7]
    3c8c:	79d3      	ldrb	r3, [r2, #7]
    3c8e:	4652      	mov	r2, sl
    3c90:	7850      	ldrb	r0, [r2, #1]
    3c92:	4642      	mov	r2, r8
    3c94:	0039      	movs	r1, r7
    3c96:	4d16      	ldr	r5, [pc, #88]	; (3cf0 <f_write+0x220>)
    3c98:	47a8      	blx	r5
    3c9a:	2800      	cmp	r0, #0
    3c9c:	d184      	bne.n	3ba8 <f_write+0xd8>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    3c9e:	69a3      	ldr	r3, [r4, #24]
    3ca0:	4642      	mov	r2, r8
    3ca2:	1a98      	subs	r0, r3, r2
    3ca4:	4583      	cmp	fp, r0
    3ca6:	d887      	bhi.n	3bb8 <f_write+0xe8>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    3ca8:	465b      	mov	r3, fp
    3caa:	025d      	lsls	r5, r3, #9
				continue;
    3cac:	e7ad      	b.n	3c0a <f_write+0x13a>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    3cae:	0021      	movs	r1, r4
    3cb0:	3124      	adds	r1, #36	; 0x24
    3cb2:	4653      	mov	r3, sl
    3cb4:	7858      	ldrb	r0, [r3, #1]
    3cb6:	2301      	movs	r3, #1
    3cb8:	4642      	mov	r2, r8
    3cba:	4d10      	ldr	r5, [pc, #64]	; (3cfc <f_write+0x22c>)
    3cbc:	47a8      	blx	r5
				if (fp->fptr < fp->fsize &&
    3cbe:	2800      	cmp	r0, #0
    3cc0:	d08e      	beq.n	3be0 <f_write+0x110>
						ABORT(fp->fs, FR_DISK_ERR);
    3cc2:	79a2      	ldrb	r2, [r4, #6]
    3cc4:	2380      	movs	r3, #128	; 0x80
    3cc6:	425b      	negs	r3, r3
    3cc8:	4313      	orrs	r3, r2
    3cca:	71a3      	strb	r3, [r4, #6]
    3ccc:	2301      	movs	r3, #1
    3cce:	9300      	str	r3, [sp, #0]
    3cd0:	e001      	b.n	3cd6 <f_write+0x206>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3cd2:	2302      	movs	r3, #2
    3cd4:	9300      	str	r3, [sp, #0]
}
    3cd6:	9800      	ldr	r0, [sp, #0]
    3cd8:	b003      	add	sp, #12
    3cda:	bc3c      	pop	{r2, r3, r4, r5}
    3cdc:	4690      	mov	r8, r2
    3cde:	4699      	mov	r9, r3
    3ce0:	46a2      	mov	sl, r4
    3ce2:	46ab      	mov	fp, r5
    3ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	000024ad 	.word	0x000024ad
    3cec:	00002e09 	.word	0x00002e09
    3cf0:	000022a1 	.word	0x000022a1
    3cf4:	00002465 	.word	0x00002465
    3cf8:	00002479 	.word	0x00002479
    3cfc:	0000221d 	.word	0x0000221d

00003d00 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    3d00:	b570      	push	{r4, r5, r6, lr}
    3d02:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3d04:	8881      	ldrh	r1, [r0, #4]
    3d06:	6800      	ldr	r0, [r0, #0]
    3d08:	4b25      	ldr	r3, [pc, #148]	; (3da0 <f_sync+0xa0>)
    3d0a:	4798      	blx	r3
	if (res == FR_OK) {
    3d0c:	2800      	cmp	r0, #0
    3d0e:	d11a      	bne.n	3d46 <f_sync+0x46>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3d10:	79a3      	ldrb	r3, [r4, #6]
    3d12:	069a      	lsls	r2, r3, #26
    3d14:	d517      	bpl.n	3d46 <f_sync+0x46>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    3d16:	065b      	lsls	r3, r3, #25
    3d18:	d50f      	bpl.n	3d3a <f_sync+0x3a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    3d1a:	0021      	movs	r1, r4
    3d1c:	3124      	adds	r1, #36	; 0x24
    3d1e:	6823      	ldr	r3, [r4, #0]
    3d20:	7858      	ldrb	r0, [r3, #1]
    3d22:	2301      	movs	r3, #1
    3d24:	69a2      	ldr	r2, [r4, #24]
    3d26:	4d1f      	ldr	r5, [pc, #124]	; (3da4 <f_sync+0xa4>)
    3d28:	47a8      	blx	r5
    3d2a:	0003      	movs	r3, r0
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    3d2c:	2001      	movs	r0, #1
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d109      	bne.n	3d46 <f_sync+0x46>
				fp->flag &= ~FA__DIRTY;
    3d32:	79a3      	ldrb	r3, [r4, #6]
    3d34:	2240      	movs	r2, #64	; 0x40
    3d36:	4393      	bics	r3, r2
    3d38:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3d3a:	69e1      	ldr	r1, [r4, #28]
    3d3c:	6820      	ldr	r0, [r4, #0]
    3d3e:	4b1a      	ldr	r3, [pc, #104]	; (3da8 <f_sync+0xa8>)
    3d40:	4798      	blx	r3
			if (res == FR_OK) {
    3d42:	2800      	cmp	r0, #0
    3d44:	d000      	beq.n	3d48 <f_sync+0x48>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    3d46:	bd70      	pop	{r4, r5, r6, pc}
				dir = fp->dir_ptr;
    3d48:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3d4a:	7aeb      	ldrb	r3, [r5, #11]
    3d4c:	2220      	movs	r2, #32
    3d4e:	4313      	orrs	r3, r2
    3d50:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    3d52:	7b23      	ldrb	r3, [r4, #12]
    3d54:	772b      	strb	r3, [r5, #28]
    3d56:	89a3      	ldrh	r3, [r4, #12]
    3d58:	0a1b      	lsrs	r3, r3, #8
    3d5a:	776b      	strb	r3, [r5, #29]
    3d5c:	89e3      	ldrh	r3, [r4, #14]
    3d5e:	77ab      	strb	r3, [r5, #30]
    3d60:	7be3      	ldrb	r3, [r4, #15]
    3d62:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    3d64:	7c23      	ldrb	r3, [r4, #16]
    3d66:	76ab      	strb	r3, [r5, #26]
    3d68:	8a23      	ldrh	r3, [r4, #16]
    3d6a:	0a1b      	lsrs	r3, r3, #8
    3d6c:	76eb      	strb	r3, [r5, #27]
    3d6e:	8a63      	ldrh	r3, [r4, #18]
    3d70:	752b      	strb	r3, [r5, #20]
    3d72:	8a63      	ldrh	r3, [r4, #18]
    3d74:	0a1b      	lsrs	r3, r3, #8
    3d76:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    3d78:	4b0c      	ldr	r3, [pc, #48]	; (3dac <f_sync+0xac>)
    3d7a:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    3d7c:	75a8      	strb	r0, [r5, #22]
    3d7e:	0a03      	lsrs	r3, r0, #8
    3d80:	75eb      	strb	r3, [r5, #23]
    3d82:	0c03      	lsrs	r3, r0, #16
    3d84:	762b      	strb	r3, [r5, #24]
    3d86:	0e00      	lsrs	r0, r0, #24
    3d88:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    3d8a:	79a3      	ldrb	r3, [r4, #6]
    3d8c:	2220      	movs	r2, #32
    3d8e:	4393      	bics	r3, r2
    3d90:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    3d92:	2301      	movs	r3, #1
    3d94:	6822      	ldr	r2, [r4, #0]
    3d96:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    3d98:	6820      	ldr	r0, [r4, #0]
    3d9a:	4b05      	ldr	r3, [pc, #20]	; (3db0 <f_sync+0xb0>)
    3d9c:	4798      	blx	r3
    3d9e:	e7d2      	b.n	3d46 <f_sync+0x46>
    3da0:	000024ad 	.word	0x000024ad
    3da4:	000022a1 	.word	0x000022a1
    3da8:	00002a8d 	.word	0x00002a8d
    3dac:	00002391 	.word	0x00002391
    3db0:	00002f45 	.word	0x00002f45

00003db4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3db4:	b510      	push	{r4, lr}
    3db6:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    3db8:	4b03      	ldr	r3, [pc, #12]	; (3dc8 <f_close+0x14>)
    3dba:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    3dbc:	2800      	cmp	r0, #0
    3dbe:	d101      	bne.n	3dc4 <f_close+0x10>
    3dc0:	2300      	movs	r3, #0
    3dc2:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    3dc4:	bd10      	pop	{r4, pc}
    3dc6:	46c0      	nop			; (mov r8, r8)
    3dc8:	00003d01 	.word	0x00003d01

00003dcc <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3dcc:	b530      	push	{r4, r5, lr}
    3dce:	4c12      	ldr	r4, [pc, #72]	; (3e18 <f_stat+0x4c>)
    3dd0:	44a5      	add	sp, r4
    3dd2:	9001      	str	r0, [sp, #4]
    3dd4:	000d      	movs	r5, r1
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    3dd6:	2200      	movs	r2, #0
    3dd8:	a985      	add	r1, sp, #532	; 0x214
    3dda:	a801      	add	r0, sp, #4
    3ddc:	4b0f      	ldr	r3, [pc, #60]	; (3e1c <f_stat+0x50>)
    3dde:	4798      	blx	r3
    3de0:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    3de2:	d004      	beq.n	3dee <f_stat+0x22>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    3de4:	0020      	movs	r0, r4
    3de6:	238f      	movs	r3, #143	; 0x8f
    3de8:	009b      	lsls	r3, r3, #2
    3dea:	449d      	add	sp, r3
    3dec:	bd30      	pop	{r4, r5, pc}
		INIT_BUF(dj);
    3dee:	ab82      	add	r3, sp, #520	; 0x208
    3df0:	938b      	str	r3, [sp, #556]	; 0x22c
    3df2:	ab02      	add	r3, sp, #8
    3df4:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
    3df6:	9901      	ldr	r1, [sp, #4]
    3df8:	a885      	add	r0, sp, #532	; 0x214
    3dfa:	4b09      	ldr	r3, [pc, #36]	; (3e20 <f_stat+0x54>)
    3dfc:	4798      	blx	r3
    3dfe:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {				/* Follow completed */
    3e00:	d1f0      	bne.n	3de4 <f_stat+0x18>
			if (dj.dir)		/* Found an object */
    3e02:	9b8a      	ldr	r3, [sp, #552]	; 0x228
    3e04:	2b00      	cmp	r3, #0
    3e06:	d004      	beq.n	3e12 <f_stat+0x46>
				get_fileinfo(&dj, fno);
    3e08:	0029      	movs	r1, r5
    3e0a:	a885      	add	r0, sp, #532	; 0x214
    3e0c:	4b05      	ldr	r3, [pc, #20]	; (3e24 <f_stat+0x58>)
    3e0e:	4798      	blx	r3
    3e10:	e7e8      	b.n	3de4 <f_stat+0x18>
				res = FR_INVALID_NAME;
    3e12:	2406      	movs	r4, #6
    3e14:	e7e6      	b.n	3de4 <f_stat+0x18>
    3e16:	46c0      	nop			; (mov r8, r8)
    3e18:	fffffdc4 	.word	0xfffffdc4
    3e1c:	00002581 	.word	0x00002581
    3e20:	000032fd 	.word	0x000032fd
    3e24:	00002929 	.word	0x00002929

00003e28 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    3e28:	b510      	push	{r4, lr}
    3e2a:	b082      	sub	sp, #8
    3e2c:	000c      	movs	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    3e2e:	466b      	mov	r3, sp
    3e30:	7018      	strb	r0, [r3, #0]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    3e32:	ab01      	add	r3, sp, #4
    3e34:	2201      	movs	r2, #1
    3e36:	4669      	mov	r1, sp
    3e38:	0020      	movs	r0, r4
    3e3a:	4c05      	ldr	r4, [pc, #20]	; (3e50 <f_putc+0x28>)
    3e3c:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    3e3e:	9b01      	ldr	r3, [sp, #4]
    3e40:	1e58      	subs	r0, r3, #1
    3e42:	1e43      	subs	r3, r0, #1
    3e44:	4198      	sbcs	r0, r3
    3e46:	4240      	negs	r0, r0
    3e48:	2301      	movs	r3, #1
    3e4a:	4318      	orrs	r0, r3
}
    3e4c:	b002      	add	sp, #8
    3e4e:	bd10      	pop	{r4, pc}
    3e50:	00003ad1 	.word	0x00003ad1

00003e54 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    3e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e56:	0006      	movs	r6, r0
    3e58:	000d      	movs	r5, r1
	int n;


	for (n = 0; *str; str++, n++) {
    3e5a:	7800      	ldrb	r0, [r0, #0]
    3e5c:	2800      	cmp	r0, #0
    3e5e:	d00b      	beq.n	3e78 <f_puts+0x24>
    3e60:	2400      	movs	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
    3e62:	4f06      	ldr	r7, [pc, #24]	; (3e7c <f_puts+0x28>)
    3e64:	0029      	movs	r1, r5
    3e66:	47b8      	blx	r7
    3e68:	1c43      	adds	r3, r0, #1
    3e6a:	d004      	beq.n	3e76 <f_puts+0x22>
	for (n = 0; *str; str++, n++) {
    3e6c:	3401      	adds	r4, #1
    3e6e:	5d30      	ldrb	r0, [r6, r4]
    3e70:	2800      	cmp	r0, #0
    3e72:	d1f7      	bne.n	3e64 <f_puts+0x10>
    3e74:	0020      	movs	r0, r4
	}
	return n;
}
    3e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (n = 0; *str; str++, n++) {
    3e78:	2000      	movs	r0, #0
    3e7a:	e7fc      	b.n	3e76 <f_puts+0x22>
    3e7c:	00003e29 	.word	0x00003e29

00003e80 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
    3e80:	6803      	ldr	r3, [r0, #0]
    3e82:	4a0a      	ldr	r2, [pc, #40]	; (3eac <_can_enable_peripheral_clock+0x2c>)
    3e84:	4293      	cmp	r3, r2
    3e86:	d003      	beq.n	3e90 <_can_enable_peripheral_clock+0x10>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
    3e88:	4a09      	ldr	r2, [pc, #36]	; (3eb0 <_can_enable_peripheral_clock+0x30>)
    3e8a:	4293      	cmp	r3, r2
    3e8c:	d007      	beq.n	3e9e <_can_enable_peripheral_clock+0x1e>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
    3e8e:	4770      	bx	lr
	MCLK->AHBMASK.reg |= ahb_mask;
    3e90:	4a08      	ldr	r2, [pc, #32]	; (3eb4 <_can_enable_peripheral_clock+0x34>)
    3e92:	6911      	ldr	r1, [r2, #16]
    3e94:	2380      	movs	r3, #128	; 0x80
    3e96:	005b      	lsls	r3, r3, #1
    3e98:	430b      	orrs	r3, r1
    3e9a:	6113      	str	r3, [r2, #16]
    3e9c:	e7f7      	b.n	3e8e <_can_enable_peripheral_clock+0xe>
    3e9e:	4a05      	ldr	r2, [pc, #20]	; (3eb4 <_can_enable_peripheral_clock+0x34>)
    3ea0:	6911      	ldr	r1, [r2, #16]
    3ea2:	2380      	movs	r3, #128	; 0x80
    3ea4:	009b      	lsls	r3, r3, #2
    3ea6:	430b      	orrs	r3, r1
    3ea8:	6113      	str	r3, [r2, #16]
    3eaa:	e7f0      	b.n	3e8e <_can_enable_peripheral_clock+0xe>
    3eac:	42001c00 	.word	0x42001c00
    3eb0:	42002000 	.word	0x42002000
    3eb4:	40000800 	.word	0x40000800

00003eb8 <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
    3eb8:	b570      	push	{r4, r5, r6, lr}
    3eba:	000c      	movs	r4, r1
    3ebc:	0015      	movs	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    3ebe:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
    3ec0:	4ba5      	ldr	r3, [pc, #660]	; (4158 <can_init+0x2a0>)
    3ec2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3ec4:	4ba5      	ldr	r3, [pc, #660]	; (415c <can_init+0x2a4>)
    3ec6:	2200      	movs	r2, #0
    3ec8:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    3eca:	782a      	ldrb	r2, [r5, #0]
    3ecc:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
    3ece:	4ba4      	ldr	r3, [pc, #656]	; (4160 <can_init+0x2a8>)
    3ed0:	429c      	cmp	r4, r3
    3ed2:	d100      	bne.n	3ed6 <can_init+0x1e>
    3ed4:	e0c6      	b.n	4064 <can_init+0x1ac>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
    3ed6:	4ba3      	ldr	r3, [pc, #652]	; (4164 <can_init+0x2ac>)
    3ed8:	429c      	cmp	r4, r3
    3eda:	d100      	bne.n	3ede <can_init+0x26>
    3edc:	e0ff      	b.n	40de <can_init+0x226>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    3ede:	69a3      	ldr	r3, [r4, #24]
    3ee0:	2202      	movs	r2, #2
    3ee2:	4313      	orrs	r3, r2
    3ee4:	61a3      	str	r3, [r4, #24]
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
    3ee6:	2300      	movs	r3, #0
    3ee8:	22bc      	movs	r2, #188	; 0xbc
    3eea:	50a3      	str	r3, [r4, r2]
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
    3eec:	320c      	adds	r2, #12
    3eee:	50a3      	str	r3, [r4, r2]
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
    3ef0:	4b9d      	ldr	r3, [pc, #628]	; (4168 <can_init+0x2b0>)
    3ef2:	61e3      	str	r3, [r4, #28]
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
    3ef4:	4b9d      	ldr	r3, [pc, #628]	; (416c <can_init+0x2b4>)
    3ef6:	60e3      	str	r3, [r4, #12]
	if (config->tdc_enable) {
    3ef8:	7bab      	ldrb	r3, [r5, #14]
    3efa:	2b00      	cmp	r3, #0
    3efc:	d004      	beq.n	3f08 <can_init+0x50>
		hw->DBTP.reg |= CAN_DBTP_TDC;
    3efe:	68e2      	ldr	r2, [r4, #12]
    3f00:	2380      	movs	r3, #128	; 0x80
    3f02:	041b      	lsls	r3, r3, #16
    3f04:	4313      	orrs	r3, r2
    3f06:	60e3      	str	r3, [r4, #12]
	if (config->run_in_standby) {
    3f08:	786b      	ldrb	r3, [r5, #1]
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	d003      	beq.n	3f16 <can_init+0x5e>
		hw->MRCFG.reg |= 0x01<<6;
    3f0e:	68a3      	ldr	r3, [r4, #8]
    3f10:	2240      	movs	r2, #64	; 0x40
    3f12:	4313      	orrs	r3, r2
    3f14:	60a3      	str	r3, [r4, #8]
	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
    3f16:	6962      	ldr	r2, [r4, #20]
    3f18:	78ab      	ldrb	r3, [r5, #2]
    3f1a:	4313      	orrs	r3, r2
    3f1c:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
    3f1e:	78eb      	ldrb	r3, [r5, #3]
    3f20:	2b00      	cmp	r3, #0
    3f22:	d004      	beq.n	3f2e <can_init+0x76>
		hw->CCCR.reg |= CAN_CCCR_TXP;
    3f24:	69a2      	ldr	r2, [r4, #24]
    3f26:	2380      	movs	r3, #128	; 0x80
    3f28:	01db      	lsls	r3, r3, #7
    3f2a:	4313      	orrs	r3, r2
    3f2c:	61a3      	str	r3, [r4, #24]
	if (config->edge_filtering) {
    3f2e:	792b      	ldrb	r3, [r5, #4]
    3f30:	2b00      	cmp	r3, #0
    3f32:	d004      	beq.n	3f3e <can_init+0x86>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
    3f34:	69a2      	ldr	r2, [r4, #24]
    3f36:	2380      	movs	r3, #128	; 0x80
    3f38:	019b      	lsls	r3, r3, #6
    3f3a:	4313      	orrs	r3, r2
    3f3c:	61a3      	str	r3, [r4, #24]
	if (config->protocol_exception_handling) {
    3f3e:	796b      	ldrb	r3, [r5, #5]
    3f40:	2b00      	cmp	r3, #0
    3f42:	d004      	beq.n	3f4e <can_init+0x96>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
    3f44:	69a2      	ldr	r2, [r4, #24]
    3f46:	2380      	movs	r3, #128	; 0x80
    3f48:	015b      	lsls	r3, r3, #5
    3f4a:	4313      	orrs	r3, r2
    3f4c:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
    3f4e:	79ab      	ldrb	r3, [r5, #6]
    3f50:	2b00      	cmp	r3, #0
    3f52:	d103      	bne.n	3f5c <can_init+0xa4>
		hw->CCCR.reg |= CAN_CCCR_DAR;
    3f54:	69a3      	ldr	r3, [r4, #24]
    3f56:	2240      	movs	r2, #64	; 0x40
    3f58:	4313      	orrs	r3, r2
    3f5a:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
    3f5c:	79eb      	ldrb	r3, [r5, #7]
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d003      	beq.n	3f6a <can_init+0xb2>
		hw->CCCR.reg |= CAN_CCCR_CSR;
    3f62:	69a3      	ldr	r3, [r4, #24]
    3f64:	2210      	movs	r2, #16
    3f66:	4313      	orrs	r3, r2
    3f68:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_acknowledge) {
    3f6a:	7a2b      	ldrb	r3, [r5, #8]
    3f6c:	2b00      	cmp	r3, #0
    3f6e:	d003      	beq.n	3f78 <can_init+0xc0>
		hw->CCCR.reg |= CAN_CCCR_CSA;
    3f70:	69a3      	ldr	r3, [r4, #24]
    3f72:	2208      	movs	r2, #8
    3f74:	4313      	orrs	r3, r2
    3f76:	61a3      	str	r3, [r4, #24]
	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
    3f78:	7a6b      	ldrb	r3, [r5, #9]
    3f7a:	041b      	lsls	r3, r3, #16
    3f7c:	22f0      	movs	r2, #240	; 0xf0
    3f7e:	0312      	lsls	r2, r2, #12
    3f80:	4013      	ands	r3, r2
    3f82:	2201      	movs	r2, #1
    3f84:	4313      	orrs	r3, r2
    3f86:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
    3f88:	7b2b      	ldrb	r3, [r5, #12]
    3f8a:	7b6a      	ldrb	r2, [r5, #13]
    3f8c:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    3f8e:	896a      	ldrh	r2, [r5, #10]
    3f90:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
    3f92:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    3f94:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    3f96:	7beb      	ldrb	r3, [r5, #15]
    3f98:	021b      	lsls	r3, r3, #8
    3f9a:	22fe      	movs	r2, #254	; 0xfe
    3f9c:	01d2      	lsls	r2, r2, #7
    3f9e:	4013      	ands	r3, r2
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
    3fa0:	7c29      	ldrb	r1, [r5, #16]
    3fa2:	227f      	movs	r2, #127	; 0x7f
    3fa4:	400a      	ands	r2, r1
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    3fa6:	4313      	orrs	r3, r2
    3fa8:	64a3      	str	r3, [r4, #72]	; 0x48
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    3faa:	7c6a      	ldrb	r2, [r5, #17]
    3fac:	0112      	lsls	r2, r2, #4
    3fae:	2330      	movs	r3, #48	; 0x30
    3fb0:	4013      	ands	r3, r2
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
    3fb2:	7ca9      	ldrb	r1, [r5, #18]
    3fb4:	0089      	lsls	r1, r1, #2
    3fb6:	220c      	movs	r2, #12
    3fb8:	400a      	ands	r2, r1
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    3fba:	4313      	orrs	r3, r2
    3fbc:	2280      	movs	r2, #128	; 0x80
    3fbe:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_standard_reject) {
    3fc0:	7ceb      	ldrb	r3, [r5, #19]
    3fc2:	2b00      	cmp	r3, #0
    3fc4:	d003      	beq.n	3fce <can_init+0x116>
		hw->GFC.reg |= CAN_GFC_RRFS;
    3fc6:	58a3      	ldr	r3, [r4, r2]
    3fc8:	2102      	movs	r1, #2
    3fca:	430b      	orrs	r3, r1
    3fcc:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_extended_reject) {
    3fce:	7d2b      	ldrb	r3, [r5, #20]
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	d004      	beq.n	3fde <can_init+0x126>
		hw->GFC.reg |= CAN_GFC_RRFE;
    3fd4:	2280      	movs	r2, #128	; 0x80
    3fd6:	58a3      	ldr	r3, [r4, r2]
    3fd8:	2101      	movs	r1, #1
    3fda:	430b      	orrs	r3, r1
    3fdc:	50a3      	str	r3, [r4, r2]
	hw->XIDAM.reg = config->extended_id_mask;
    3fde:	2390      	movs	r3, #144	; 0x90
    3fe0:	69aa      	ldr	r2, [r5, #24]
    3fe2:	50e2      	str	r2, [r4, r3]
	if (config->rx_fifo_0_overwrite) {
    3fe4:	7f2b      	ldrb	r3, [r5, #28]
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	d005      	beq.n	3ff6 <can_init+0x13e>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
    3fea:	22a0      	movs	r2, #160	; 0xa0
    3fec:	58a1      	ldr	r1, [r4, r2]
    3fee:	2380      	movs	r3, #128	; 0x80
    3ff0:	061b      	lsls	r3, r3, #24
    3ff2:	430b      	orrs	r3, r1
    3ff4:	50a3      	str	r3, [r4, r2]
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
    3ff6:	22a0      	movs	r2, #160	; 0xa0
    3ff8:	58a1      	ldr	r1, [r4, r2]
    3ffa:	7f6b      	ldrb	r3, [r5, #29]
    3ffc:	061b      	lsls	r3, r3, #24
    3ffe:	20fe      	movs	r0, #254	; 0xfe
    4000:	05c0      	lsls	r0, r0, #23
    4002:	4003      	ands	r3, r0
    4004:	430b      	orrs	r3, r1
    4006:	50a3      	str	r3, [r4, r2]
	if (config->rx_fifo_1_overwrite) {
    4008:	7fab      	ldrb	r3, [r5, #30]
    400a:	2b00      	cmp	r3, #0
    400c:	d005      	beq.n	401a <can_init+0x162>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
    400e:	3210      	adds	r2, #16
    4010:	58a1      	ldr	r1, [r4, r2]
    4012:	2380      	movs	r3, #128	; 0x80
    4014:	061b      	lsls	r3, r3, #24
    4016:	430b      	orrs	r3, r1
    4018:	50a3      	str	r3, [r4, r2]
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
    401a:	22b0      	movs	r2, #176	; 0xb0
    401c:	58a1      	ldr	r1, [r4, r2]
    401e:	7feb      	ldrb	r3, [r5, #31]
    4020:	061b      	lsls	r3, r3, #24
    4022:	20fe      	movs	r0, #254	; 0xfe
    4024:	05c0      	lsls	r0, r0, #23
    4026:	4003      	ands	r3, r0
    4028:	430b      	orrs	r3, r1
    402a:	50a3      	str	r3, [r4, r2]
	if (config->tx_queue_mode) {
    402c:	2320      	movs	r3, #32
    402e:	5ceb      	ldrb	r3, [r5, r3]
    4030:	2b00      	cmp	r3, #0
    4032:	d005      	beq.n	4040 <can_init+0x188>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
    4034:	3210      	adds	r2, #16
    4036:	58a1      	ldr	r1, [r4, r2]
    4038:	2380      	movs	r3, #128	; 0x80
    403a:	05db      	lsls	r3, r3, #23
    403c:	430b      	orrs	r3, r1
    403e:	50a3      	str	r3, [r4, r2]
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
    4040:	22f0      	movs	r2, #240	; 0xf0
    4042:	58a1      	ldr	r1, [r4, r2]
    4044:	2321      	movs	r3, #33	; 0x21
    4046:	5ceb      	ldrb	r3, [r5, r3]
    4048:	061b      	lsls	r3, r3, #24
    404a:	20fc      	movs	r0, #252	; 0xfc
    404c:	0580      	lsls	r0, r0, #22
    404e:	4003      	ands	r3, r0
    4050:	430b      	orrs	r3, r1
    4052:	50a3      	str	r3, [r4, r2]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
    4054:	2303      	movs	r3, #3
    4056:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
    4058:	3b04      	subs	r3, #4
    405a:	3a10      	subs	r2, #16
    405c:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
    405e:	3204      	adds	r2, #4
    4060:	50a3      	str	r3, [r4, r2]
}
    4062:	bd70      	pop	{r4, r5, r6, pc}
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
    4064:	493d      	ldr	r1, [pc, #244]	; (415c <can_init+0x2a4>)
    4066:	201a      	movs	r0, #26
    4068:	4b41      	ldr	r3, [pc, #260]	; (4170 <can_init+0x2b8>)
    406a:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
    406c:	201a      	movs	r0, #26
    406e:	4b41      	ldr	r3, [pc, #260]	; (4174 <can_init+0x2bc>)
    4070:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
    4072:	4b3b      	ldr	r3, [pc, #236]	; (4160 <can_init+0x2a8>)
    4074:	699a      	ldr	r2, [r3, #24]
    4076:	2102      	movs	r1, #2
    4078:	430a      	orrs	r2, r1
    407a:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
    407c:	4a3e      	ldr	r2, [pc, #248]	; (4178 <can_init+0x2c0>)
    407e:	0412      	lsls	r2, r2, #16
    4080:	0c12      	lsrs	r2, r2, #16
    4082:	2180      	movs	r1, #128	; 0x80
    4084:	0389      	lsls	r1, r1, #14
    4086:	430a      	orrs	r2, r1
    4088:	2184      	movs	r1, #132	; 0x84
    408a:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
    408c:	4a3b      	ldr	r2, [pc, #236]	; (417c <can_init+0x2c4>)
    408e:	0412      	lsls	r2, r2, #16
    4090:	0c12      	lsrs	r2, r2, #16
    4092:	2180      	movs	r1, #128	; 0x80
    4094:	0349      	lsls	r1, r1, #13
    4096:	430a      	orrs	r2, r1
    4098:	2088      	movs	r0, #136	; 0x88
    409a:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
    409c:	4a38      	ldr	r2, [pc, #224]	; (4180 <can_init+0x2c8>)
    409e:	0412      	lsls	r2, r2, #16
    40a0:	0c12      	lsrs	r2, r2, #16
    40a2:	430a      	orrs	r2, r1
    40a4:	3018      	adds	r0, #24
    40a6:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
    40a8:	4a36      	ldr	r2, [pc, #216]	; (4184 <can_init+0x2cc>)
    40aa:	0412      	lsls	r2, r2, #16
    40ac:	0c12      	lsrs	r2, r2, #16
    40ae:	4311      	orrs	r1, r2
    40b0:	22b0      	movs	r2, #176	; 0xb0
    40b2:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
    40b4:	4a34      	ldr	r2, [pc, #208]	; (4188 <can_init+0x2d0>)
    40b6:	0412      	lsls	r2, r2, #16
    40b8:	0c12      	lsrs	r2, r2, #16
    40ba:	21ac      	movs	r1, #172	; 0xac
    40bc:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    40be:	4a33      	ldr	r2, [pc, #204]	; (418c <can_init+0x2d4>)
    40c0:	0412      	lsls	r2, r2, #16
    40c2:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
    40c4:	4932      	ldr	r1, [pc, #200]	; (4190 <can_init+0x2d8>)
    40c6:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    40c8:	21c0      	movs	r1, #192	; 0xc0
    40ca:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
    40cc:	4a31      	ldr	r2, [pc, #196]	; (4194 <can_init+0x2dc>)
    40ce:	0412      	lsls	r2, r2, #16
    40d0:	0c12      	lsrs	r2, r2, #16
    40d2:	2180      	movs	r1, #128	; 0x80
    40d4:	0309      	lsls	r1, r1, #12
    40d6:	430a      	orrs	r2, r1
    40d8:	21f0      	movs	r1, #240	; 0xf0
    40da:	505a      	str	r2, [r3, r1]
    40dc:	e703      	b.n	3ee6 <can_init+0x2e>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
    40de:	491f      	ldr	r1, [pc, #124]	; (415c <can_init+0x2a4>)
    40e0:	201b      	movs	r0, #27
    40e2:	4b23      	ldr	r3, [pc, #140]	; (4170 <can_init+0x2b8>)
    40e4:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
    40e6:	201b      	movs	r0, #27
    40e8:	4b22      	ldr	r3, [pc, #136]	; (4174 <can_init+0x2bc>)
    40ea:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
    40ec:	4b1d      	ldr	r3, [pc, #116]	; (4164 <can_init+0x2ac>)
    40ee:	699a      	ldr	r2, [r3, #24]
    40f0:	2102      	movs	r1, #2
    40f2:	430a      	orrs	r2, r1
    40f4:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
    40f6:	4a28      	ldr	r2, [pc, #160]	; (4198 <can_init+0x2e0>)
    40f8:	0412      	lsls	r2, r2, #16
    40fa:	0c12      	lsrs	r2, r2, #16
    40fc:	2180      	movs	r1, #128	; 0x80
    40fe:	0389      	lsls	r1, r1, #14
    4100:	430a      	orrs	r2, r1
    4102:	2184      	movs	r1, #132	; 0x84
    4104:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
    4106:	4a25      	ldr	r2, [pc, #148]	; (419c <can_init+0x2e4>)
    4108:	0412      	lsls	r2, r2, #16
    410a:	0c12      	lsrs	r2, r2, #16
    410c:	2180      	movs	r1, #128	; 0x80
    410e:	0349      	lsls	r1, r1, #13
    4110:	430a      	orrs	r2, r1
    4112:	2088      	movs	r0, #136	; 0x88
    4114:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
    4116:	4a22      	ldr	r2, [pc, #136]	; (41a0 <can_init+0x2e8>)
    4118:	0412      	lsls	r2, r2, #16
    411a:	0c12      	lsrs	r2, r2, #16
    411c:	430a      	orrs	r2, r1
    411e:	3018      	adds	r0, #24
    4120:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
    4122:	4a20      	ldr	r2, [pc, #128]	; (41a4 <can_init+0x2ec>)
    4124:	0412      	lsls	r2, r2, #16
    4126:	0c12      	lsrs	r2, r2, #16
    4128:	4311      	orrs	r1, r2
    412a:	22b0      	movs	r2, #176	; 0xb0
    412c:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
    412e:	4a1e      	ldr	r2, [pc, #120]	; (41a8 <can_init+0x2f0>)
    4130:	0412      	lsls	r2, r2, #16
    4132:	0c12      	lsrs	r2, r2, #16
    4134:	21ac      	movs	r1, #172	; 0xac
    4136:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    4138:	4a1c      	ldr	r2, [pc, #112]	; (41ac <can_init+0x2f4>)
    413a:	0412      	lsls	r2, r2, #16
    413c:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
    413e:	4914      	ldr	r1, [pc, #80]	; (4190 <can_init+0x2d8>)
    4140:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    4142:	21c0      	movs	r1, #192	; 0xc0
    4144:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
    4146:	4a1a      	ldr	r2, [pc, #104]	; (41b0 <can_init+0x2f8>)
    4148:	0412      	lsls	r2, r2, #16
    414a:	0c12      	lsrs	r2, r2, #16
    414c:	2180      	movs	r1, #128	; 0x80
    414e:	0309      	lsls	r1, r1, #12
    4150:	430a      	orrs	r2, r1
    4152:	21f0      	movs	r1, #240	; 0xf0
    4154:	505a      	str	r2, [r3, r1]
    4156:	e6c6      	b.n	3ee6 <can_init+0x2e>
    4158:	00003e81 	.word	0x00003e81
    415c:	20000b7c 	.word	0x20000b7c
    4160:	42001c00 	.word	0x42001c00
    4164:	42002000 	.word	0x42002000
    4168:	06050a03 	.word	0x06050a03
    416c:	00050a33 	.word	0x00050a33
    4170:	00005fe1 	.word	0x00005fe1
    4174:	00005f71 	.word	0x00005f71
    4178:	20000484 	.word	0x20000484
    417c:	20000204 	.word	0x20000204
    4180:	20000284 	.word	0x20000284
    4184:	20000384 	.word	0x20000384
    4188:	20000104 	.word	0x20000104
    418c:	20000504 	.word	0x20000504
    4190:	04040000 	.word	0x04040000
    4194:	20000584 	.word	0x20000584
    4198:	20000944 	.word	0x20000944
    419c:	200006c4 	.word	0x200006c4
    41a0:	20000744 	.word	0x20000744
    41a4:	20000844 	.word	0x20000844
    41a8:	200005c4 	.word	0x200005c4
    41ac:	200009c4 	.word	0x200009c4
    41b0:	20000a44 	.word	0x20000a44

000041b4 <can_set_baudrate>:

void can_set_baudrate(Can *hw, uint32_t baudrate)
{
    41b4:	b570      	push	{r4, r5, r6, lr}
    41b6:	0004      	movs	r4, r0
    41b8:	000d      	movs	r5, r1
	uint32_t gclk_can_value = 0;
	uint32_t can_nbtp_nbrp_value;
	uint32_t can_nbtp_nsgw_value = 3, can_nbtp_ntseg1_value = 10, can_nbtp_ntseg2_value = 3;
	
	if (hw == CAN0) {
    41ba:	4b0c      	ldr	r3, [pc, #48]	; (41ec <can_set_baudrate+0x38>)
    41bc:	4298      	cmp	r0, r3
    41be:	d00d      	beq.n	41dc <can_set_baudrate+0x28>
		gclk_can_value = system_gclk_chan_get_hz(CAN0_GCLK_ID);
		} else if (hw == CAN1) {
    41c0:	4b0b      	ldr	r3, [pc, #44]	; (41f0 <can_set_baudrate+0x3c>)
	uint32_t gclk_can_value = 0;
    41c2:	2000      	movs	r0, #0
		} else if (hw == CAN1) {
    41c4:	429c      	cmp	r4, r3
    41c6:	d00d      	beq.n	41e4 <can_set_baudrate+0x30>
		gclk_can_value = system_gclk_chan_get_hz(CAN1_GCLK_ID);
	}
	
	can_nbtp_nbrp_value = gclk_can_value / baudrate / (3 + can_nbtp_ntseg1_value + can_nbtp_ntseg2_value);
    41c8:	0029      	movs	r1, r5
    41ca:	4b0a      	ldr	r3, [pc, #40]	; (41f4 <can_set_baudrate+0x40>)
    41cc:	4798      	blx	r3
	
	hw->NBTP.reg = CAN_NBTP_NBRP(can_nbtp_nbrp_value) |
    41ce:	0300      	lsls	r0, r0, #12
    41d0:	4b09      	ldr	r3, [pc, #36]	; (41f8 <can_set_baudrate+0x44>)
    41d2:	4018      	ands	r0, r3
			CAN_NBTP_NSJW(can_nbtp_nsgw_value) |
			CAN_NBTP_NTSEG1(can_nbtp_ntseg1_value) |
    41d4:	4b09      	ldr	r3, [pc, #36]	; (41fc <can_set_baudrate+0x48>)
    41d6:	4318      	orrs	r0, r3
	hw->NBTP.reg = CAN_NBTP_NBRP(can_nbtp_nbrp_value) |
    41d8:	61e0      	str	r0, [r4, #28]
			CAN_NBTP_NTSEG2(can_nbtp_ntseg2_value);
}
    41da:	bd70      	pop	{r4, r5, r6, pc}
		gclk_can_value = system_gclk_chan_get_hz(CAN0_GCLK_ID);
    41dc:	201a      	movs	r0, #26
    41de:	4b08      	ldr	r3, [pc, #32]	; (4200 <can_set_baudrate+0x4c>)
    41e0:	4798      	blx	r3
    41e2:	e7f1      	b.n	41c8 <can_set_baudrate+0x14>
		gclk_can_value = system_gclk_chan_get_hz(CAN1_GCLK_ID);
    41e4:	301b      	adds	r0, #27
    41e6:	4b06      	ldr	r3, [pc, #24]	; (4200 <can_set_baudrate+0x4c>)
    41e8:	4798      	blx	r3
    41ea:	e7ed      	b.n	41c8 <can_set_baudrate+0x14>
    41ec:	42001c00 	.word	0x42001c00
    41f0:	42002000 	.word	0x42002000
    41f4:	00006479 	.word	0x00006479
    41f8:	01ff0000 	.word	0x01ff0000
    41fc:	06000a03 	.word	0x06000a03
    4200:	00006005 	.word	0x00006005

00004204 <can_start>:
			CAN_DBTP_DTSEG2(can_fd_dbtp_dtseg2_value);
}

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
    4204:	6802      	ldr	r2, [r0, #0]
    4206:	6993      	ldr	r3, [r2, #24]
    4208:	2101      	movs	r1, #1
    420a:	438b      	bics	r3, r1
    420c:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
    420e:	6801      	ldr	r1, [r0, #0]
    4210:	2201      	movs	r2, #1
    4212:	698b      	ldr	r3, [r1, #24]
    4214:	421a      	tst	r2, r3
    4216:	d1fc      	bne.n	4212 <can_start+0xe>
}
    4218:	4770      	bx	lr
	...

0000421c <can_set_rx_extended_filter>:
}

enum status_code can_set_rx_extended_filter(
		struct can_module *const module_inst,
		struct can_extended_message_filter_element *et_filter, uint32_t index)
{
    421c:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    421e:	6803      	ldr	r3, [r0, #0]
    4220:	480c      	ldr	r0, [pc, #48]	; (4254 <can_set_rx_extended_filter+0x38>)
    4222:	4283      	cmp	r3, r0
    4224:	d004      	beq.n	4230 <can_set_rx_extended_filter+0x14>
		can0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
		can0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    4226:	4c0c      	ldr	r4, [pc, #48]	; (4258 <can_set_rx_extended_filter+0x3c>)
		can1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
		can1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    4228:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    422a:	42a3      	cmp	r3, r4
    422c:	d009      	beq.n	4242 <can_set_rx_extended_filter+0x26>
}
    422e:	bd10      	pop	{r4, pc}
		can0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
    4230:	6808      	ldr	r0, [r1, #0]
    4232:	4b0a      	ldr	r3, [pc, #40]	; (425c <can_set_rx_extended_filter+0x40>)
    4234:	00d2      	lsls	r2, r2, #3
    4236:	50d0      	str	r0, [r2, r3]
		can0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
    4238:	6849      	ldr	r1, [r1, #4]
    423a:	189b      	adds	r3, r3, r2
    423c:	6059      	str	r1, [r3, #4]
		return STATUS_OK;
    423e:	2000      	movs	r0, #0
    4240:	e7f5      	b.n	422e <can_set_rx_extended_filter+0x12>
		can1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
    4242:	6808      	ldr	r0, [r1, #0]
    4244:	4b06      	ldr	r3, [pc, #24]	; (4260 <can_set_rx_extended_filter+0x44>)
    4246:	00d2      	lsls	r2, r2, #3
    4248:	50d0      	str	r0, [r2, r3]
		can1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
    424a:	6849      	ldr	r1, [r1, #4]
    424c:	189a      	adds	r2, r3, r2
    424e:	6051      	str	r1, [r2, #4]
		return STATUS_OK;
    4250:	2000      	movs	r0, #0
    4252:	e7ec      	b.n	422e <can_set_rx_extended_filter+0x12>
    4254:	42001c00 	.word	0x42001c00
    4258:	42002000 	.word	0x42002000
    425c:	20000204 	.word	0x20000204
    4260:	200006c4 	.word	0x200006c4

00004264 <can_get_rx_buffer_element>:

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
    4264:	b570      	push	{r4, r5, r6, lr}
    4266:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
    4268:	6803      	ldr	r3, [r0, #0]
    426a:	4c0d      	ldr	r4, [pc, #52]	; (42a0 <can_get_rx_buffer_element+0x3c>)
    426c:	42a3      	cmp	r3, r4
    426e:	d004      	beq.n	427a <can_get_rx_buffer_element+0x16>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    4270:	4c0c      	ldr	r4, [pc, #48]	; (42a4 <can_get_rx_buffer_element+0x40>)
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    4272:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    4274:	42a3      	cmp	r3, r4
    4276:	d009      	beq.n	428c <can_get_rx_buffer_element+0x28>
}
    4278:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    427a:	0112      	lsls	r2, r2, #4
    427c:	490a      	ldr	r1, [pc, #40]	; (42a8 <can_get_rx_buffer_element+0x44>)
    427e:	1889      	adds	r1, r1, r2
    4280:	2210      	movs	r2, #16
    4282:	0028      	movs	r0, r5
    4284:	4b09      	ldr	r3, [pc, #36]	; (42ac <can_get_rx_buffer_element+0x48>)
    4286:	4798      	blx	r3
		return STATUS_OK;
    4288:	2000      	movs	r0, #0
    428a:	e7f5      	b.n	4278 <can_get_rx_buffer_element+0x14>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    428c:	0112      	lsls	r2, r2, #4
    428e:	4908      	ldr	r1, [pc, #32]	; (42b0 <can_get_rx_buffer_element+0x4c>)
    4290:	1889      	adds	r1, r1, r2
    4292:	2210      	movs	r2, #16
    4294:	0028      	movs	r0, r5
    4296:	4b05      	ldr	r3, [pc, #20]	; (42ac <can_get_rx_buffer_element+0x48>)
    4298:	4798      	blx	r3
		return STATUS_OK;
    429a:	2000      	movs	r0, #0
    429c:	e7ec      	b.n	4278 <can_get_rx_buffer_element+0x14>
    429e:	46c0      	nop			; (mov r8, r8)
    42a0:	42001c00 	.word	0x42001c00
    42a4:	42002000 	.word	0x42002000
    42a8:	20000104 	.word	0x20000104
    42ac:	000080c9 	.word	0x000080c9
    42b0:	200005c4 	.word	0x200005c4

000042b4 <can_get_rx_fifo_0_element>:

enum status_code can_get_rx_fifo_0_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
    42b4:	b570      	push	{r4, r5, r6, lr}
    42b6:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
    42b8:	6803      	ldr	r3, [r0, #0]
    42ba:	4c0d      	ldr	r4, [pc, #52]	; (42f0 <can_get_rx_fifo_0_element+0x3c>)
    42bc:	42a3      	cmp	r3, r4
    42be:	d004      	beq.n	42ca <can_get_rx_fifo_0_element+0x16>
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    42c0:	4c0c      	ldr	r4, [pc, #48]	; (42f4 <can_get_rx_fifo_0_element+0x40>)
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    42c2:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    42c4:	42a3      	cmp	r3, r4
    42c6:	d009      	beq.n	42dc <can_get_rx_fifo_0_element+0x28>
}
    42c8:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    42ca:	0112      	lsls	r2, r2, #4
    42cc:	490a      	ldr	r1, [pc, #40]	; (42f8 <can_get_rx_fifo_0_element+0x44>)
    42ce:	1889      	adds	r1, r1, r2
    42d0:	2210      	movs	r2, #16
    42d2:	0028      	movs	r0, r5
    42d4:	4b09      	ldr	r3, [pc, #36]	; (42fc <can_get_rx_fifo_0_element+0x48>)
    42d6:	4798      	blx	r3
		return STATUS_OK;
    42d8:	2000      	movs	r0, #0
    42da:	e7f5      	b.n	42c8 <can_get_rx_fifo_0_element+0x14>
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    42dc:	0112      	lsls	r2, r2, #4
    42de:	4908      	ldr	r1, [pc, #32]	; (4300 <can_get_rx_fifo_0_element+0x4c>)
    42e0:	1889      	adds	r1, r1, r2
    42e2:	2210      	movs	r2, #16
    42e4:	0028      	movs	r0, r5
    42e6:	4b05      	ldr	r3, [pc, #20]	; (42fc <can_get_rx_fifo_0_element+0x48>)
    42e8:	4798      	blx	r3
		return STATUS_OK;
    42ea:	2000      	movs	r0, #0
    42ec:	e7ec      	b.n	42c8 <can_get_rx_fifo_0_element+0x14>
    42ee:	46c0      	nop			; (mov r8, r8)
    42f0:	42001c00 	.word	0x42001c00
    42f4:	42002000 	.word	0x42002000
    42f8:	20000284 	.word	0x20000284
    42fc:	000080c9 	.word	0x000080c9
    4300:	20000744 	.word	0x20000744

00004304 <can_get_rx_fifo_1_element>:

enum status_code can_get_rx_fifo_1_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_1 *rx_element, uint32_t index)
{
    4304:	b570      	push	{r4, r5, r6, lr}
    4306:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
    4308:	6803      	ldr	r3, [r0, #0]
    430a:	4c0d      	ldr	r4, [pc, #52]	; (4340 <can_get_rx_fifo_1_element+0x3c>)
    430c:	42a3      	cmp	r3, r4
    430e:	d004      	beq.n	431a <can_get_rx_fifo_1_element+0x16>
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    4310:	4c0c      	ldr	r4, [pc, #48]	; (4344 <can_get_rx_fifo_1_element+0x40>)
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    4312:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    4314:	42a3      	cmp	r3, r4
    4316:	d009      	beq.n	432c <can_get_rx_fifo_1_element+0x28>
}
    4318:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
    431a:	0112      	lsls	r2, r2, #4
    431c:	490a      	ldr	r1, [pc, #40]	; (4348 <can_get_rx_fifo_1_element+0x44>)
    431e:	1889      	adds	r1, r1, r2
    4320:	2210      	movs	r2, #16
    4322:	0028      	movs	r0, r5
    4324:	4b09      	ldr	r3, [pc, #36]	; (434c <can_get_rx_fifo_1_element+0x48>)
    4326:	4798      	blx	r3
		return STATUS_OK;
    4328:	2000      	movs	r0, #0
    432a:	e7f5      	b.n	4318 <can_get_rx_fifo_1_element+0x14>
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
    432c:	0112      	lsls	r2, r2, #4
    432e:	4908      	ldr	r1, [pc, #32]	; (4350 <can_get_rx_fifo_1_element+0x4c>)
    4330:	1889      	adds	r1, r1, r2
    4332:	2210      	movs	r2, #16
    4334:	0028      	movs	r0, r5
    4336:	4b05      	ldr	r3, [pc, #20]	; (434c <can_get_rx_fifo_1_element+0x48>)
    4338:	4798      	blx	r3
		return STATUS_OK;
    433a:	2000      	movs	r0, #0
    433c:	e7ec      	b.n	4318 <can_get_rx_fifo_1_element+0x14>
    433e:	46c0      	nop			; (mov r8, r8)
    4340:	42001c00 	.word	0x42001c00
    4344:	42002000 	.word	0x42002000
    4348:	20000384 	.word	0x20000384
    434c:	000080c9 	.word	0x000080c9
    4350:	20000844 	.word	0x20000844

00004354 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4354:	6803      	ldr	r3, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
    4356:	691a      	ldr	r2, [r3, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    4358:	2a00      	cmp	r2, #0
    435a:	d1fc      	bne.n	4356 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;
    435c:	881a      	ldrh	r2, [r3, #0]
    435e:	2102      	movs	r1, #2
    4360:	430a      	orrs	r2, r1
    4362:	801a      	strh	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    4364:	6802      	ldr	r2, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
    4366:	6913      	ldr	r3, [r2, #16]

	while (rtc_calendar_is_syncing(module)) {
    4368:	2b00      	cmp	r3, #0
    436a:	d1fc      	bne.n	4366 <rtc_calendar_enable+0x12>
		/* Wait for synchronization */
	}
}
    436c:	4770      	bx	lr
	...

00004370 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4370:	6803      	ldr	r3, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
    4372:	691a      	ldr	r2, [r3, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    4374:	2a00      	cmp	r2, #0
    4376:	d1fc      	bne.n	4372 <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    4378:	4a05      	ldr	r2, [pc, #20]	; (4390 <rtc_calendar_disable+0x20>)
    437a:	811a      	strh	r2, [r3, #8]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    437c:	819a      	strh	r2, [r3, #12]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;
    437e:	881a      	ldrh	r2, [r3, #0]
    4380:	2102      	movs	r1, #2
    4382:	438a      	bics	r2, r1
    4384:	801a      	strh	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    4386:	6802      	ldr	r2, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
    4388:	6913      	ldr	r3, [r2, #16]

	while (rtc_calendar_is_syncing(module)) {
    438a:	2b00      	cmp	r3, #0
    438c:	d1fc      	bne.n	4388 <rtc_calendar_disable+0x18>
		/* Wait for synchronization */
	}
}
    438e:	4770      	bx	lr
    4390:	ffff81ff 	.word	0xffff81ff

00004394 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    4394:	b570      	push	{r4, r5, r6, lr}
    4396:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4398:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    439a:	4b07      	ldr	r3, [pc, #28]	; (43b8 <rtc_calendar_reset+0x24>)
    439c:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    439e:	6822      	ldr	r2, [r4, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
    43a0:	6913      	ldr	r3, [r2, #16]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    43a2:	2b00      	cmp	r3, #0
    43a4:	d1fc      	bne.n	43a0 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;
    43a6:	882b      	ldrh	r3, [r5, #0]
    43a8:	2201      	movs	r2, #1
    43aa:	4313      	orrs	r3, r2
    43ac:	802b      	strh	r3, [r5, #0]
	Rtc *const rtc_module = module->hw;
    43ae:	6822      	ldr	r2, [r4, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
    43b0:	6913      	ldr	r3, [r2, #16]

	while (rtc_calendar_is_syncing(module)) {
    43b2:	2b00      	cmp	r3, #0
    43b4:	d1fc      	bne.n	43b0 <rtc_calendar_reset+0x1c>
		/* Wait for synchronization */
	}
}
    43b6:	bd70      	pop	{r4, r5, r6, pc}
    43b8:	00004371 	.word	0x00004371

000043bc <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    43bc:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    43be:	88cb      	ldrh	r3, [r1, #6]
    43c0:	88c2      	ldrh	r2, [r0, #6]
    43c2:	1a9a      	subs	r2, r3, r2
    43c4:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    43c6:	794b      	ldrb	r3, [r1, #5]
    43c8:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    43ca:	790c      	ldrb	r4, [r1, #4]
    43cc:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    43ce:	4323      	orrs	r3, r4
    43d0:	788c      	ldrb	r4, [r1, #2]
    43d2:	0324      	lsls	r4, r4, #12
    43d4:	4323      	orrs	r3, r4
    43d6:	4313      	orrs	r3, r2

	/* Check if 24h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    43d8:	7902      	ldrb	r2, [r0, #4]
    43da:	2a00      	cmp	r2, #0
    43dc:	d105      	bne.n	43ea <rtc_calendar_time_to_register_value+0x2e>
    43de:	78ca      	ldrb	r2, [r1, #3]
    43e0:	2a00      	cmp	r2, #0
    43e2:	d002      	beq.n	43ea <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= (0x10u << RTC_MODE2_CLOCK_HOUR_Pos);
    43e4:	2280      	movs	r2, #128	; 0x80
    43e6:	0252      	lsls	r2, r2, #9
    43e8:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    43ea:	7848      	ldrb	r0, [r1, #1]
    43ec:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    43ee:	780a      	ldrb	r2, [r1, #0]
    43f0:	4310      	orrs	r0, r2
    43f2:	4318      	orrs	r0, r3

	return register_value;
}
    43f4:	bd10      	pop	{r4, pc}

000043f6 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    43f6:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    43f8:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    43fa:	88c4      	ldrh	r4, [r0, #6]
    43fc:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    43fe:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    4400:	018b      	lsls	r3, r1, #6
    4402:	0f1b      	lsrs	r3, r3, #28
    4404:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    4406:	028b      	lsls	r3, r1, #10
    4408:	0edb      	lsrs	r3, r3, #27
    440a:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    440c:	7903      	ldrb	r3, [r0, #4]
    440e:	2b00      	cmp	r3, #0
    4410:	d10c      	bne.n	442c <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~(0x10u << RTC_MODE2_CLOCK_HOUR_Pos))) >>
    4412:	040b      	lsls	r3, r1, #16
    4414:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    4416:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & (0x10u << RTC_MODE2_CLOCK_HOUR_Pos)) != 0);
    4418:	03cb      	lsls	r3, r1, #15
    441a:	0fdb      	lsrs	r3, r3, #31
    441c:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    441e:	0988      	lsrs	r0, r1, #6
    4420:	233f      	movs	r3, #63	; 0x3f
    4422:	4018      	ands	r0, r3
    4424:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    4426:	4019      	ands	r1, r3
    4428:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    442a:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    442c:	03cb      	lsls	r3, r1, #15
    442e:	0edb      	lsrs	r3, r3, #27
    4430:	7093      	strb	r3, [r2, #2]
    4432:	e7f4      	b.n	441e <rtc_calendar_register_value_to_time+0x28>

00004434 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    4434:	b570      	push	{r4, r5, r6, lr}
    4436:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4438:	6805      	ldr	r5, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    443a:	4b05      	ldr	r3, [pc, #20]	; (4450 <rtc_calendar_set_time+0x1c>)
    443c:	4798      	blx	r3
	if (rtc_module->MODE2.SYNCBUSY.reg) {
    443e:	692b      	ldr	r3, [r5, #16]

	while (rtc_calendar_is_syncing(module)) {
    4440:	2b00      	cmp	r3, #0
    4442:	d1fc      	bne.n	443e <rtc_calendar_set_time+0xa>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    4444:	61a8      	str	r0, [r5, #24]
	Rtc *const rtc_module = module->hw;
    4446:	6822      	ldr	r2, [r4, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
    4448:	6913      	ldr	r3, [r2, #16]

	while (rtc_calendar_is_syncing(module)) {
    444a:	2b00      	cmp	r3, #0
    444c:	d1fc      	bne.n	4448 <rtc_calendar_set_time+0x14>
		/* Wait for synchronization */
	}
}
    444e:	bd70      	pop	{r4, r5, r6, pc}
    4450:	000043bd 	.word	0x000043bd

00004454 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    4454:	b510      	push	{r4, lr}
    4456:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4458:	6804      	ldr	r4, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
    445a:	6923      	ldr	r3, [r4, #16]

	while (rtc_calendar_is_syncing(module)) {
    445c:	2b00      	cmp	r3, #0
    445e:	d1fc      	bne.n	445a <rtc_calendar_get_time+0x6>
		/* Wait for synchronization */
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    4460:	69a1      	ldr	r1, [r4, #24]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    4462:	4b01      	ldr	r3, [pc, #4]	; (4468 <rtc_calendar_get_time+0x14>)
    4464:	4798      	blx	r3
}
    4466:	bd10      	pop	{r4, pc}
    4468:	000043f7 	.word	0x000043f7

0000446c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    446e:	0005      	movs	r5, r0
    4470:	000e      	movs	r6, r1
    4472:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    4474:	2017      	movs	r0, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    4476:	2a01      	cmp	r2, #1
    4478:	d900      	bls.n	447c <rtc_calendar_set_alarm+0x10>
	while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
	}

	return STATUS_OK;
}
    447a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Rtc *const rtc_module = module->hw;
    447c:	682f      	ldr	r7, [r5, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    447e:	0028      	movs	r0, r5
    4480:	4b0a      	ldr	r3, [pc, #40]	; (44ac <rtc_calendar_set_alarm+0x40>)
    4482:	4798      	blx	r3
	if (rtc_module->MODE2.SYNCBUSY.reg) {
    4484:	693b      	ldr	r3, [r7, #16]
	while (rtc_calendar_is_syncing(module)) {
    4486:	2b00      	cmp	r3, #0
    4488:	d1fc      	bne.n	4484 <rtc_calendar_set_alarm+0x18>
    448a:	00e4      	lsls	r4, r4, #3
    448c:	193c      	adds	r4, r7, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    448e:	6220      	str	r0, [r4, #32]
	Rtc *const rtc_module = module->hw;
    4490:	682a      	ldr	r2, [r5, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
    4492:	6913      	ldr	r3, [r2, #16]
	while (rtc_calendar_is_syncing(module)) {
    4494:	2b00      	cmp	r3, #0
    4496:	d1fc      	bne.n	4492 <rtc_calendar_set_alarm+0x26>
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    4498:	7a32      	ldrb	r2, [r6, #8]
    449a:	3324      	adds	r3, #36	; 0x24
    449c:	54e2      	strb	r2, [r4, r3]
	Rtc *const rtc_module = module->hw;
    449e:	682a      	ldr	r2, [r5, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
    44a0:	6913      	ldr	r3, [r2, #16]
	while (rtc_calendar_is_syncing(module)) {
    44a2:	2b00      	cmp	r3, #0
    44a4:	d1fc      	bne.n	44a0 <rtc_calendar_set_alarm+0x34>
	return STATUS_OK;
    44a6:	2000      	movs	r0, #0
    44a8:	e7e7      	b.n	447a <rtc_calendar_set_alarm+0xe>
    44aa:	46c0      	nop			; (mov r8, r8)
    44ac:	000043bd 	.word	0x000043bd

000044b0 <rtc_calendar_init>:
{
    44b0:	b570      	push	{r4, r5, r6, lr}
    44b2:	0005      	movs	r5, r0
    44b4:	0014      	movs	r4, r2
	module->hw = hw;
    44b6:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
    44b8:	4a16      	ldr	r2, [pc, #88]	; (4514 <rtc_calendar_init+0x64>)
    44ba:	6951      	ldr	r1, [r2, #20]
    44bc:	2380      	movs	r3, #128	; 0x80
    44be:	009b      	lsls	r3, r3, #2
    44c0:	430b      	orrs	r3, r1
    44c2:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    44c4:	2200      	movs	r2, #0
    44c6:	4b14      	ldr	r3, [pc, #80]	; (4518 <rtc_calendar_init+0x68>)
    44c8:	611a      	str	r2, [r3, #16]
	rtc_calendar_reset(module);
    44ca:	4b14      	ldr	r3, [pc, #80]	; (451c <rtc_calendar_init+0x6c>)
    44cc:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    44ce:	78e3      	ldrb	r3, [r4, #3]
    44d0:	712b      	strb	r3, [r5, #4]
	module->year_init_value     = config->year_init_value;
    44d2:	88a3      	ldrh	r3, [r4, #4]
    44d4:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    44d6:	4b12      	ldr	r3, [pc, #72]	; (4520 <rtc_calendar_init+0x70>)
    44d8:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    44da:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
    44dc:	8823      	ldrh	r3, [r4, #0]
	if(config->enable_read_sync) {
    44de:	79a1      	ldrb	r1, [r4, #6]
    44e0:	2900      	cmp	r1, #0
    44e2:	d113      	bne.n	450c <rtc_calendar_init+0x5c>
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
    44e4:	3108      	adds	r1, #8
    44e6:	430b      	orrs	r3, r1
	if (!(config->clock_24h)) {
    44e8:	78e1      	ldrb	r1, [r4, #3]
    44ea:	2900      	cmp	r1, #0
    44ec:	d101      	bne.n	44f2 <rtc_calendar_init+0x42>
		tmp_reg |= RTC_MODE2_CTRLA_CLKREP;
    44ee:	3140      	adds	r1, #64	; 0x40
    44f0:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    44f2:	78a1      	ldrb	r1, [r4, #2]
    44f4:	2900      	cmp	r1, #0
    44f6:	d001      	beq.n	44fc <rtc_calendar_init+0x4c>
		tmp_reg |= RTC_MODE2_CTRLA_MATCHCLR;
    44f8:	2180      	movs	r1, #128	; 0x80
    44fa:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRLA.reg = tmp_reg;
    44fc:	8013      	strh	r3, [r2, #0]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    44fe:	0021      	movs	r1, r4
    4500:	3108      	adds	r1, #8
    4502:	2200      	movs	r2, #0
    4504:	0028      	movs	r0, r5
    4506:	4b07      	ldr	r3, [pc, #28]	; (4524 <rtc_calendar_init+0x74>)
    4508:	4798      	blx	r3
}
    450a:	bd70      	pop	{r4, r5, r6, pc}
		tmp_reg |= RTC_MODE2_CTRLA_CLOCKSYNC;
    450c:	4906      	ldr	r1, [pc, #24]	; (4528 <rtc_calendar_init+0x78>)
    450e:	430b      	orrs	r3, r1
    4510:	e7ea      	b.n	44e8 <rtc_calendar_init+0x38>
    4512:	46c0      	nop			; (mov r8, r8)
    4514:	40000800 	.word	0x40000800
    4518:	40001400 	.word	0x40001400
    451c:	00004395 	.word	0x00004395
    4520:	20000b80 	.word	0x20000b80
    4524:	0000446d 	.word	0x0000446d
    4528:	00008008 	.word	0x00008008

0000452c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    452c:	b570      	push	{r4, r5, r6, lr}
    452e:	b082      	sub	sp, #8
    4530:	0005      	movs	r5, r0
    4532:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4534:	2200      	movs	r2, #0
    4536:	466b      	mov	r3, sp
    4538:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    453a:	6806      	ldr	r6, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    453c:	0030      	movs	r0, r6
    453e:	4b24      	ldr	r3, [pc, #144]	; (45d0 <spi_set_baudrate+0xa4>)
    4540:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4542:	231f      	movs	r3, #31
    4544:	4018      	ands	r0, r3
    4546:	3b1e      	subs	r3, #30
    4548:	4083      	lsls	r3, r0
    454a:	2280      	movs	r2, #128	; 0x80
    454c:	4921      	ldr	r1, [pc, #132]	; (45d4 <spi_set_baudrate+0xa8>)
    454e:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4550:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4552:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    4554:	2b00      	cmp	r3, #0
    4556:	d1fc      	bne.n	4552 <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4558:	338f      	adds	r3, #143	; 0x8f
    455a:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    455c:	7633      	strb	r3, [r6, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    455e:	6833      	ldr	r3, [r6, #0]
    4560:	2202      	movs	r2, #2
    4562:	4393      	bics	r3, r2
    4564:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4566:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4568:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    456a:	2b00      	cmp	r3, #0
    456c:	d1fc      	bne.n	4568 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    456e:	4b1a      	ldr	r3, [pc, #104]	; (45d8 <spi_set_baudrate+0xac>)
    4570:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4572:	3013      	adds	r0, #19
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4574:	b2c0      	uxtb	r0, r0
    4576:	4b19      	ldr	r3, [pc, #100]	; (45dc <spi_set_baudrate+0xb0>)
    4578:	4798      	blx	r3
    457a:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    457c:	466b      	mov	r3, sp
    457e:	1d9a      	adds	r2, r3, #6
    4580:	0020      	movs	r0, r4
    4582:	4b17      	ldr	r3, [pc, #92]	; (45e0 <spi_set_baudrate+0xb4>)
    4584:	4798      	blx	r3
    4586:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    4588:	d003      	beq.n	4592 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    458a:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    458c:	0020      	movs	r0, r4
    458e:	b002      	add	sp, #8
    4590:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    4592:	466b      	mov	r3, sp
    4594:	3306      	adds	r3, #6
    4596:	781b      	ldrb	r3, [r3, #0]
    4598:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    459a:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    459c:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    459e:	2b00      	cmp	r3, #0
    45a0:	d1fc      	bne.n	459c <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    45a2:	0030      	movs	r0, r6
    45a4:	4b0a      	ldr	r3, [pc, #40]	; (45d0 <spi_set_baudrate+0xa4>)
    45a6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    45a8:	231f      	movs	r3, #31
    45aa:	4018      	ands	r0, r3
    45ac:	3b1e      	subs	r3, #30
    45ae:	4083      	lsls	r3, r0
    45b0:	4a08      	ldr	r2, [pc, #32]	; (45d4 <spi_set_baudrate+0xa8>)
    45b2:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    45b4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    45b6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    45b8:	2b00      	cmp	r3, #0
    45ba:	d1fc      	bne.n	45b6 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    45bc:	6833      	ldr	r3, [r6, #0]
    45be:	2202      	movs	r2, #2
    45c0:	4313      	orrs	r3, r2
    45c2:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    45c4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    45c6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    45c8:	2b00      	cmp	r3, #0
    45ca:	d1fc      	bne.n	45c6 <spi_set_baudrate+0x9a>
    45cc:	e7de      	b.n	458c <spi_set_baudrate+0x60>
    45ce:	46c0      	nop			; (mov r8, r8)
    45d0:	00005199 	.word	0x00005199
    45d4:	e000e100 	.word	0xe000e100
    45d8:	0000510d 	.word	0x0000510d
    45dc:	00006005 	.word	0x00006005
    45e0:	00004f03 	.word	0x00004f03

000045e4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    45e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    45e6:	b08b      	sub	sp, #44	; 0x2c
    45e8:	0005      	movs	r5, r0
    45ea:	000c      	movs	r4, r1
    45ec:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    45ee:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    45f0:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    45f2:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    45f4:	079b      	lsls	r3, r3, #30
    45f6:	d501      	bpl.n	45fc <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    45f8:	b00b      	add	sp, #44	; 0x2c
    45fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    45fc:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    45fe:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4600:	07db      	lsls	r3, r3, #31
    4602:	d4f9      	bmi.n	45f8 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4604:	0008      	movs	r0, r1
    4606:	4b71      	ldr	r3, [pc, #452]	; (47cc <spi_init+0x1e8>)
    4608:	4798      	blx	r3
    460a:	0003      	movs	r3, r0
		return STATUS_ERR_INVALID_ARG;
    460c:	2017      	movs	r0, #23
	if (sercom_index == 5) {
    460e:	2b05      	cmp	r3, #5
    4610:	d0f2      	beq.n	45f8 <spi_init+0x14>
			MCLK->APBCMASK.reg |= mask;
    4612:	496f      	ldr	r1, [pc, #444]	; (47d0 <spi_init+0x1ec>)
    4614:	69c8      	ldr	r0, [r1, #28]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    4616:	1c5f      	adds	r7, r3, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4618:	2201      	movs	r2, #1
    461a:	40ba      	lsls	r2, r7
    461c:	4302      	orrs	r2, r0
    461e:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    4620:	a909      	add	r1, sp, #36	; 0x24
    4622:	2724      	movs	r7, #36	; 0x24
    4624:	5df2      	ldrb	r2, [r6, r7]
    4626:	700a      	strb	r2, [r1, #0]
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4628:	3313      	adds	r3, #19
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    462a:	b2db      	uxtb	r3, r3
    462c:	9301      	str	r3, [sp, #4]
    462e:	0018      	movs	r0, r3
    4630:	4b68      	ldr	r3, [pc, #416]	; (47d4 <spi_init+0x1f0>)
    4632:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4634:	9801      	ldr	r0, [sp, #4]
    4636:	4b68      	ldr	r3, [pc, #416]	; (47d8 <spi_init+0x1f4>)
    4638:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    463a:	5df0      	ldrb	r0, [r6, r7]
    463c:	2100      	movs	r1, #0
    463e:	4b67      	ldr	r3, [pc, #412]	; (47dc <spi_init+0x1f8>)
    4640:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4642:	7833      	ldrb	r3, [r6, #0]
    4644:	2b01      	cmp	r3, #1
    4646:	d03f      	beq.n	46c8 <spi_init+0xe4>
	if (config->mode == SPI_MODE_SLAVE) {
    4648:	7833      	ldrb	r3, [r6, #0]
    464a:	2b00      	cmp	r3, #0
    464c:	d103      	bne.n	4656 <spi_init+0x72>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    464e:	6823      	ldr	r3, [r4, #0]
    4650:	2208      	movs	r2, #8
    4652:	4313      	orrs	r3, r2
    4654:	6023      	str	r3, [r4, #0]
    4656:	002b      	movs	r3, r5
    4658:	330c      	adds	r3, #12
    465a:	0029      	movs	r1, r5
    465c:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    465e:	2200      	movs	r2, #0
    4660:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4662:	428b      	cmp	r3, r1
    4664:	d1fc      	bne.n	4660 <spi_init+0x7c>
	module->tx_buffer_ptr              = NULL;
    4666:	2300      	movs	r3, #0
    4668:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    466a:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    466c:	2400      	movs	r4, #0
    466e:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4670:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4672:	3336      	adds	r3, #54	; 0x36
    4674:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4676:	3301      	adds	r3, #1
    4678:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    467a:	3301      	adds	r3, #1
    467c:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    467e:	3b35      	subs	r3, #53	; 0x35
    4680:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4682:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4684:	6828      	ldr	r0, [r5, #0]
    4686:	4b51      	ldr	r3, [pc, #324]	; (47cc <spi_init+0x1e8>)
    4688:	4798      	blx	r3
    468a:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    468c:	4954      	ldr	r1, [pc, #336]	; (47e0 <spi_init+0x1fc>)
    468e:	4b55      	ldr	r3, [pc, #340]	; (47e4 <spi_init+0x200>)
    4690:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4692:	00bf      	lsls	r7, r7, #2
    4694:	4b54      	ldr	r3, [pc, #336]	; (47e8 <spi_init+0x204>)
    4696:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4698:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    469a:	ab04      	add	r3, sp, #16
    469c:	2280      	movs	r2, #128	; 0x80
    469e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    46a0:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    46a2:	3a7f      	subs	r2, #127	; 0x7f
    46a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    46a6:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    46a8:	7833      	ldrb	r3, [r6, #0]
    46aa:	2b00      	cmp	r3, #0
    46ac:	d102      	bne.n	46b4 <spi_init+0xd0>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    46ae:	2200      	movs	r2, #0
    46b0:	ab04      	add	r3, sp, #16
    46b2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    46b4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    46b6:	9305      	str	r3, [sp, #20]
    46b8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    46ba:	9306      	str	r3, [sp, #24]
    46bc:	6b33      	ldr	r3, [r6, #48]	; 0x30
    46be:	9307      	str	r3, [sp, #28]
    46c0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    46c2:	9308      	str	r3, [sp, #32]
    46c4:	2400      	movs	r4, #0
    46c6:	e00b      	b.n	46e0 <spi_init+0xfc>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    46c8:	6823      	ldr	r3, [r4, #0]
    46ca:	220c      	movs	r2, #12
    46cc:	4313      	orrs	r3, r2
    46ce:	6023      	str	r3, [r4, #0]
    46d0:	e7ba      	b.n	4648 <spi_init+0x64>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    46d2:	0038      	movs	r0, r7
    46d4:	4b45      	ldr	r3, [pc, #276]	; (47ec <spi_init+0x208>)
    46d6:	4798      	blx	r3
    46d8:	e00a      	b.n	46f0 <spi_init+0x10c>
    46da:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    46dc:	2c04      	cmp	r4, #4
    46de:	d010      	beq.n	4702 <spi_init+0x11e>
    46e0:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    46e2:	00a3      	lsls	r3, r4, #2
    46e4:	aa02      	add	r2, sp, #8
    46e6:	200c      	movs	r0, #12
    46e8:	1812      	adds	r2, r2, r0
    46ea:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    46ec:	2800      	cmp	r0, #0
    46ee:	d0f0      	beq.n	46d2 <spi_init+0xee>
		if (current_pinmux != PINMUX_UNUSED) {
    46f0:	1c43      	adds	r3, r0, #1
    46f2:	d0f2      	beq.n	46da <spi_init+0xf6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    46f4:	a904      	add	r1, sp, #16
    46f6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    46f8:	0c00      	lsrs	r0, r0, #16
    46fa:	b2c0      	uxtb	r0, r0
    46fc:	4b3c      	ldr	r3, [pc, #240]	; (47f0 <spi_init+0x20c>)
    46fe:	4798      	blx	r3
    4700:	e7eb      	b.n	46da <spi_init+0xf6>
	module->mode             = config->mode;
    4702:	7833      	ldrb	r3, [r6, #0]
    4704:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4706:	7c33      	ldrb	r3, [r6, #16]
    4708:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    470a:	7cb3      	ldrb	r3, [r6, #18]
    470c:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    470e:	7d33      	ldrb	r3, [r6, #20]
    4710:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    4712:	2200      	movs	r2, #0
    4714:	ab02      	add	r3, sp, #8
    4716:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4718:	7833      	ldrb	r3, [r6, #0]
    471a:	2b01      	cmp	r3, #1
    471c:	d012      	beq.n	4744 <spi_init+0x160>
	if (config->mode == SPI_MODE_SLAVE) {
    471e:	7833      	ldrb	r3, [r6, #0]
    4720:	2b00      	cmp	r3, #0
    4722:	d126      	bne.n	4772 <spi_init+0x18e>
		ctrla = config->mode_specific.slave.frame_format;
    4724:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    4726:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    4728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    472a:	7ff1      	ldrb	r1, [r6, #31]
    472c:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    472e:	7fb4      	ldrb	r4, [r6, #30]
    4730:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    4732:	4319      	orrs	r1, r3
    4734:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    4736:	2320      	movs	r3, #32
    4738:	5cf3      	ldrb	r3, [r6, r3]
    473a:	2b00      	cmp	r3, #0
    473c:	d01b      	beq.n	4776 <spi_init+0x192>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    473e:	2340      	movs	r3, #64	; 0x40
    4740:	431a      	orrs	r2, r3
    4742:	e018      	b.n	4776 <spi_init+0x192>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4744:	6828      	ldr	r0, [r5, #0]
    4746:	4b21      	ldr	r3, [pc, #132]	; (47cc <spi_init+0x1e8>)
    4748:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    474a:	3013      	adds	r0, #19
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    474c:	b2c0      	uxtb	r0, r0
    474e:	4b29      	ldr	r3, [pc, #164]	; (47f4 <spi_init+0x210>)
    4750:	4798      	blx	r3
    4752:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4754:	ab02      	add	r3, sp, #8
    4756:	1d9a      	adds	r2, r3, #6
    4758:	69b0      	ldr	r0, [r6, #24]
    475a:	4b27      	ldr	r3, [pc, #156]	; (47f8 <spi_init+0x214>)
    475c:	4798      	blx	r3
    475e:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4760:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4762:	2b00      	cmp	r3, #0
    4764:	d000      	beq.n	4768 <spi_init+0x184>
    4766:	e747      	b.n	45f8 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    4768:	ab02      	add	r3, sp, #8
    476a:	3306      	adds	r3, #6
    476c:	781b      	ldrb	r3, [r3, #0]
    476e:	733b      	strb	r3, [r7, #12]
    4770:	e7d5      	b.n	471e <spi_init+0x13a>
	uint32_t ctrlb = 0;
    4772:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    4774:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    4776:	6873      	ldr	r3, [r6, #4]
    4778:	68b1      	ldr	r1, [r6, #8]
    477a:	430b      	orrs	r3, r1
    477c:	68f1      	ldr	r1, [r6, #12]
    477e:	430b      	orrs	r3, r1
    4780:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    4782:	7c31      	ldrb	r1, [r6, #16]
    4784:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    4786:	7c71      	ldrb	r1, [r6, #17]
    4788:	2900      	cmp	r1, #0
    478a:	d103      	bne.n	4794 <spi_init+0x1b0>
    478c:	491b      	ldr	r1, [pc, #108]	; (47fc <spi_init+0x218>)
    478e:	7889      	ldrb	r1, [r1, #2]
    4790:	0789      	lsls	r1, r1, #30
    4792:	d501      	bpl.n	4798 <spi_init+0x1b4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4794:	2180      	movs	r1, #128	; 0x80
    4796:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    4798:	7cb1      	ldrb	r1, [r6, #18]
    479a:	2900      	cmp	r1, #0
    479c:	d002      	beq.n	47a4 <spi_init+0x1c0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    479e:	2180      	movs	r1, #128	; 0x80
    47a0:	0289      	lsls	r1, r1, #10
    47a2:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    47a4:	7cf1      	ldrb	r1, [r6, #19]
    47a6:	2900      	cmp	r1, #0
    47a8:	d002      	beq.n	47b0 <spi_init+0x1cc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    47aa:	2180      	movs	r1, #128	; 0x80
    47ac:	0089      	lsls	r1, r1, #2
    47ae:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    47b0:	7d31      	ldrb	r1, [r6, #20]
    47b2:	2900      	cmp	r1, #0
    47b4:	d002      	beq.n	47bc <spi_init+0x1d8>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    47b6:	2180      	movs	r1, #128	; 0x80
    47b8:	0189      	lsls	r1, r1, #6
    47ba:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    47bc:	6839      	ldr	r1, [r7, #0]
    47be:	430b      	orrs	r3, r1
    47c0:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	431a      	orrs	r2, r3
    47c6:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    47c8:	2000      	movs	r0, #0
    47ca:	e715      	b.n	45f8 <spi_init+0x14>
    47cc:	0000510d 	.word	0x0000510d
    47d0:	40000800 	.word	0x40000800
    47d4:	00005fe1 	.word	0x00005fe1
    47d8:	00005f71 	.word	0x00005f71
    47dc:	00004fc1 	.word	0x00004fc1
    47e0:	00004c25 	.word	0x00004c25
    47e4:	00005159 	.word	0x00005159
    47e8:	20000b88 	.word	0x20000b88
    47ec:	0000500d 	.word	0x0000500d
    47f0:	000060dd 	.word	0x000060dd
    47f4:	00006005 	.word	0x00006005
    47f8:	00004f03 	.word	0x00004f03
    47fc:	41002000 	.word	0x41002000

00004800 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4800:	b5f0      	push	{r4, r5, r6, r7, lr}
    4802:	46d6      	mov	lr, sl
    4804:	464f      	mov	r7, r9
    4806:	b580      	push	{r7, lr}
    4808:	b083      	sub	sp, #12
    480a:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    480c:	2538      	movs	r5, #56	; 0x38
    480e:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4810:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    4812:	2e05      	cmp	r6, #5
    4814:	d075      	beq.n	4902 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    4816:	3512      	adds	r5, #18
	if (length == 0) {
    4818:	2a00      	cmp	r2, #0
    481a:	d072      	beq.n	4902 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    481c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    481e:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    4820:	2c00      	cmp	r4, #0
    4822:	d06e      	beq.n	4902 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    4824:	7944      	ldrb	r4, [r0, #5]
    4826:	2c00      	cmp	r4, #0
    4828:	d103      	bne.n	4832 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    482a:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    482c:	7e25      	ldrb	r5, [r4, #24]
    482e:	07a9      	lsls	r1, r5, #30
    4830:	d40a      	bmi.n	4848 <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    4832:	3a01      	subs	r2, #1
    4834:	b294      	uxth	r4, r2
    4836:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    4838:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    483a:	2102      	movs	r1, #2
    483c:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    483e:	2701      	movs	r7, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4840:	05db      	lsls	r3, r3, #23
    4842:	0ddb      	lsrs	r3, r3, #23
    4844:	469a      	mov	sl, r3
    4846:	e037      	b.n	48b8 <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4848:	2502      	movs	r5, #2
    484a:	7625      	strb	r5, [r4, #24]
    484c:	e7f1      	b.n	4832 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    484e:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4850:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    4852:	423b      	tst	r3, r7
    4854:	d0fc      	beq.n	4850 <spi_read_buffer_wait+0x50>
    4856:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    4858:	423b      	tst	r3, r7
    485a:	d009      	beq.n	4870 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    485c:	4653      	mov	r3, sl
    485e:	628b      	str	r3, [r1, #40]	; 0x28
    4860:	e02d      	b.n	48be <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4862:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    4864:	464d      	mov	r5, r9
    4866:	422b      	tst	r3, r5
    4868:	d138      	bne.n	48dc <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    486a:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    486c:	4213      	tst	r3, r2
    486e:	d045      	beq.n	48fc <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4870:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4872:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    4874:	4213      	tst	r3, r2
    4876:	d0fc      	beq.n	4872 <spi_read_buffer_wait+0x72>
    4878:	7e0b      	ldrb	r3, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    487a:	4213      	tst	r3, r2
    487c:	d040      	beq.n	4900 <spi_read_buffer_wait+0x100>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    487e:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    4880:	2500      	movs	r5, #0
    4882:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4884:	4213      	tst	r3, r2
    4886:	d002      	beq.n	488e <spi_read_buffer_wait+0x8e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4888:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    488a:	231e      	movs	r3, #30
    488c:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    488e:	7983      	ldrb	r3, [r0, #6]
    4890:	2b01      	cmp	r3, #1
    4892:	d027      	beq.n	48e4 <spi_read_buffer_wait+0xe4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4894:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    4896:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    4898:	9901      	ldr	r1, [sp, #4]
    489a:	2900      	cmp	r1, #0
    489c:	d137      	bne.n	490e <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    489e:	1c75      	adds	r5, r6, #1
    48a0:	b2ad      	uxth	r5, r5
    48a2:	4661      	mov	r1, ip
    48a4:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    48a6:	7981      	ldrb	r1, [r0, #6]
    48a8:	2901      	cmp	r1, #1
    48aa:	d01f      	beq.n	48ec <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    48ac:	002e      	movs	r6, r5
	while (length--) {
    48ae:	3c01      	subs	r4, #1
    48b0:	b2a4      	uxth	r4, r4
    48b2:	4b18      	ldr	r3, [pc, #96]	; (4914 <spi_read_buffer_wait+0x114>)
    48b4:	429c      	cmp	r4, r3
    48b6:	d01f      	beq.n	48f8 <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    48b8:	7943      	ldrb	r3, [r0, #5]
    48ba:	2b01      	cmp	r3, #1
    48bc:	d0c7      	beq.n	484e <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    48be:	7943      	ldrb	r3, [r0, #5]
    48c0:	2b00      	cmp	r3, #0
    48c2:	d1d5      	bne.n	4870 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    48c4:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    48c6:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    48c8:	4213      	tst	r3, r2
    48ca:	d1ca      	bne.n	4862 <spi_read_buffer_wait+0x62>
    48cc:	4b12      	ldr	r3, [pc, #72]	; (4918 <spi_read_buffer_wait+0x118>)
    48ce:	7e0d      	ldrb	r5, [r1, #24]
    48d0:	4215      	tst	r5, r2
    48d2:	d1c6      	bne.n	4862 <spi_read_buffer_wait+0x62>
    48d4:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    48d6:	2b00      	cmp	r3, #0
    48d8:	d1f9      	bne.n	48ce <spi_read_buffer_wait+0xce>
    48da:	e7c2      	b.n	4862 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    48dc:	2302      	movs	r3, #2
    48de:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    48e0:	2504      	movs	r5, #4
    48e2:	e00e      	b.n	4902 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    48e4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    48e6:	05db      	lsls	r3, r3, #23
    48e8:	0ddb      	lsrs	r3, r3, #23
    48ea:	e7d5      	b.n	4898 <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    48ec:	3602      	adds	r6, #2
    48ee:	b2b6      	uxth	r6, r6
    48f0:	0a1b      	lsrs	r3, r3, #8
    48f2:	4661      	mov	r1, ip
    48f4:	554b      	strb	r3, [r1, r5]
    48f6:	e7da      	b.n	48ae <spi_read_buffer_wait+0xae>
    48f8:	9d01      	ldr	r5, [sp, #4]
    48fa:	e002      	b.n	4902 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    48fc:	2512      	movs	r5, #18
    48fe:	e000      	b.n	4902 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    4900:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    4902:	0028      	movs	r0, r5
    4904:	b003      	add	sp, #12
    4906:	bc0c      	pop	{r2, r3}
    4908:	4691      	mov	r9, r2
    490a:	469a      	mov	sl, r3
    490c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    490e:	9d01      	ldr	r5, [sp, #4]
    4910:	e7f7      	b.n	4902 <spi_read_buffer_wait+0x102>
    4912:	46c0      	nop			; (mov r8, r8)
    4914:	0000ffff 	.word	0x0000ffff
    4918:	00002710 	.word	0x00002710

0000491c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    491c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    491e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4920:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    4922:	2c01      	cmp	r4, #1
    4924:	d001      	beq.n	492a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    4926:	0018      	movs	r0, r3
    4928:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    492a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    492c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    492e:	2c00      	cmp	r4, #0
    4930:	d1f9      	bne.n	4926 <spi_select_slave+0xa>
		if (select) {
    4932:	2a00      	cmp	r2, #0
    4934:	d05b      	beq.n	49ee <spi_select_slave+0xd2>
			if (slave->address_enabled) {
    4936:	784b      	ldrb	r3, [r1, #1]
    4938:	2b00      	cmp	r3, #0
    493a:	d046      	beq.n	49ca <spi_select_slave+0xae>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    493c:	6803      	ldr	r3, [r0, #0]
    493e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    4940:	07db      	lsls	r3, r3, #31
    4942:	d411      	bmi.n	4968 <spi_select_slave+0x4c>
					port_pin_set_output_level(slave->ss_pin, true);
    4944:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4946:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4948:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    494a:	2900      	cmp	r1, #0
    494c:	d105      	bne.n	495a <spi_select_slave+0x3e>
		return &(ports[port_index]->Group[group_index]);
    494e:	0953      	lsrs	r3, r2, #5
    4950:	01db      	lsls	r3, r3, #7
    4952:	2182      	movs	r1, #130	; 0x82
    4954:	05c9      	lsls	r1, r1, #23
    4956:	468c      	mov	ip, r1
    4958:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    495a:	211f      	movs	r1, #31
    495c:	4011      	ands	r1, r2
    495e:	2201      	movs	r2, #1
    4960:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4962:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    4964:	2305      	movs	r3, #5
    4966:	e7de      	b.n	4926 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4968:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    496a:	09d4      	lsrs	r4, r2, #7
		return NULL;
    496c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    496e:	2c00      	cmp	r4, #0
    4970:	d105      	bne.n	497e <spi_select_slave+0x62>
		return &(ports[port_index]->Group[group_index]);
    4972:	0953      	lsrs	r3, r2, #5
    4974:	01db      	lsls	r3, r3, #7
    4976:	2482      	movs	r4, #130	; 0x82
    4978:	05e4      	lsls	r4, r4, #23
    497a:	46a4      	mov	ip, r4
    497c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    497e:	241f      	movs	r4, #31
    4980:	4014      	ands	r4, r2
    4982:	2201      	movs	r2, #1
    4984:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4986:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4988:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    498a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    498c:	07d2      	lsls	r2, r2, #31
    498e:	d501      	bpl.n	4994 <spi_select_slave+0x78>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4990:	788a      	ldrb	r2, [r1, #2]
    4992:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    4994:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    4996:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    4998:	2a00      	cmp	r2, #0
    499a:	d1c4      	bne.n	4926 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    499c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    499e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    49a0:	7e13      	ldrb	r3, [r2, #24]
    49a2:	420b      	tst	r3, r1
    49a4:	d0fc      	beq.n	49a0 <spi_select_slave+0x84>
    49a6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    49a8:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    49aa:	0749      	lsls	r1, r1, #29
    49ac:	d5bb      	bpl.n	4926 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    49ae:	8b53      	ldrh	r3, [r2, #26]
    49b0:	075b      	lsls	r3, r3, #29
    49b2:	d501      	bpl.n	49b8 <spi_select_slave+0x9c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    49b4:	2304      	movs	r3, #4
    49b6:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    49b8:	7983      	ldrb	r3, [r0, #6]
    49ba:	2b01      	cmp	r3, #1
    49bc:	d002      	beq.n	49c4 <spi_select_slave+0xa8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    49be:	6a93      	ldr	r3, [r2, #40]	; 0x28
    49c0:	2300      	movs	r3, #0
    49c2:	e7b0      	b.n	4926 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    49c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    49c6:	2300      	movs	r3, #0
    49c8:	e7ad      	b.n	4926 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    49ca:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    49cc:	09d1      	lsrs	r1, r2, #7
		return NULL;
    49ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    49d0:	2900      	cmp	r1, #0
    49d2:	d105      	bne.n	49e0 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
    49d4:	0953      	lsrs	r3, r2, #5
    49d6:	01db      	lsls	r3, r3, #7
    49d8:	2182      	movs	r1, #130	; 0x82
    49da:	05c9      	lsls	r1, r1, #23
    49dc:	468c      	mov	ip, r1
    49de:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    49e0:	211f      	movs	r1, #31
    49e2:	4011      	ands	r1, r2
    49e4:	2201      	movs	r2, #1
    49e6:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    49e8:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    49ea:	2300      	movs	r3, #0
    49ec:	e79b      	b.n	4926 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    49ee:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    49f0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    49f2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    49f4:	2900      	cmp	r1, #0
    49f6:	d105      	bne.n	4a04 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
    49f8:	0953      	lsrs	r3, r2, #5
    49fa:	01db      	lsls	r3, r3, #7
    49fc:	2182      	movs	r1, #130	; 0x82
    49fe:	05c9      	lsls	r1, r1, #23
    4a00:	468c      	mov	ip, r1
    4a02:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4a04:	211f      	movs	r1, #31
    4a06:	4011      	ands	r1, r2
    4a08:	2201      	movs	r2, #1
    4a0a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4a0c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    4a0e:	2300      	movs	r3, #0
    4a10:	e789      	b.n	4926 <spi_select_slave+0xa>
	...

00004a14 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    4a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a16:	46de      	mov	lr, fp
    4a18:	4657      	mov	r7, sl
    4a1a:	464e      	mov	r6, r9
    4a1c:	4645      	mov	r5, r8
    4a1e:	b5e0      	push	{r5, r6, r7, lr}
    4a20:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4a22:	2338      	movs	r3, #56	; 0x38
    4a24:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4a26:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    4a28:	2c05      	cmp	r4, #5
    4a2a:	d002      	beq.n	4a32 <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    4a2c:	3312      	adds	r3, #18
	if (length == 0) {
    4a2e:	2a00      	cmp	r2, #0
    4a30:	d107      	bne.n	4a42 <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    4a32:	0018      	movs	r0, r3
    4a34:	b003      	add	sp, #12
    4a36:	bc3c      	pop	{r2, r3, r4, r5}
    4a38:	4690      	mov	r8, r2
    4a3a:	4699      	mov	r9, r3
    4a3c:	46a2      	mov	sl, r4
    4a3e:	46ab      	mov	fp, r5
    4a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    4a42:	7943      	ldrb	r3, [r0, #5]
    4a44:	2b00      	cmp	r3, #0
    4a46:	d103      	bne.n	4a50 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4a48:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4a4a:	7e1c      	ldrb	r4, [r3, #24]
    4a4c:	07a4      	lsls	r4, r4, #30
    4a4e:	d40a      	bmi.n	4a66 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    4a50:	4693      	mov	fp, r2
    4a52:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    4a54:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    4a56:	2502      	movs	r5, #2
    4a58:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    4a5a:	3502      	adds	r5, #2
    4a5c:	46a8      	mov	r8, r5
    4a5e:	3a01      	subs	r2, #1
    4a60:	b292      	uxth	r2, r2
    4a62:	468a      	mov	sl, r1
    4a64:	e023      	b.n	4aae <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4a66:	2402      	movs	r4, #2
    4a68:	761c      	strb	r4, [r3, #24]
    4a6a:	e7f1      	b.n	4a50 <spi_write_buffer_wait+0x3c>
    4a6c:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    4a6e:	4661      	mov	r1, ip
    4a70:	420d      	tst	r5, r1
    4a72:	d12e      	bne.n	4ad2 <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4a74:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    4a76:	421d      	tst	r5, r3
    4a78:	d100      	bne.n	4a7c <spi_write_buffer_wait+0x68>
    4a7a:	e0c2      	b.n	4c02 <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4a7c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4a7e:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    4a80:	421d      	tst	r5, r3
    4a82:	d0fc      	beq.n	4a7e <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    4a84:	1c67      	adds	r7, r4, #1
    4a86:	b2bf      	uxth	r7, r7
    4a88:	4651      	mov	r1, sl
    4a8a:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a8c:	7981      	ldrb	r1, [r0, #6]
    4a8e:	2901      	cmp	r1, #1
    4a90:	d023      	beq.n	4ada <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    4a92:	b2ad      	uxth	r5, r5
    4a94:	003c      	movs	r4, r7
    4a96:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    4a98:	421f      	tst	r7, r3
    4a9a:	d002      	beq.n	4aa2 <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4a9c:	05ed      	lsls	r5, r5, #23
    4a9e:	0ded      	lsrs	r5, r5, #23
    4aa0:	62b5      	str	r5, [r6, #40]	; 0x28
    4aa2:	1e55      	subs	r5, r2, #1
    4aa4:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    4aa6:	79c6      	ldrb	r6, [r0, #7]
    4aa8:	2e00      	cmp	r6, #0
    4aaa:	d11d      	bne.n	4ae8 <spi_write_buffer_wait+0xd4>
    4aac:	002a      	movs	r2, r5
	while (length--) {
    4aae:	4d5a      	ldr	r5, [pc, #360]	; (4c18 <spi_write_buffer_wait+0x204>)
    4ab0:	42aa      	cmp	r2, r5
    4ab2:	d070      	beq.n	4b96 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    4ab4:	7945      	ldrb	r5, [r0, #5]
    4ab6:	2d00      	cmp	r5, #0
    4ab8:	d1e0      	bne.n	4a7c <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4aba:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4abc:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    4abe:	421d      	tst	r5, r3
    4ac0:	d1d4      	bne.n	4a6c <spi_write_buffer_wait+0x58>
    4ac2:	4d56      	ldr	r5, [pc, #344]	; (4c1c <spi_write_buffer_wait+0x208>)
    4ac4:	7e37      	ldrb	r7, [r6, #24]
    4ac6:	421f      	tst	r7, r3
    4ac8:	d1d0      	bne.n	4a6c <spi_write_buffer_wait+0x58>
    4aca:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    4acc:	2d00      	cmp	r5, #0
    4ace:	d1f9      	bne.n	4ac4 <spi_write_buffer_wait+0xb0>
    4ad0:	e7cc      	b.n	4a6c <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4ad2:	2302      	movs	r3, #2
    4ad4:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    4ad6:	3302      	adds	r3, #2
    4ad8:	e7ab      	b.n	4a32 <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    4ada:	3402      	adds	r4, #2
    4adc:	b2a4      	uxth	r4, r4
    4ade:	4651      	mov	r1, sl
    4ae0:	5dcf      	ldrb	r7, [r1, r7]
    4ae2:	023f      	lsls	r7, r7, #8
    4ae4:	433d      	orrs	r5, r7
    4ae6:	e7d6      	b.n	4a96 <spi_write_buffer_wait+0x82>
    4ae8:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    4aea:	7945      	ldrb	r5, [r0, #5]
    4aec:	2d00      	cmp	r5, #0
    4aee:	d137      	bne.n	4b60 <spi_write_buffer_wait+0x14c>
    4af0:	4d4b      	ldr	r5, [pc, #300]	; (4c20 <spi_write_buffer_wait+0x20c>)
    4af2:	9101      	str	r1, [sp, #4]
    4af4:	e012      	b.n	4b1c <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    4af6:	3402      	adds	r4, #2
    4af8:	b2a4      	uxth	r4, r4
    4afa:	4649      	mov	r1, r9
    4afc:	9f01      	ldr	r7, [sp, #4]
    4afe:	5c79      	ldrb	r1, [r7, r1]
    4b00:	0209      	lsls	r1, r1, #8
    4b02:	9f00      	ldr	r7, [sp, #0]
    4b04:	430f      	orrs	r7, r1
    4b06:	e01b      	b.n	4b40 <spi_write_buffer_wait+0x12c>
						length--;
    4b08:	3a01      	subs	r2, #1
    4b0a:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    4b0c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4b0e:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    4b10:	4641      	mov	r1, r8
    4b12:	420f      	tst	r7, r1
    4b14:	d11b      	bne.n	4b4e <spi_write_buffer_wait+0x13a>
    4b16:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    4b18:	2d00      	cmp	r5, #0
    4b1a:	d018      	beq.n	4b4e <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    4b1c:	2a00      	cmp	r2, #0
    4b1e:	d0f5      	beq.n	4b0c <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4b20:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b22:	7e37      	ldrb	r7, [r6, #24]
    4b24:	421f      	tst	r7, r3
    4b26:	d0f1      	beq.n	4b0c <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    4b28:	1c67      	adds	r7, r4, #1
    4b2a:	b2b9      	uxth	r1, r7
    4b2c:	4689      	mov	r9, r1
    4b2e:	9901      	ldr	r1, [sp, #4]
    4b30:	5d09      	ldrb	r1, [r1, r4]
    4b32:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b34:	7981      	ldrb	r1, [r0, #6]
    4b36:	2901      	cmp	r1, #1
    4b38:	d0dd      	beq.n	4af6 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    4b3a:	4669      	mov	r1, sp
    4b3c:	880f      	ldrh	r7, [r1, #0]
    4b3e:	464c      	mov	r4, r9
    4b40:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    4b42:	4219      	tst	r1, r3
    4b44:	d0e0      	beq.n	4b08 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4b46:	05ff      	lsls	r7, r7, #23
    4b48:	0dff      	lsrs	r7, r7, #23
    4b4a:	62b7      	str	r7, [r6, #40]	; 0x28
    4b4c:	e7dc      	b.n	4b08 <spi_write_buffer_wait+0xf4>
    4b4e:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4b50:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    4b52:	4667      	mov	r7, ip
    4b54:	423d      	tst	r5, r7
    4b56:	d118      	bne.n	4b8a <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4b58:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    4b5a:	4646      	mov	r6, r8
    4b5c:	4235      	tst	r5, r6
    4b5e:	d052      	beq.n	4c06 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4b60:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4b62:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    4b64:	4647      	mov	r7, r8
    4b66:	423d      	tst	r5, r7
    4b68:	d0fb      	beq.n	4b62 <spi_write_buffer_wait+0x14e>
    4b6a:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    4b6c:	423d      	tst	r5, r7
    4b6e:	d007      	beq.n	4b80 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4b70:	8b75      	ldrh	r5, [r6, #26]
    4b72:	423d      	tst	r5, r7
    4b74:	d000      	beq.n	4b78 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4b76:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b78:	7985      	ldrb	r5, [r0, #6]
    4b7a:	2d01      	cmp	r5, #1
    4b7c:	d009      	beq.n	4b92 <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4b7e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    4b80:	465d      	mov	r5, fp
    4b82:	3d01      	subs	r5, #1
    4b84:	b2ad      	uxth	r5, r5
    4b86:	46ab      	mov	fp, r5
    4b88:	e769      	b.n	4a5e <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4b8a:	2302      	movs	r3, #2
    4b8c:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    4b8e:	3302      	adds	r3, #2
    4b90:	e74f      	b.n	4a32 <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4b92:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    4b94:	e7f4      	b.n	4b80 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    4b96:	7943      	ldrb	r3, [r0, #5]
    4b98:	2b01      	cmp	r3, #1
    4b9a:	d00b      	beq.n	4bb4 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    4b9c:	2b00      	cmp	r3, #0
    4b9e:	d134      	bne.n	4c0a <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    4ba0:	79c2      	ldrb	r2, [r0, #7]
    4ba2:	2a00      	cmp	r2, #0
    4ba4:	d100      	bne.n	4ba8 <spi_write_buffer_wait+0x194>
    4ba6:	e744      	b.n	4a32 <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    4ba8:	2404      	movs	r4, #4
			while (flush_length) {
    4baa:	465b      	mov	r3, fp
    4bac:	465d      	mov	r5, fp
    4bae:	2b00      	cmp	r3, #0
    4bb0:	d119      	bne.n	4be6 <spi_write_buffer_wait+0x1d2>
    4bb2:	e73e      	b.n	4a32 <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4bb4:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    4bb6:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4bb8:	7e0b      	ldrb	r3, [r1, #24]
    4bba:	4213      	tst	r3, r2
    4bbc:	d0fc      	beq.n	4bb8 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    4bbe:	2300      	movs	r3, #0
    4bc0:	e737      	b.n	4a32 <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4bc2:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    4bc4:	4223      	tst	r3, r4
    4bc6:	d022      	beq.n	4c0e <spi_write_buffer_wait+0x1fa>
    4bc8:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    4bca:	4223      	tst	r3, r4
    4bcc:	d007      	beq.n	4bde <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4bce:	8b4b      	ldrh	r3, [r1, #26]
    4bd0:	4223      	tst	r3, r4
    4bd2:	d000      	beq.n	4bd6 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4bd4:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4bd6:	7983      	ldrb	r3, [r0, #6]
    4bd8:	2b01      	cmp	r3, #1
    4bda:	d010      	beq.n	4bfe <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4bdc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    4bde:	3d01      	subs	r5, #1
    4be0:	b2ad      	uxth	r5, r5
			while (flush_length) {
    4be2:	2d00      	cmp	r5, #0
    4be4:	d015      	beq.n	4c12 <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4be6:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4be8:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    4bea:	4223      	tst	r3, r4
    4bec:	d1e9      	bne.n	4bc2 <spi_write_buffer_wait+0x1ae>
    4bee:	4b0b      	ldr	r3, [pc, #44]	; (4c1c <spi_write_buffer_wait+0x208>)
    4bf0:	7e0a      	ldrb	r2, [r1, #24]
    4bf2:	4222      	tst	r2, r4
    4bf4:	d1e5      	bne.n	4bc2 <spi_write_buffer_wait+0x1ae>
    4bf6:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d1f9      	bne.n	4bf0 <spi_write_buffer_wait+0x1dc>
    4bfc:	e7e1      	b.n	4bc2 <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4bfe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    4c00:	e7ed      	b.n	4bde <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    4c02:	2312      	movs	r3, #18
    4c04:	e715      	b.n	4a32 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    4c06:	2312      	movs	r3, #18
    4c08:	e713      	b.n	4a32 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    4c0a:	2300      	movs	r3, #0
    4c0c:	e711      	b.n	4a32 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    4c0e:	2312      	movs	r3, #18
    4c10:	e70f      	b.n	4a32 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    4c12:	2300      	movs	r3, #0
    4c14:	e70d      	b.n	4a32 <spi_write_buffer_wait+0x1e>
    4c16:	46c0      	nop			; (mov r8, r8)
    4c18:	0000ffff 	.word	0x0000ffff
    4c1c:	00002710 	.word	0x00002710
    4c20:	00002711 	.word	0x00002711

00004c24 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    4c26:	0080      	lsls	r0, r0, #2
    4c28:	4b85      	ldr	r3, [pc, #532]	; (4e40 <_spi_interrupt_handler+0x21c>)
    4c2a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4c2c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4c2e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    4c30:	5ce3      	ldrb	r3, [r4, r3]
    4c32:	2236      	movs	r2, #54	; 0x36
    4c34:	5ca7      	ldrb	r7, [r4, r2]
    4c36:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4c38:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    4c3a:	7db5      	ldrb	r5, [r6, #22]
    4c3c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4c3e:	07eb      	lsls	r3, r5, #31
    4c40:	d52e      	bpl.n	4ca0 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4c42:	7963      	ldrb	r3, [r4, #5]
    4c44:	2b01      	cmp	r3, #1
    4c46:	d025      	beq.n	4c94 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    4c48:	2b00      	cmp	r3, #0
    4c4a:	d129      	bne.n	4ca0 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    4c4c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    4c4e:	2b00      	cmp	r3, #0
    4c50:	d026      	beq.n	4ca0 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4c52:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4c54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4c56:	7813      	ldrb	r3, [r2, #0]
    4c58:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    4c5a:	1c50      	adds	r0, r2, #1
    4c5c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c5e:	79a0      	ldrb	r0, [r4, #6]
    4c60:	2801      	cmp	r0, #1
    4c62:	d100      	bne.n	4c66 <_spi_interrupt_handler+0x42>
    4c64:	e069      	b.n	4d3a <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4c66:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4c68:	05db      	lsls	r3, r3, #23
    4c6a:	0ddb      	lsrs	r3, r3, #23
    4c6c:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    4c6e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4c70:	3b01      	subs	r3, #1
    4c72:	b29b      	uxth	r3, r3
    4c74:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    4c76:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4c78:	b29b      	uxth	r3, r3
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	d110      	bne.n	4ca0 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4c7e:	3301      	adds	r3, #1
    4c80:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4c82:	7a63      	ldrb	r3, [r4, #9]
    4c84:	2b01      	cmp	r3, #1
    4c86:	d10b      	bne.n	4ca0 <_spi_interrupt_handler+0x7c>
    4c88:	79e3      	ldrb	r3, [r4, #7]
    4c8a:	2b00      	cmp	r3, #0
    4c8c:	d108      	bne.n	4ca0 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4c8e:	3302      	adds	r3, #2
    4c90:	75b3      	strb	r3, [r6, #22]
    4c92:	e005      	b.n	4ca0 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    4c94:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4c96:	2b00      	cmp	r3, #0
    4c98:	d03e      	beq.n	4d18 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    4c9a:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    4c9c:	2b00      	cmp	r3, #0
    4c9e:	d1d8      	bne.n	4c52 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4ca0:	076b      	lsls	r3, r5, #29
    4ca2:	d511      	bpl.n	4cc8 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4ca4:	8b73      	ldrh	r3, [r6, #26]
    4ca6:	075b      	lsls	r3, r3, #29
    4ca8:	d551      	bpl.n	4d4e <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4caa:	7a63      	ldrb	r3, [r4, #9]
    4cac:	2b01      	cmp	r3, #1
    4cae:	d008      	beq.n	4cc2 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4cb0:	221e      	movs	r2, #30
    4cb2:	2338      	movs	r3, #56	; 0x38
    4cb4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4cb6:	3b35      	subs	r3, #53	; 0x35
    4cb8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4cba:	3302      	adds	r3, #2
    4cbc:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4cbe:	073b      	lsls	r3, r7, #28
    4cc0:	d441      	bmi.n	4d46 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4cc2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4cc4:	2304      	movs	r3, #4
    4cc6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4cc8:	07ab      	lsls	r3, r5, #30
    4cca:	d515      	bpl.n	4cf8 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    4ccc:	7963      	ldrb	r3, [r4, #5]
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d10e      	bne.n	4cf0 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    4cd2:	3307      	adds	r3, #7
    4cd4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4cd6:	3b05      	subs	r3, #5
    4cd8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    4cda:	3301      	adds	r3, #1
    4cdc:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    4cde:	2300      	movs	r3, #0
    4ce0:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    4ce2:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    4ce4:	3338      	adds	r3, #56	; 0x38
    4ce6:	2200      	movs	r2, #0
    4ce8:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    4cea:	06fb      	lsls	r3, r7, #27
    4cec:	d500      	bpl.n	4cf0 <_spi_interrupt_handler+0xcc>
    4cee:	e07f      	b.n	4df0 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4cf0:	7963      	ldrb	r3, [r4, #5]
    4cf2:	2b01      	cmp	r3, #1
    4cf4:	d100      	bne.n	4cf8 <_spi_interrupt_handler+0xd4>
    4cf6:	e07f      	b.n	4df8 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    4cf8:	072b      	lsls	r3, r5, #28
    4cfa:	d508      	bpl.n	4d0e <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    4cfc:	7963      	ldrb	r3, [r4, #5]
    4cfe:	2b00      	cmp	r3, #0
    4d00:	d105      	bne.n	4d0e <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    4d02:	3308      	adds	r3, #8
    4d04:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    4d06:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    4d08:	06bb      	lsls	r3, r7, #26
    4d0a:	d500      	bpl.n	4d0e <_spi_interrupt_handler+0xea>
    4d0c:	e08a      	b.n	4e24 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4d0e:	b26d      	sxtb	r5, r5
    4d10:	2d00      	cmp	r5, #0
    4d12:	da00      	bge.n	4d16 <_spi_interrupt_handler+0xf2>
    4d14:	e08a      	b.n	4e2c <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    4d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    4d18:	4b4a      	ldr	r3, [pc, #296]	; (4e44 <_spi_interrupt_handler+0x220>)
    4d1a:	881b      	ldrh	r3, [r3, #0]
    4d1c:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4d1e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4d20:	3b01      	subs	r3, #1
    4d22:	b29b      	uxth	r3, r3
    4d24:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    4d26:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4d28:	b29b      	uxth	r3, r3
    4d2a:	2b00      	cmp	r3, #0
    4d2c:	d101      	bne.n	4d32 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4d2e:	3301      	adds	r3, #1
    4d30:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    4d32:	7963      	ldrb	r3, [r4, #5]
		if (0
    4d34:	2b01      	cmp	r3, #1
    4d36:	d0b0      	beq.n	4c9a <_spi_interrupt_handler+0x76>
    4d38:	e786      	b.n	4c48 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4d3a:	7850      	ldrb	r0, [r2, #1]
    4d3c:	0200      	lsls	r0, r0, #8
    4d3e:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    4d40:	3202      	adds	r2, #2
    4d42:	62e2      	str	r2, [r4, #44]	; 0x2c
    4d44:	e790      	b.n	4c68 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4d46:	0020      	movs	r0, r4
    4d48:	69a3      	ldr	r3, [r4, #24]
    4d4a:	4798      	blx	r3
    4d4c:	e7b9      	b.n	4cc2 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    4d4e:	7a63      	ldrb	r3, [r4, #9]
    4d50:	2b01      	cmp	r3, #1
    4d52:	d027      	beq.n	4da4 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4d54:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d58:	05db      	lsls	r3, r3, #23
    4d5a:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    4d5c:	b2da      	uxtb	r2, r3
    4d5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4d60:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    4d62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4d64:	1c51      	adds	r1, r2, #1
    4d66:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d68:	79a1      	ldrb	r1, [r4, #6]
    4d6a:	2901      	cmp	r1, #1
    4d6c:	d033      	beq.n	4dd6 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    4d6e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4d70:	3b01      	subs	r3, #1
    4d72:	b29b      	uxth	r3, r3
    4d74:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    4d76:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4d78:	b29b      	uxth	r3, r3
    4d7a:	2b00      	cmp	r3, #0
    4d7c:	d1a4      	bne.n	4cc8 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    4d7e:	2200      	movs	r2, #0
    4d80:	3338      	adds	r3, #56	; 0x38
    4d82:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4d84:	3b34      	subs	r3, #52	; 0x34
    4d86:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4d88:	7a63      	ldrb	r3, [r4, #9]
    4d8a:	2b02      	cmp	r3, #2
    4d8c:	d029      	beq.n	4de2 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    4d8e:	7a63      	ldrb	r3, [r4, #9]
    4d90:	2b00      	cmp	r3, #0
    4d92:	d000      	beq.n	4d96 <_spi_interrupt_handler+0x172>
    4d94:	e798      	b.n	4cc8 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4d96:	07bb      	lsls	r3, r7, #30
    4d98:	d400      	bmi.n	4d9c <_spi_interrupt_handler+0x178>
    4d9a:	e795      	b.n	4cc8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4d9c:	0020      	movs	r0, r4
    4d9e:	6923      	ldr	r3, [r4, #16]
    4da0:	4798      	blx	r3
    4da2:	e791      	b.n	4cc8 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4da4:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    4da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4da8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4daa:	3b01      	subs	r3, #1
    4dac:	b29b      	uxth	r3, r3
    4dae:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    4db0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4db2:	b29b      	uxth	r3, r3
    4db4:	2b00      	cmp	r3, #0
    4db6:	d000      	beq.n	4dba <_spi_interrupt_handler+0x196>
    4db8:	e786      	b.n	4cc8 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4dba:	3304      	adds	r3, #4
    4dbc:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    4dbe:	2200      	movs	r2, #0
    4dc0:	3334      	adds	r3, #52	; 0x34
    4dc2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    4dc4:	3b35      	subs	r3, #53	; 0x35
    4dc6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    4dc8:	07fb      	lsls	r3, r7, #31
    4dca:	d400      	bmi.n	4dce <_spi_interrupt_handler+0x1aa>
    4dcc:	e77c      	b.n	4cc8 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4dce:	0020      	movs	r0, r4
    4dd0:	68e3      	ldr	r3, [r4, #12]
    4dd2:	4798      	blx	r3
    4dd4:	e778      	b.n	4cc8 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4dd6:	0a1b      	lsrs	r3, r3, #8
    4dd8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    4dda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4ddc:	3301      	adds	r3, #1
    4dde:	62a3      	str	r3, [r4, #40]	; 0x28
    4de0:	e7c5      	b.n	4d6e <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4de2:	077b      	lsls	r3, r7, #29
    4de4:	d400      	bmi.n	4de8 <_spi_interrupt_handler+0x1c4>
    4de6:	e76f      	b.n	4cc8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4de8:	0020      	movs	r0, r4
    4dea:	6963      	ldr	r3, [r4, #20]
    4dec:	4798      	blx	r3
    4dee:	e76b      	b.n	4cc8 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    4df0:	0020      	movs	r0, r4
    4df2:	69e3      	ldr	r3, [r4, #28]
    4df4:	4798      	blx	r3
    4df6:	e77b      	b.n	4cf0 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4df8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4dfa:	2b01      	cmp	r3, #1
    4dfc:	d000      	beq.n	4e00 <_spi_interrupt_handler+0x1dc>
    4dfe:	e786      	b.n	4d0e <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4e00:	79e3      	ldrb	r3, [r4, #7]
    4e02:	2b00      	cmp	r3, #0
    4e04:	d000      	beq.n	4e08 <_spi_interrupt_handler+0x1e4>
    4e06:	e782      	b.n	4d0e <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4e08:	3302      	adds	r3, #2
    4e0a:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    4e0c:	3301      	adds	r3, #1
    4e0e:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    4e10:	2200      	movs	r2, #0
    4e12:	3335      	adds	r3, #53	; 0x35
    4e14:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4e16:	07fb      	lsls	r3, r7, #31
    4e18:	d400      	bmi.n	4e1c <_spi_interrupt_handler+0x1f8>
    4e1a:	e76d      	b.n	4cf8 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4e1c:	0020      	movs	r0, r4
    4e1e:	68e3      	ldr	r3, [r4, #12]
    4e20:	4798      	blx	r3
    4e22:	e769      	b.n	4cf8 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    4e24:	0020      	movs	r0, r4
    4e26:	6a23      	ldr	r3, [r4, #32]
    4e28:	4798      	blx	r3
    4e2a:	e770      	b.n	4d0e <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4e2c:	2380      	movs	r3, #128	; 0x80
    4e2e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4e30:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4e32:	067b      	lsls	r3, r7, #25
    4e34:	d400      	bmi.n	4e38 <_spi_interrupt_handler+0x214>
    4e36:	e76e      	b.n	4d16 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4e3a:	0020      	movs	r0, r4
    4e3c:	4798      	blx	r3
}
    4e3e:	e76a      	b.n	4d16 <_spi_interrupt_handler+0xf2>
    4e40:	20000b88 	.word	0x20000b88
    4e44:	20000b84 	.word	0x20000b84

00004e48 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e4a:	46de      	mov	lr, fp
    4e4c:	4657      	mov	r7, sl
    4e4e:	464e      	mov	r6, r9
    4e50:	4645      	mov	r5, r8
    4e52:	b5e0      	push	{r5, r6, r7, lr}
    4e54:	b087      	sub	sp, #28
    4e56:	4680      	mov	r8, r0
    4e58:	9104      	str	r1, [sp, #16]
    4e5a:	0016      	movs	r6, r2
    4e5c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4e5e:	2200      	movs	r2, #0
    4e60:	2300      	movs	r3, #0
    4e62:	2100      	movs	r1, #0
    4e64:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    4e66:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4e68:	2001      	movs	r0, #1
    4e6a:	0021      	movs	r1, r4
    4e6c:	9600      	str	r6, [sp, #0]
    4e6e:	9701      	str	r7, [sp, #4]
    4e70:	465c      	mov	r4, fp
    4e72:	9403      	str	r4, [sp, #12]
    4e74:	4644      	mov	r4, r8
    4e76:	9405      	str	r4, [sp, #20]
    4e78:	e013      	b.n	4ea2 <long_division+0x5a>
    4e7a:	2420      	movs	r4, #32
    4e7c:	1a64      	subs	r4, r4, r1
    4e7e:	0005      	movs	r5, r0
    4e80:	40e5      	lsrs	r5, r4
    4e82:	46a8      	mov	r8, r5
    4e84:	e014      	b.n	4eb0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    4e86:	9c00      	ldr	r4, [sp, #0]
    4e88:	9d01      	ldr	r5, [sp, #4]
    4e8a:	1b12      	subs	r2, r2, r4
    4e8c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4e8e:	465c      	mov	r4, fp
    4e90:	464d      	mov	r5, r9
    4e92:	432c      	orrs	r4, r5
    4e94:	46a3      	mov	fp, r4
    4e96:	9c03      	ldr	r4, [sp, #12]
    4e98:	4645      	mov	r5, r8
    4e9a:	432c      	orrs	r4, r5
    4e9c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4e9e:	3901      	subs	r1, #1
    4ea0:	d325      	bcc.n	4eee <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4ea2:	2420      	movs	r4, #32
    4ea4:	4264      	negs	r4, r4
    4ea6:	190c      	adds	r4, r1, r4
    4ea8:	d4e7      	bmi.n	4e7a <long_division+0x32>
    4eaa:	0005      	movs	r5, r0
    4eac:	40a5      	lsls	r5, r4
    4eae:	46a8      	mov	r8, r5
    4eb0:	0004      	movs	r4, r0
    4eb2:	408c      	lsls	r4, r1
    4eb4:	46a1      	mov	r9, r4
		r = r << 1;
    4eb6:	1892      	adds	r2, r2, r2
    4eb8:	415b      	adcs	r3, r3
    4eba:	0014      	movs	r4, r2
    4ebc:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4ebe:	9e05      	ldr	r6, [sp, #20]
    4ec0:	464f      	mov	r7, r9
    4ec2:	403e      	ands	r6, r7
    4ec4:	46b4      	mov	ip, r6
    4ec6:	9e04      	ldr	r6, [sp, #16]
    4ec8:	4647      	mov	r7, r8
    4eca:	403e      	ands	r6, r7
    4ecc:	46b2      	mov	sl, r6
    4ece:	4666      	mov	r6, ip
    4ed0:	4657      	mov	r7, sl
    4ed2:	433e      	orrs	r6, r7
    4ed4:	d003      	beq.n	4ede <long_division+0x96>
			r |= 0x01;
    4ed6:	0006      	movs	r6, r0
    4ed8:	4326      	orrs	r6, r4
    4eda:	0032      	movs	r2, r6
    4edc:	002b      	movs	r3, r5
		if (r >= d) {
    4ede:	9c00      	ldr	r4, [sp, #0]
    4ee0:	9d01      	ldr	r5, [sp, #4]
    4ee2:	429d      	cmp	r5, r3
    4ee4:	d8db      	bhi.n	4e9e <long_division+0x56>
    4ee6:	d1ce      	bne.n	4e86 <long_division+0x3e>
    4ee8:	4294      	cmp	r4, r2
    4eea:	d8d8      	bhi.n	4e9e <long_division+0x56>
    4eec:	e7cb      	b.n	4e86 <long_division+0x3e>
    4eee:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4ef0:	4658      	mov	r0, fp
    4ef2:	0019      	movs	r1, r3
    4ef4:	b007      	add	sp, #28
    4ef6:	bc3c      	pop	{r2, r3, r4, r5}
    4ef8:	4690      	mov	r8, r2
    4efa:	4699      	mov	r9, r3
    4efc:	46a2      	mov	sl, r4
    4efe:	46ab      	mov	fp, r5
    4f00:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004f02 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4f02:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4f04:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4f06:	2340      	movs	r3, #64	; 0x40
    4f08:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    4f0a:	4281      	cmp	r1, r0
    4f0c:	d202      	bcs.n	4f14 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    4f0e:	0018      	movs	r0, r3
    4f10:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4f12:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4f14:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4f16:	1c63      	adds	r3, r4, #1
    4f18:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    4f1a:	4288      	cmp	r0, r1
    4f1c:	d9f9      	bls.n	4f12 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4f1e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4f20:	2cff      	cmp	r4, #255	; 0xff
    4f22:	d8f4      	bhi.n	4f0e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4f24:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4f26:	2300      	movs	r3, #0
    4f28:	e7f1      	b.n	4f0e <_sercom_get_sync_baud_val+0xc>
	...

00004f2c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f2e:	b083      	sub	sp, #12
    4f30:	000f      	movs	r7, r1
    4f32:	0016      	movs	r6, r2
    4f34:	aa08      	add	r2, sp, #32
    4f36:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4f38:	0004      	movs	r4, r0
    4f3a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4f3c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    4f3e:	42bc      	cmp	r4, r7
    4f40:	d902      	bls.n	4f48 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4f42:	0010      	movs	r0, r2
    4f44:	b003      	add	sp, #12
    4f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4f48:	2b00      	cmp	r3, #0
    4f4a:	d114      	bne.n	4f76 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4f4c:	0002      	movs	r2, r0
    4f4e:	0008      	movs	r0, r1
    4f50:	2100      	movs	r1, #0
    4f52:	4c19      	ldr	r4, [pc, #100]	; (4fb8 <_sercom_get_async_baud_val+0x8c>)
    4f54:	47a0      	blx	r4
    4f56:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    4f58:	003a      	movs	r2, r7
    4f5a:	2300      	movs	r3, #0
    4f5c:	2000      	movs	r0, #0
    4f5e:	4c17      	ldr	r4, [pc, #92]	; (4fbc <_sercom_get_async_baud_val+0x90>)
    4f60:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4f62:	2200      	movs	r2, #0
    4f64:	2301      	movs	r3, #1
    4f66:	1a12      	subs	r2, r2, r0
    4f68:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    4f6a:	0c12      	lsrs	r2, r2, #16
    4f6c:	041b      	lsls	r3, r3, #16
    4f6e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4f70:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4f72:	2200      	movs	r2, #0
    4f74:	e7e5      	b.n	4f42 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    4f76:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4f78:	2b01      	cmp	r3, #1
    4f7a:	d1f9      	bne.n	4f70 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4f7c:	000a      	movs	r2, r1
    4f7e:	2300      	movs	r3, #0
    4f80:	2100      	movs	r1, #0
    4f82:	4c0d      	ldr	r4, [pc, #52]	; (4fb8 <_sercom_get_async_baud_val+0x8c>)
    4f84:	47a0      	blx	r4
    4f86:	0002      	movs	r2, r0
    4f88:	000b      	movs	r3, r1
    4f8a:	9200      	str	r2, [sp, #0]
    4f8c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4f8e:	0038      	movs	r0, r7
    4f90:	2100      	movs	r1, #0
    4f92:	4c0a      	ldr	r4, [pc, #40]	; (4fbc <_sercom_get_async_baud_val+0x90>)
    4f94:	47a0      	blx	r4
    4f96:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4f98:	2380      	movs	r3, #128	; 0x80
    4f9a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4f9c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    4f9e:	4298      	cmp	r0, r3
    4fa0:	d8cf      	bhi.n	4f42 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4fa2:	0f79      	lsrs	r1, r7, #29
    4fa4:	00f8      	lsls	r0, r7, #3
    4fa6:	9a00      	ldr	r2, [sp, #0]
    4fa8:	9b01      	ldr	r3, [sp, #4]
    4faa:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4fac:	00ea      	lsls	r2, r5, #3
    4fae:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4fb0:	b2d2      	uxtb	r2, r2
    4fb2:	0352      	lsls	r2, r2, #13
    4fb4:	432a      	orrs	r2, r5
    4fb6:	e7db      	b.n	4f70 <_sercom_get_async_baud_val+0x44>
    4fb8:	00006765 	.word	0x00006765
    4fbc:	00004e49 	.word	0x00004e49

00004fc0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4fc0:	b510      	push	{r4, lr}
    4fc2:	b082      	sub	sp, #8
    4fc4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4fc6:	4b0e      	ldr	r3, [pc, #56]	; (5000 <sercom_set_gclk_generator+0x40>)
    4fc8:	781b      	ldrb	r3, [r3, #0]
    4fca:	2b00      	cmp	r3, #0
    4fcc:	d007      	beq.n	4fde <sercom_set_gclk_generator+0x1e>
    4fce:	2900      	cmp	r1, #0
    4fd0:	d105      	bne.n	4fde <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4fd2:	4b0b      	ldr	r3, [pc, #44]	; (5000 <sercom_set_gclk_generator+0x40>)
    4fd4:	785b      	ldrb	r3, [r3, #1]
    4fd6:	4283      	cmp	r3, r0
    4fd8:	d010      	beq.n	4ffc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4fda:	201d      	movs	r0, #29
    4fdc:	e00c      	b.n	4ff8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4fde:	a901      	add	r1, sp, #4
    4fe0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4fe2:	2012      	movs	r0, #18
    4fe4:	4b07      	ldr	r3, [pc, #28]	; (5004 <sercom_set_gclk_generator+0x44>)
    4fe6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4fe8:	2012      	movs	r0, #18
    4fea:	4b07      	ldr	r3, [pc, #28]	; (5008 <sercom_set_gclk_generator+0x48>)
    4fec:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    4fee:	4b04      	ldr	r3, [pc, #16]	; (5000 <sercom_set_gclk_generator+0x40>)
    4ff0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4ff2:	2201      	movs	r2, #1
    4ff4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4ff6:	2000      	movs	r0, #0
}
    4ff8:	b002      	add	sp, #8
    4ffa:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4ffc:	2000      	movs	r0, #0
    4ffe:	e7fb      	b.n	4ff8 <sercom_set_gclk_generator+0x38>
    5000:	20000a84 	.word	0x20000a84
    5004:	00005fe1 	.word	0x00005fe1
    5008:	00005f71 	.word	0x00005f71

0000500c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    500c:	4b2b      	ldr	r3, [pc, #172]	; (50bc <_sercom_get_default_pad+0xb0>)
    500e:	4298      	cmp	r0, r3
    5010:	d023      	beq.n	505a <_sercom_get_default_pad+0x4e>
    5012:	d90f      	bls.n	5034 <_sercom_get_default_pad+0x28>
    5014:	4b2a      	ldr	r3, [pc, #168]	; (50c0 <_sercom_get_default_pad+0xb4>)
    5016:	4298      	cmp	r0, r3
    5018:	d02f      	beq.n	507a <_sercom_get_default_pad+0x6e>
    501a:	4b2a      	ldr	r3, [pc, #168]	; (50c4 <_sercom_get_default_pad+0xb8>)
    501c:	4298      	cmp	r0, r3
    501e:	d142      	bne.n	50a6 <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5020:	2901      	cmp	r1, #1
    5022:	d03a      	beq.n	509a <_sercom_get_default_pad+0x8e>
    5024:	2900      	cmp	r1, #0
    5026:	d046      	beq.n	50b6 <_sercom_get_default_pad+0xaa>
    5028:	2902      	cmp	r1, #2
    502a:	d038      	beq.n	509e <_sercom_get_default_pad+0x92>
    502c:	2903      	cmp	r1, #3
    502e:	d038      	beq.n	50a2 <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
    5030:	2000      	movs	r0, #0
    5032:	e039      	b.n	50a8 <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
    5034:	4b24      	ldr	r3, [pc, #144]	; (50c8 <_sercom_get_default_pad+0xbc>)
    5036:	4298      	cmp	r0, r3
    5038:	d135      	bne.n	50a6 <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    503a:	2901      	cmp	r1, #1
    503c:	d007      	beq.n	504e <_sercom_get_default_pad+0x42>
    503e:	2900      	cmp	r1, #0
    5040:	d033      	beq.n	50aa <_sercom_get_default_pad+0x9e>
    5042:	2902      	cmp	r1, #2
    5044:	d005      	beq.n	5052 <_sercom_get_default_pad+0x46>
    5046:	2903      	cmp	r1, #3
    5048:	d005      	beq.n	5056 <_sercom_get_default_pad+0x4a>
	return 0;
    504a:	2000      	movs	r0, #0
    504c:	e02c      	b.n	50a8 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    504e:	481f      	ldr	r0, [pc, #124]	; (50cc <_sercom_get_default_pad+0xc0>)
    5050:	e02a      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    5052:	481f      	ldr	r0, [pc, #124]	; (50d0 <_sercom_get_default_pad+0xc4>)
    5054:	e028      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    5056:	481f      	ldr	r0, [pc, #124]	; (50d4 <_sercom_get_default_pad+0xc8>)
    5058:	e026      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    505a:	2901      	cmp	r1, #1
    505c:	d007      	beq.n	506e <_sercom_get_default_pad+0x62>
    505e:	2900      	cmp	r1, #0
    5060:	d025      	beq.n	50ae <_sercom_get_default_pad+0xa2>
    5062:	2902      	cmp	r1, #2
    5064:	d005      	beq.n	5072 <_sercom_get_default_pad+0x66>
    5066:	2903      	cmp	r1, #3
    5068:	d005      	beq.n	5076 <_sercom_get_default_pad+0x6a>
	return 0;
    506a:	2000      	movs	r0, #0
    506c:	e01c      	b.n	50a8 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    506e:	481a      	ldr	r0, [pc, #104]	; (50d8 <_sercom_get_default_pad+0xcc>)
    5070:	e01a      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    5072:	481a      	ldr	r0, [pc, #104]	; (50dc <_sercom_get_default_pad+0xd0>)
    5074:	e018      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    5076:	481a      	ldr	r0, [pc, #104]	; (50e0 <_sercom_get_default_pad+0xd4>)
    5078:	e016      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    507a:	2901      	cmp	r1, #1
    507c:	d007      	beq.n	508e <_sercom_get_default_pad+0x82>
    507e:	2900      	cmp	r1, #0
    5080:	d017      	beq.n	50b2 <_sercom_get_default_pad+0xa6>
    5082:	2902      	cmp	r1, #2
    5084:	d005      	beq.n	5092 <_sercom_get_default_pad+0x86>
    5086:	2903      	cmp	r1, #3
    5088:	d005      	beq.n	5096 <_sercom_get_default_pad+0x8a>
	return 0;
    508a:	2000      	movs	r0, #0
    508c:	e00c      	b.n	50a8 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    508e:	4815      	ldr	r0, [pc, #84]	; (50e4 <_sercom_get_default_pad+0xd8>)
    5090:	e00a      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    5092:	4815      	ldr	r0, [pc, #84]	; (50e8 <_sercom_get_default_pad+0xdc>)
    5094:	e008      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    5096:	4815      	ldr	r0, [pc, #84]	; (50ec <_sercom_get_default_pad+0xe0>)
    5098:	e006      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    509a:	4815      	ldr	r0, [pc, #84]	; (50f0 <_sercom_get_default_pad+0xe4>)
    509c:	e004      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    509e:	4815      	ldr	r0, [pc, #84]	; (50f4 <_sercom_get_default_pad+0xe8>)
    50a0:	e002      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    50a2:	4815      	ldr	r0, [pc, #84]	; (50f8 <_sercom_get_default_pad+0xec>)
    50a4:	e000      	b.n	50a8 <_sercom_get_default_pad+0x9c>
	return 0;
    50a6:	2000      	movs	r0, #0
}
    50a8:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    50aa:	4814      	ldr	r0, [pc, #80]	; (50fc <_sercom_get_default_pad+0xf0>)
    50ac:	e7fc      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    50ae:	4814      	ldr	r0, [pc, #80]	; (5100 <_sercom_get_default_pad+0xf4>)
    50b0:	e7fa      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    50b2:	4814      	ldr	r0, [pc, #80]	; (5104 <_sercom_get_default_pad+0xf8>)
    50b4:	e7f8      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    50b6:	4814      	ldr	r0, [pc, #80]	; (5108 <_sercom_get_default_pad+0xfc>)
    50b8:	e7f6      	b.n	50a8 <_sercom_get_default_pad+0x9c>
    50ba:	46c0      	nop			; (mov r8, r8)
    50bc:	42000800 	.word	0x42000800
    50c0:	42000c00 	.word	0x42000c00
    50c4:	42001000 	.word	0x42001000
    50c8:	42000400 	.word	0x42000400
    50cc:	00050003 	.word	0x00050003
    50d0:	00060003 	.word	0x00060003
    50d4:	00070003 	.word	0x00070003
    50d8:	00110002 	.word	0x00110002
    50dc:	00120002 	.word	0x00120002
    50e0:	00130002 	.word	0x00130002
    50e4:	00090003 	.word	0x00090003
    50e8:	000a0003 	.word	0x000a0003
    50ec:	000b0003 	.word	0x000b0003
    50f0:	00170002 	.word	0x00170002
    50f4:	00180002 	.word	0x00180002
    50f8:	00190002 	.word	0x00190002
    50fc:	00040003 	.word	0x00040003
    5100:	00100002 	.word	0x00100002
    5104:	00080003 	.word	0x00080003
    5108:	00160002 	.word	0x00160002

0000510c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    510c:	b530      	push	{r4, r5, lr}
    510e:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5110:	466a      	mov	r2, sp
    5112:	4b0f      	ldr	r3, [pc, #60]	; (5150 <_sercom_get_sercom_inst_index+0x44>)
    5114:	cb32      	ldmia	r3!, {r1, r4, r5}
    5116:	c232      	stmia	r2!, {r1, r4, r5}
    5118:	681b      	ldr	r3, [r3, #0]
    511a:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    511c:	0003      	movs	r3, r0
    511e:	9a00      	ldr	r2, [sp, #0]
    5120:	4282      	cmp	r2, r0
    5122:	d011      	beq.n	5148 <_sercom_get_sercom_inst_index+0x3c>
    5124:	9a01      	ldr	r2, [sp, #4]
    5126:	4282      	cmp	r2, r0
    5128:	d00a      	beq.n	5140 <_sercom_get_sercom_inst_index+0x34>
    512a:	9a02      	ldr	r2, [sp, #8]
    512c:	4282      	cmp	r2, r0
    512e:	d009      	beq.n	5144 <_sercom_get_sercom_inst_index+0x38>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5130:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5132:	9a03      	ldr	r2, [sp, #12]
    5134:	429a      	cmp	r2, r3
    5136:	d001      	beq.n	513c <_sercom_get_sercom_inst_index+0x30>
}
    5138:	b005      	add	sp, #20
    513a:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    513c:	3003      	adds	r0, #3
    513e:	e004      	b.n	514a <_sercom_get_sercom_inst_index+0x3e>
    5140:	2001      	movs	r0, #1
    5142:	e002      	b.n	514a <_sercom_get_sercom_inst_index+0x3e>
    5144:	2002      	movs	r0, #2
    5146:	e000      	b.n	514a <_sercom_get_sercom_inst_index+0x3e>
    5148:	2000      	movs	r0, #0
			return i;
    514a:	b2c0      	uxtb	r0, r0
    514c:	e7f4      	b.n	5138 <_sercom_get_sercom_inst_index+0x2c>
    514e:	46c0      	nop			; (mov r8, r8)
    5150:	00009ec8 	.word	0x00009ec8

00005154 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    5154:	4770      	bx	lr
	...

00005158 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5158:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    515a:	4b0b      	ldr	r3, [pc, #44]	; (5188 <_sercom_set_handler+0x30>)
    515c:	781b      	ldrb	r3, [r3, #0]
    515e:	2b00      	cmp	r3, #0
    5160:	d10e      	bne.n	5180 <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5162:	4c0a      	ldr	r4, [pc, #40]	; (518c <_sercom_set_handler+0x34>)
    5164:	4d0a      	ldr	r5, [pc, #40]	; (5190 <_sercom_set_handler+0x38>)
    5166:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    5168:	4b0a      	ldr	r3, [pc, #40]	; (5194 <_sercom_set_handler+0x3c>)
    516a:	2200      	movs	r2, #0
    516c:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    516e:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    5170:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5172:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    5174:	609a      	str	r2, [r3, #8]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5176:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
    5178:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
    517a:	3201      	adds	r2, #1
    517c:	4b02      	ldr	r3, [pc, #8]	; (5188 <_sercom_set_handler+0x30>)
    517e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5180:	0080      	lsls	r0, r0, #2
    5182:	4b02      	ldr	r3, [pc, #8]	; (518c <_sercom_set_handler+0x34>)
    5184:	50c1      	str	r1, [r0, r3]
}
    5186:	bd30      	pop	{r4, r5, pc}
    5188:	20000a86 	.word	0x20000a86
    518c:	20000a88 	.word	0x20000a88
    5190:	00005155 	.word	0x00005155
    5194:	20000b88 	.word	0x20000b88

00005198 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    5198:	b510      	push	{r4, lr}
    519a:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    519c:	ac01      	add	r4, sp, #4
    519e:	2309      	movs	r3, #9
    51a0:	7023      	strb	r3, [r4, #0]
    51a2:	3301      	adds	r3, #1
    51a4:	7063      	strb	r3, [r4, #1]
    51a6:	3301      	adds	r3, #1
    51a8:	70a3      	strb	r3, [r4, #2]
    51aa:	3301      	adds	r3, #1
    51ac:	70e3      	strb	r3, [r4, #3]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    51ae:	4b02      	ldr	r3, [pc, #8]	; (51b8 <_sercom_get_interrupt_vector+0x20>)
    51b0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    51b2:	5620      	ldrsb	r0, [r4, r0]
}
    51b4:	b002      	add	sp, #8
    51b6:	bd10      	pop	{r4, pc}
    51b8:	0000510d 	.word	0x0000510d

000051bc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    51bc:	b510      	push	{r4, lr}
    51be:	4b02      	ldr	r3, [pc, #8]	; (51c8 <SERCOM0_Handler+0xc>)
    51c0:	681b      	ldr	r3, [r3, #0]
    51c2:	2000      	movs	r0, #0
    51c4:	4798      	blx	r3
    51c6:	bd10      	pop	{r4, pc}
    51c8:	20000a88 	.word	0x20000a88

000051cc <SERCOM1_Handler>:
    51cc:	b510      	push	{r4, lr}
    51ce:	4b02      	ldr	r3, [pc, #8]	; (51d8 <SERCOM1_Handler+0xc>)
    51d0:	685b      	ldr	r3, [r3, #4]
    51d2:	2001      	movs	r0, #1
    51d4:	4798      	blx	r3
    51d6:	bd10      	pop	{r4, pc}
    51d8:	20000a88 	.word	0x20000a88

000051dc <SERCOM2_Handler>:
    51dc:	b510      	push	{r4, lr}
    51de:	4b02      	ldr	r3, [pc, #8]	; (51e8 <SERCOM2_Handler+0xc>)
    51e0:	689b      	ldr	r3, [r3, #8]
    51e2:	2002      	movs	r0, #2
    51e4:	4798      	blx	r3
    51e6:	bd10      	pop	{r4, pc}
    51e8:	20000a88 	.word	0x20000a88

000051ec <SERCOM3_Handler>:
    51ec:	b510      	push	{r4, lr}
    51ee:	4b02      	ldr	r3, [pc, #8]	; (51f8 <SERCOM3_Handler+0xc>)
    51f0:	68db      	ldr	r3, [r3, #12]
    51f2:	2003      	movs	r0, #3
    51f4:	4798      	blx	r3
    51f6:	bd10      	pop	{r4, pc}
    51f8:	20000a88 	.word	0x20000a88

000051fc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    51fc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    51fe:	2000      	movs	r0, #0
    5200:	4b08      	ldr	r3, [pc, #32]	; (5224 <delay_init+0x28>)
    5202:	4798      	blx	r3
    5204:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    5206:	4c08      	ldr	r4, [pc, #32]	; (5228 <delay_init+0x2c>)
    5208:	21fa      	movs	r1, #250	; 0xfa
    520a:	0089      	lsls	r1, r1, #2
    520c:	47a0      	blx	r4
    520e:	4b07      	ldr	r3, [pc, #28]	; (522c <delay_init+0x30>)
    5210:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    5212:	4907      	ldr	r1, [pc, #28]	; (5230 <delay_init+0x34>)
    5214:	0028      	movs	r0, r5
    5216:	47a0      	blx	r4
    5218:	4b06      	ldr	r3, [pc, #24]	; (5234 <delay_init+0x38>)
    521a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    521c:	2205      	movs	r2, #5
    521e:	4b06      	ldr	r3, [pc, #24]	; (5238 <delay_init+0x3c>)
    5220:	601a      	str	r2, [r3, #0]
}
    5222:	bd70      	pop	{r4, r5, r6, pc}
    5224:	00005f05 	.word	0x00005f05
    5228:	00006479 	.word	0x00006479
    522c:	20000024 	.word	0x20000024
    5230:	000f4240 	.word	0x000f4240
    5234:	20000028 	.word	0x20000028
    5238:	e000e010 	.word	0xe000e010

0000523c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    523c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    523e:	4b08      	ldr	r3, [pc, #32]	; (5260 <delay_cycles_ms+0x24>)
    5240:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    5242:	4a08      	ldr	r2, [pc, #32]	; (5264 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    5244:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    5246:	2180      	movs	r1, #128	; 0x80
    5248:	0249      	lsls	r1, r1, #9
	while (n--) {
    524a:	3801      	subs	r0, #1
    524c:	d307      	bcc.n	525e <delay_cycles_ms+0x22>
	if (n > 0) {
    524e:	2c00      	cmp	r4, #0
    5250:	d0fb      	beq.n	524a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    5252:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    5254:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    5256:	6813      	ldr	r3, [r2, #0]
    5258:	420b      	tst	r3, r1
    525a:	d0fc      	beq.n	5256 <delay_cycles_ms+0x1a>
    525c:	e7f5      	b.n	524a <delay_cycles_ms+0xe>
	}
}
    525e:	bd30      	pop	{r4, r5, pc}
    5260:	20000024 	.word	0x20000024
    5264:	e000e010 	.word	0xe000e010

00005268 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    5268:	b500      	push	{lr}
    526a:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    526c:	466b      	mov	r3, sp
    526e:	1dd9      	adds	r1, r3, #7
    5270:	23ff      	movs	r3, #255	; 0xff
    5272:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    5274:	2201      	movs	r2, #1
    5276:	480b      	ldr	r0, [pc, #44]	; (52a4 <sd_mmc_spi_start_write_block+0x3c>)
    5278:	4b0b      	ldr	r3, [pc, #44]	; (52a8 <sd_mmc_spi_start_write_block+0x40>)
    527a:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    527c:	4b0b      	ldr	r3, [pc, #44]	; (52ac <sd_mmc_spi_start_write_block+0x44>)
    527e:	881b      	ldrh	r3, [r3, #0]
    5280:	2b01      	cmp	r3, #1
    5282:	d00a      	beq.n	529a <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    5284:	22fc      	movs	r2, #252	; 0xfc
    5286:	466b      	mov	r3, sp
    5288:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    528a:	2201      	movs	r2, #1
    528c:	466b      	mov	r3, sp
    528e:	1d99      	adds	r1, r3, #6
    5290:	4804      	ldr	r0, [pc, #16]	; (52a4 <sd_mmc_spi_start_write_block+0x3c>)
    5292:	4b05      	ldr	r3, [pc, #20]	; (52a8 <sd_mmc_spi_start_write_block+0x40>)
    5294:	4798      	blx	r3
}
    5296:	b003      	add	sp, #12
    5298:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    529a:	22fe      	movs	r2, #254	; 0xfe
    529c:	466b      	mov	r3, sp
    529e:	719a      	strb	r2, [r3, #6]
    52a0:	e7f3      	b.n	528a <sd_mmc_spi_start_write_block+0x22>
    52a2:	46c0      	nop			; (mov r8, r8)
    52a4:	20000a98 	.word	0x20000a98
    52a8:	00004a15 	.word	0x00004a15
    52ac:	20000adc 	.word	0x20000adc

000052b0 <sd_mmc_spi_wait_busy>:
{
    52b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    52b2:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    52b4:	466b      	mov	r3, sp
    52b6:	1ddc      	adds	r4, r3, #7
    52b8:	23ff      	movs	r3, #255	; 0xff
    52ba:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    52bc:	4e12      	ldr	r6, [pc, #72]	; (5308 <sd_mmc_spi_wait_busy+0x58>)
    52be:	2201      	movs	r2, #1
    52c0:	0021      	movs	r1, r4
    52c2:	0030      	movs	r0, r6
    52c4:	4d11      	ldr	r5, [pc, #68]	; (530c <sd_mmc_spi_wait_busy+0x5c>)
    52c6:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    52c8:	23ff      	movs	r3, #255	; 0xff
    52ca:	2201      	movs	r2, #1
    52cc:	0021      	movs	r1, r4
    52ce:	0030      	movs	r0, r6
    52d0:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    52d2:	23ff      	movs	r3, #255	; 0xff
    52d4:	2201      	movs	r2, #1
    52d6:	0021      	movs	r1, r4
    52d8:	0030      	movs	r0, r6
    52da:	47a8      	blx	r5
    52dc:	4c0c      	ldr	r4, [pc, #48]	; (5310 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    52de:	466b      	mov	r3, sp
    52e0:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    52e2:	4e09      	ldr	r6, [pc, #36]	; (5308 <sd_mmc_spi_wait_busy+0x58>)
    52e4:	4f09      	ldr	r7, [pc, #36]	; (530c <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    52e6:	782b      	ldrb	r3, [r5, #0]
    52e8:	2bff      	cmp	r3, #255	; 0xff
    52ea:	d009      	beq.n	5300 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    52ec:	23ff      	movs	r3, #255	; 0xff
    52ee:	2201      	movs	r2, #1
    52f0:	0029      	movs	r1, r5
    52f2:	0030      	movs	r0, r6
    52f4:	47b8      	blx	r7
    52f6:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    52f8:	2c00      	cmp	r4, #0
    52fa:	d1f4      	bne.n	52e6 <sd_mmc_spi_wait_busy+0x36>
			return false;
    52fc:	2000      	movs	r0, #0
    52fe:	e000      	b.n	5302 <sd_mmc_spi_wait_busy+0x52>
	return true;
    5300:	2001      	movs	r0, #1
}
    5302:	b003      	add	sp, #12
    5304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5306:	46c0      	nop			; (mov r8, r8)
    5308:	20000a98 	.word	0x20000a98
    530c:	00004801 	.word	0x00004801
    5310:	00030d40 	.word	0x00030d40

00005314 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    5314:	b570      	push	{r4, r5, r6, lr}
    5316:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    5318:	4b14      	ldr	r3, [pc, #80]	; (536c <sd_mmc_spi_stop_multiwrite_block+0x58>)
    531a:	881c      	ldrh	r4, [r3, #0]
    531c:	2c01      	cmp	r4, #1
    531e:	d023      	beq.n	5368 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    5320:	4b13      	ldr	r3, [pc, #76]	; (5370 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    5322:	8819      	ldrh	r1, [r3, #0]
    5324:	4b13      	ldr	r3, [pc, #76]	; (5374 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    5326:	6818      	ldr	r0, [r3, #0]
    5328:	4b13      	ldr	r3, [pc, #76]	; (5378 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    532a:	4798      	blx	r3
		return true; // It is not the End of multi write
    532c:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    532e:	4284      	cmp	r4, r0
    5330:	d902      	bls.n	5338 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    5332:	0018      	movs	r0, r3
    5334:	b002      	add	sp, #8
    5336:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    5338:	466b      	mov	r3, sp
    533a:	1ddc      	adds	r4, r3, #7
    533c:	23ff      	movs	r3, #255	; 0xff
    533e:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5340:	4e0e      	ldr	r6, [pc, #56]	; (537c <sd_mmc_spi_stop_multiwrite_block+0x68>)
    5342:	2201      	movs	r2, #1
    5344:	0021      	movs	r1, r4
    5346:	0030      	movs	r0, r6
    5348:	4d0d      	ldr	r5, [pc, #52]	; (5380 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    534a:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    534c:	23fd      	movs	r3, #253	; 0xfd
    534e:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5350:	2201      	movs	r2, #1
    5352:	0021      	movs	r1, r4
    5354:	0030      	movs	r0, r6
    5356:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    5358:	4b0a      	ldr	r3, [pc, #40]	; (5384 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    535a:	4798      	blx	r3
    535c:	1e03      	subs	r3, r0, #0
    535e:	d1e8      	bne.n	5332 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5360:	2105      	movs	r1, #5
    5362:	4a09      	ldr	r2, [pc, #36]	; (5388 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    5364:	7011      	strb	r1, [r2, #0]
		return false;
    5366:	e7e4      	b.n	5332 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    5368:	2301      	movs	r3, #1
    536a:	e7e2      	b.n	5332 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    536c:	20000adc 	.word	0x20000adc
    5370:	20000ad4 	.word	0x20000ad4
    5374:	20000ae4 	.word	0x20000ae4
    5378:	00006479 	.word	0x00006479
    537c:	20000a98 	.word	0x20000a98
    5380:	00004a15 	.word	0x00004a15
    5384:	000052b1 	.word	0x000052b1
    5388:	20000adb 	.word	0x20000adb

0000538c <sd_mmc_spi_start_read_block>:
{
    538c:	b5f0      	push	{r4, r5, r6, r7, lr}
    538e:	b083      	sub	sp, #12
	token = 0;
    5390:	2200      	movs	r2, #0
    5392:	466b      	mov	r3, sp
    5394:	71da      	strb	r2, [r3, #7]
    5396:	4c14      	ldr	r4, [pc, #80]	; (53e8 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    5398:	466b      	mov	r3, sp
    539a:	1ddd      	adds	r5, r3, #7
    539c:	4e13      	ldr	r6, [pc, #76]	; (53ec <sd_mmc_spi_start_read_block+0x60>)
    539e:	4f14      	ldr	r7, [pc, #80]	; (53f0 <sd_mmc_spi_start_read_block+0x64>)
    53a0:	23ff      	movs	r3, #255	; 0xff
    53a2:	2201      	movs	r2, #1
    53a4:	0029      	movs	r1, r5
    53a6:	0030      	movs	r0, r6
    53a8:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    53aa:	782b      	ldrb	r3, [r5, #0]
    53ac:	220f      	movs	r2, #15
    53ae:	0019      	movs	r1, r3
    53b0:	4391      	bics	r1, r2
    53b2:	1e0a      	subs	r2, r1, #0
    53b4:	d009      	beq.n	53ca <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    53b6:	2bfe      	cmp	r3, #254	; 0xfe
    53b8:	d013      	beq.n	53e2 <sd_mmc_spi_start_read_block+0x56>
    53ba:	3c01      	subs	r4, #1
		if (i-- == 0) {
    53bc:	2c00      	cmp	r4, #0
    53be:	d1ef      	bne.n	53a0 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    53c0:	2204      	movs	r2, #4
    53c2:	4b0c      	ldr	r3, [pc, #48]	; (53f4 <sd_mmc_spi_start_read_block+0x68>)
    53c4:	701a      	strb	r2, [r3, #0]
			return false;
    53c6:	2000      	movs	r0, #0
    53c8:	e00c      	b.n	53e4 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    53ca:	075b      	lsls	r3, r3, #29
    53cc:	d004      	beq.n	53d8 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    53ce:	3207      	adds	r2, #7
    53d0:	4b08      	ldr	r3, [pc, #32]	; (53f4 <sd_mmc_spi_start_read_block+0x68>)
    53d2:	701a      	strb	r2, [r3, #0]
			return false;
    53d4:	2000      	movs	r0, #0
    53d6:	e005      	b.n	53e4 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    53d8:	220b      	movs	r2, #11
    53da:	4b06      	ldr	r3, [pc, #24]	; (53f4 <sd_mmc_spi_start_read_block+0x68>)
    53dc:	701a      	strb	r2, [r3, #0]
			return false;
    53de:	2000      	movs	r0, #0
    53e0:	e000      	b.n	53e4 <sd_mmc_spi_start_read_block+0x58>
	return true;
    53e2:	2001      	movs	r0, #1
}
    53e4:	b003      	add	sp, #12
    53e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53e8:	0007a120 	.word	0x0007a120
    53ec:	20000a98 	.word	0x20000a98
    53f0:	00004801 	.word	0x00004801
    53f4:	20000adb 	.word	0x20000adb

000053f8 <sd_mmc_spi_stop_write_block>:
{
    53f8:	b530      	push	{r4, r5, lr}
    53fa:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    53fc:	a901      	add	r1, sp, #4
    53fe:	2301      	movs	r3, #1
    5400:	425b      	negs	r3, r3
    5402:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    5404:	4d14      	ldr	r5, [pc, #80]	; (5458 <sd_mmc_spi_stop_write_block+0x60>)
    5406:	2202      	movs	r2, #2
    5408:	0028      	movs	r0, r5
    540a:	4b14      	ldr	r3, [pc, #80]	; (545c <sd_mmc_spi_stop_write_block+0x64>)
    540c:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    540e:	466b      	mov	r3, sp
    5410:	1ddc      	adds	r4, r3, #7
    5412:	23ff      	movs	r3, #255	; 0xff
    5414:	2201      	movs	r2, #1
    5416:	0021      	movs	r1, r4
    5418:	0028      	movs	r0, r5
    541a:	4d11      	ldr	r5, [pc, #68]	; (5460 <sd_mmc_spi_stop_write_block+0x68>)
    541c:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    541e:	7822      	ldrb	r2, [r4, #0]
    5420:	2311      	movs	r3, #17
    5422:	4013      	ands	r3, r2
    5424:	2b01      	cmp	r3, #1
    5426:	d005      	beq.n	5434 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5428:	2201      	movs	r2, #1
    542a:	4b0e      	ldr	r3, [pc, #56]	; (5464 <sd_mmc_spi_stop_write_block+0x6c>)
    542c:	701a      	strb	r2, [r3, #0]
		return false;
    542e:	2000      	movs	r0, #0
}
    5430:	b003      	add	sp, #12
    5432:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    5434:	231e      	movs	r3, #30
    5436:	401a      	ands	r2, r3
    5438:	2a04      	cmp	r2, #4
    543a:	d00b      	beq.n	5454 <sd_mmc_spi_stop_write_block+0x5c>
    543c:	2a0a      	cmp	r2, #10
    543e:	d104      	bne.n	544a <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    5440:	3a02      	subs	r2, #2
    5442:	4b08      	ldr	r3, [pc, #32]	; (5464 <sd_mmc_spi_stop_write_block+0x6c>)
    5444:	701a      	strb	r2, [r3, #0]
		return false;
    5446:	2000      	movs	r0, #0
    5448:	e7f2      	b.n	5430 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    544a:	220a      	movs	r2, #10
    544c:	4b05      	ldr	r3, [pc, #20]	; (5464 <sd_mmc_spi_stop_write_block+0x6c>)
    544e:	701a      	strb	r2, [r3, #0]
		return false;
    5450:	2000      	movs	r0, #0
    5452:	e7ed      	b.n	5430 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    5454:	2001      	movs	r0, #1
    5456:	e7eb      	b.n	5430 <sd_mmc_spi_stop_write_block+0x38>
    5458:	20000a98 	.word	0x20000a98
    545c:	00004a15 	.word	0x00004a15
    5460:	00004801 	.word	0x00004801
    5464:	20000adb 	.word	0x20000adb

00005468 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    5468:	b570      	push	{r4, r5, r6, lr}
    546a:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    546c:	2500      	movs	r5, #0
    546e:	4b31      	ldr	r3, [pc, #196]	; (5534 <sd_mmc_spi_init+0xcc>)
    5470:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    5472:	a90f      	add	r1, sp, #60	; 0x3c
    5474:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5476:	2601      	movs	r6, #1
    5478:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    547a:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    547c:	201b      	movs	r0, #27
    547e:	4b2e      	ldr	r3, [pc, #184]	; (5538 <sd_mmc_spi_init+0xd0>)
    5480:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    5482:	ac01      	add	r4, sp, #4
    5484:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5486:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5488:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    548a:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    548c:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    548e:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5490:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    5492:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5494:	2324      	movs	r3, #36	; 0x24
    5496:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5498:	220c      	movs	r2, #12
    549a:	2100      	movs	r1, #0
    549c:	a807      	add	r0, sp, #28
    549e:	4b27      	ldr	r3, [pc, #156]	; (553c <sd_mmc_spi_init+0xd4>)
    54a0:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    54a2:	2398      	movs	r3, #152	; 0x98
    54a4:	035b      	lsls	r3, r3, #13
    54a6:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    54a8:	4b25      	ldr	r3, [pc, #148]	; (5540 <sd_mmc_spi_init+0xd8>)
    54aa:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    54ac:	4b25      	ldr	r3, [pc, #148]	; (5544 <sd_mmc_spi_init+0xdc>)
    54ae:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    54b0:	2301      	movs	r3, #1
    54b2:	425b      	negs	r3, r3
    54b4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    54b6:	4b24      	ldr	r3, [pc, #144]	; (5548 <sd_mmc_spi_init+0xe0>)
    54b8:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    54ba:	4b24      	ldr	r3, [pc, #144]	; (554c <sd_mmc_spi_init+0xe4>)
    54bc:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    54be:	4d24      	ldr	r5, [pc, #144]	; (5550 <sd_mmc_spi_init+0xe8>)
    54c0:	0022      	movs	r2, r4
    54c2:	4924      	ldr	r1, [pc, #144]	; (5554 <sd_mmc_spi_init+0xec>)
    54c4:	0028      	movs	r0, r5
    54c6:	4b24      	ldr	r3, [pc, #144]	; (5558 <sd_mmc_spi_init+0xf0>)
    54c8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    54ca:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    54cc:	0020      	movs	r0, r4
    54ce:	4b23      	ldr	r3, [pc, #140]	; (555c <sd_mmc_spi_init+0xf4>)
    54d0:	4798      	blx	r3
    54d2:	231f      	movs	r3, #31
    54d4:	4018      	ands	r0, r3
    54d6:	4086      	lsls	r6, r0
    54d8:	4b21      	ldr	r3, [pc, #132]	; (5560 <sd_mmc_spi_init+0xf8>)
    54da:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    54dc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    54de:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    54e0:	2b00      	cmp	r3, #0
    54e2:	d1fc      	bne.n	54de <sd_mmc_spi_init+0x76>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    54e4:	6823      	ldr	r3, [r4, #0]
    54e6:	2202      	movs	r2, #2
    54e8:	4313      	orrs	r3, r2
    54ea:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    54ec:	4a1d      	ldr	r2, [pc, #116]	; (5564 <sd_mmc_spi_init+0xfc>)
    54ee:	2300      	movs	r3, #0
    54f0:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    54f2:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    54f4:	491c      	ldr	r1, [pc, #112]	; (5568 <sd_mmc_spi_init+0x100>)
    54f6:	7808      	ldrb	r0, [r1, #0]
    54f8:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    54fa:	4c1c      	ldr	r4, [pc, #112]	; (556c <sd_mmc_spi_init+0x104>)
    54fc:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    54fe:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    5500:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5502:	2201      	movs	r2, #1
    5504:	4669      	mov	r1, sp
    5506:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    5508:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    550a:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    550c:	4b0a      	ldr	r3, [pc, #40]	; (5538 <sd_mmc_spi_init+0xd0>)
    550e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    5510:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5512:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5514:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5516:	2900      	cmp	r1, #0
    5518:	d105      	bne.n	5526 <sd_mmc_spi_init+0xbe>
		return &(ports[port_index]->Group[group_index]);
    551a:	0953      	lsrs	r3, r2, #5
    551c:	01db      	lsls	r3, r3, #7
    551e:	2182      	movs	r1, #130	; 0x82
    5520:	05c9      	lsls	r1, r1, #23
    5522:	468c      	mov	ip, r1
    5524:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5526:	211f      	movs	r1, #31
    5528:	4011      	ands	r1, r2
    552a:	2201      	movs	r2, #1
    552c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    552e:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    5530:	b010      	add	sp, #64	; 0x40
    5532:	bd70      	pop	{r4, r5, r6, pc}
    5534:	20000adb 	.word	0x20000adb
    5538:	00005985 	.word	0x00005985
    553c:	000080db 	.word	0x000080db
    5540:	00080003 	.word	0x00080003
    5544:	00090003 	.word	0x00090003
    5548:	000b0003 	.word	0x000b0003
    554c:	00061a80 	.word	0x00061a80
    5550:	20000a98 	.word	0x20000a98
    5554:	42000c00 	.word	0x42000c00
    5558:	000045e5 	.word	0x000045e5
    555c:	00005199 	.word	0x00005199
    5560:	e000e100 	.word	0xe000e100
    5564:	20000ae8 	.word	0x20000ae8
    5568:	2000002c 	.word	0x2000002c
    556c:	20000ad8 	.word	0x20000ad8

00005570 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    5570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5572:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5574:	2200      	movs	r2, #0
    5576:	4b0d      	ldr	r3, [pc, #52]	; (55ac <sd_mmc_spi_select_device+0x3c>)
    5578:	701a      	strb	r2, [r3, #0]
    557a:	000c      	movs	r4, r1
    557c:	4b0c      	ldr	r3, [pc, #48]	; (55b0 <sd_mmc_spi_select_device+0x40>)
    557e:	4299      	cmp	r1, r3
    5580:	d900      	bls.n	5584 <sd_mmc_spi_select_device+0x14>
    5582:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    5584:	4d0b      	ldr	r5, [pc, #44]	; (55b4 <sd_mmc_spi_select_device+0x44>)
    5586:	4e0c      	ldr	r6, [pc, #48]	; (55b8 <sd_mmc_spi_select_device+0x48>)
    5588:	e001      	b.n	558e <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    558a:	08e3      	lsrs	r3, r4, #3
    558c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    558e:	0021      	movs	r1, r4
    5590:	0028      	movs	r0, r5
    5592:	47b0      	blx	r6
    5594:	2817      	cmp	r0, #23
    5596:	d0f8      	beq.n	558a <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    5598:	0079      	lsls	r1, r7, #1
    559a:	19cf      	adds	r7, r1, r7
    559c:	4907      	ldr	r1, [pc, #28]	; (55bc <sd_mmc_spi_select_device+0x4c>)
    559e:	19c9      	adds	r1, r1, r7
    55a0:	2201      	movs	r2, #1
    55a2:	4804      	ldr	r0, [pc, #16]	; (55b4 <sd_mmc_spi_select_device+0x44>)
    55a4:	4b06      	ldr	r3, [pc, #24]	; (55c0 <sd_mmc_spi_select_device+0x50>)
    55a6:	4798      	blx	r3
}
    55a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55aa:	46c0      	nop			; (mov r8, r8)
    55ac:	20000adb 	.word	0x20000adb
    55b0:	003d0900 	.word	0x003d0900
    55b4:	20000a98 	.word	0x20000a98
    55b8:	0000452d 	.word	0x0000452d
    55bc:	20000ad8 	.word	0x20000ad8
    55c0:	0000491d 	.word	0x0000491d

000055c4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    55c4:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    55c6:	2200      	movs	r2, #0
    55c8:	4b04      	ldr	r3, [pc, #16]	; (55dc <sd_mmc_spi_deselect_device+0x18>)
    55ca:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    55cc:	0041      	lsls	r1, r0, #1
    55ce:	1808      	adds	r0, r1, r0
    55d0:	4903      	ldr	r1, [pc, #12]	; (55e0 <sd_mmc_spi_deselect_device+0x1c>)
    55d2:	1809      	adds	r1, r1, r0
    55d4:	4803      	ldr	r0, [pc, #12]	; (55e4 <sd_mmc_spi_deselect_device+0x20>)
    55d6:	4b04      	ldr	r3, [pc, #16]	; (55e8 <sd_mmc_spi_deselect_device+0x24>)
    55d8:	4798      	blx	r3
}
    55da:	bd10      	pop	{r4, pc}
    55dc:	20000adb 	.word	0x20000adb
    55e0:	20000ad8 	.word	0x20000ad8
    55e4:	20000a98 	.word	0x20000a98
    55e8:	0000491d 	.word	0x0000491d

000055ec <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    55ec:	b570      	push	{r4, r5, r6, lr}
    55ee:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    55f0:	22ff      	movs	r2, #255	; 0xff
    55f2:	466b      	mov	r3, sp
    55f4:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    55f6:	2200      	movs	r2, #0
    55f8:	4b07      	ldr	r3, [pc, #28]	; (5618 <sd_mmc_spi_send_clock+0x2c>)
    55fa:	701a      	strb	r2, [r3, #0]
    55fc:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    55fe:	4e07      	ldr	r6, [pc, #28]	; (561c <sd_mmc_spi_send_clock+0x30>)
    5600:	4d07      	ldr	r5, [pc, #28]	; (5620 <sd_mmc_spi_send_clock+0x34>)
    5602:	2201      	movs	r2, #1
    5604:	466b      	mov	r3, sp
    5606:	1dd9      	adds	r1, r3, #7
    5608:	0030      	movs	r0, r6
    560a:	47a8      	blx	r5
    560c:	3c01      	subs	r4, #1
    560e:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    5610:	2c00      	cmp	r4, #0
    5612:	d1f6      	bne.n	5602 <sd_mmc_spi_send_clock+0x16>
	}
}
    5614:	b002      	add	sp, #8
    5616:	bd70      	pop	{r4, r5, r6, pc}
    5618:	20000adb 	.word	0x20000adb
    561c:	20000a98 	.word	0x20000a98
    5620:	00004a15 	.word	0x00004a15

00005624 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    5624:	b5f0      	push	{r4, r5, r6, r7, lr}
    5626:	46c6      	mov	lr, r8
    5628:	b500      	push	{lr}
    562a:	b086      	sub	sp, #24
    562c:	4680      	mov	r8, r0
    562e:	9200      	str	r2, [sp, #0]
    5630:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    5632:	22ff      	movs	r2, #255	; 0xff
    5634:	230f      	movs	r3, #15
    5636:	a802      	add	r0, sp, #8
    5638:	4684      	mov	ip, r0
    563a:	4463      	add	r3, ip
    563c:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    563e:	2200      	movs	r2, #0
    5640:	4b53      	ldr	r3, [pc, #332]	; (5790 <sd_mmc_spi_adtc_start+0x16c>)
    5642:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    5644:	ab04      	add	r3, sp, #16
    5646:	323f      	adds	r2, #63	; 0x3f
    5648:	4640      	mov	r0, r8
    564a:	4002      	ands	r2, r0
    564c:	2040      	movs	r0, #64	; 0x40
    564e:	4302      	orrs	r2, r0
    5650:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    5652:	0e0a      	lsrs	r2, r1, #24
    5654:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    5656:	0c0a      	lsrs	r2, r1, #16
    5658:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    565a:	0a0a      	lsrs	r2, r1, #8
    565c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    565e:	7119      	strb	r1, [r3, #4]
    5660:	2700      	movs	r7, #0
	crc = 0;
    5662:	2300      	movs	r3, #0
		value = *buf++;
    5664:	a904      	add	r1, sp, #16
    5666:	2208      	movs	r2, #8
				crc ^= 0x09;
    5668:	2409      	movs	r4, #9
    566a:	e011      	b.n	5690 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    566c:	0076      	lsls	r6, r6, #1
    566e:	b2f6      	uxtb	r6, r6
    5670:	3801      	subs	r0, #1
    5672:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    5674:	2800      	cmp	r0, #0
    5676:	d008      	beq.n	568a <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    5678:	005b      	lsls	r3, r3, #1
    567a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    567c:	001d      	movs	r5, r3
    567e:	4075      	eors	r5, r6
    5680:	062d      	lsls	r5, r5, #24
    5682:	d5f3      	bpl.n	566c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    5684:	4063      	eors	r3, r4
    5686:	b2db      	uxtb	r3, r3
    5688:	e7f0      	b.n	566c <sd_mmc_spi_adtc_start+0x48>
    568a:	3701      	adds	r7, #1
	while (size--) {
    568c:	2f05      	cmp	r7, #5
    568e:	d002      	beq.n	5696 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    5690:	5c7e      	ldrb	r6, [r7, r1]
    5692:	0010      	movs	r0, r2
    5694:	e7f0      	b.n	5678 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    5696:	005b      	lsls	r3, r3, #1
    5698:	2201      	movs	r2, #1
    569a:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    569c:	ac04      	add	r4, sp, #16
    569e:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    56a0:	4e3c      	ldr	r6, [pc, #240]	; (5794 <sd_mmc_spi_adtc_start+0x170>)
    56a2:	2201      	movs	r2, #1
    56a4:	210f      	movs	r1, #15
    56a6:	ab02      	add	r3, sp, #8
    56a8:	469c      	mov	ip, r3
    56aa:	4461      	add	r1, ip
    56ac:	0030      	movs	r0, r6
    56ae:	4f3a      	ldr	r7, [pc, #232]	; (5798 <sd_mmc_spi_adtc_start+0x174>)
    56b0:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    56b2:	2206      	movs	r2, #6
    56b4:	0021      	movs	r1, r4
    56b6:	0030      	movs	r0, r6
    56b8:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    56ba:	ab02      	add	r3, sp, #8
    56bc:	1dd9      	adds	r1, r3, #7
    56be:	23ff      	movs	r3, #255	; 0xff
    56c0:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    56c2:	2201      	movs	r2, #1
    56c4:	0030      	movs	r0, r6
    56c6:	4e35      	ldr	r6, [pc, #212]	; (579c <sd_mmc_spi_adtc_start+0x178>)
    56c8:	47b0      	blx	r6
    56ca:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    56cc:	ab02      	add	r3, sp, #8
    56ce:	1dde      	adds	r6, r3, #7
    56d0:	4f30      	ldr	r7, [pc, #192]	; (5794 <sd_mmc_spi_adtc_start+0x170>)
    56d2:	4d32      	ldr	r5, [pc, #200]	; (579c <sd_mmc_spi_adtc_start+0x178>)
    56d4:	23ff      	movs	r3, #255	; 0xff
    56d6:	2201      	movs	r2, #1
    56d8:	0031      	movs	r1, r6
    56da:	0038      	movs	r0, r7
    56dc:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    56de:	7833      	ldrb	r3, [r6, #0]
    56e0:	b25a      	sxtb	r2, r3
    56e2:	2a00      	cmp	r2, #0
    56e4:	da0b      	bge.n	56fe <sd_mmc_spi_adtc_start+0xda>
    56e6:	3c01      	subs	r4, #1
    56e8:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    56ea:	2c00      	cmp	r4, #0
    56ec:	d1f2      	bne.n	56d4 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    56ee:	2202      	movs	r2, #2
    56f0:	4b27      	ldr	r3, [pc, #156]	; (5790 <sd_mmc_spi_adtc_start+0x16c>)
    56f2:	701a      	strb	r2, [r3, #0]
			return false;
    56f4:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    56f6:	b006      	add	sp, #24
    56f8:	bc04      	pop	{r2}
    56fa:	4690      	mov	r8, r2
    56fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    56fe:	4a28      	ldr	r2, [pc, #160]	; (57a0 <sd_mmc_spi_adtc_start+0x17c>)
    5700:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    5702:	071a      	lsls	r2, r3, #28
    5704:	d41a      	bmi.n	573c <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    5706:	075a      	lsls	r2, r3, #29
    5708:	d41d      	bmi.n	5746 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    570a:	2201      	movs	r2, #1
    570c:	4393      	bics	r3, r2
    570e:	d11f      	bne.n	5750 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    5710:	4643      	mov	r3, r8
    5712:	049b      	lsls	r3, r3, #18
    5714:	d420      	bmi.n	5758 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    5716:	4643      	mov	r3, r8
    5718:	059b      	lsls	r3, r3, #22
    571a:	d425      	bmi.n	5768 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    571c:	4643      	mov	r3, r8
    571e:	055b      	lsls	r3, r3, #21
    5720:	d42b      	bmi.n	577a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    5722:	4b20      	ldr	r3, [pc, #128]	; (57a4 <sd_mmc_spi_adtc_start+0x180>)
    5724:	466a      	mov	r2, sp
    5726:	8812      	ldrh	r2, [r2, #0]
    5728:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    572a:	4b1f      	ldr	r3, [pc, #124]	; (57a8 <sd_mmc_spi_adtc_start+0x184>)
    572c:	466a      	mov	r2, sp
    572e:	8892      	ldrh	r2, [r2, #4]
    5730:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    5732:	2200      	movs	r2, #0
    5734:	4b1d      	ldr	r3, [pc, #116]	; (57ac <sd_mmc_spi_adtc_start+0x188>)
    5736:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    5738:	2001      	movs	r0, #1
    573a:	e7dc      	b.n	56f6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    573c:	2206      	movs	r2, #6
    573e:	4b14      	ldr	r3, [pc, #80]	; (5790 <sd_mmc_spi_adtc_start+0x16c>)
    5740:	701a      	strb	r2, [r3, #0]
		return false;
    5742:	2000      	movs	r0, #0
    5744:	e7d7      	b.n	56f6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    5746:	2209      	movs	r2, #9
    5748:	4b11      	ldr	r3, [pc, #68]	; (5790 <sd_mmc_spi_adtc_start+0x16c>)
    574a:	701a      	strb	r2, [r3, #0]
		return false;
    574c:	2000      	movs	r0, #0
    574e:	e7d2      	b.n	56f6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5750:	4b0f      	ldr	r3, [pc, #60]	; (5790 <sd_mmc_spi_adtc_start+0x16c>)
    5752:	701a      	strb	r2, [r3, #0]
		return false;
    5754:	2000      	movs	r0, #0
    5756:	e7ce      	b.n	56f6 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    5758:	4b15      	ldr	r3, [pc, #84]	; (57b0 <sd_mmc_spi_adtc_start+0x18c>)
    575a:	4798      	blx	r3
    575c:	2800      	cmp	r0, #0
    575e:	d1da      	bne.n	5716 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    5760:	2203      	movs	r2, #3
    5762:	4b0b      	ldr	r3, [pc, #44]	; (5790 <sd_mmc_spi_adtc_start+0x16c>)
    5764:	701a      	strb	r2, [r3, #0]
			return false;
    5766:	e7c6      	b.n	56f6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    5768:	490d      	ldr	r1, [pc, #52]	; (57a0 <sd_mmc_spi_adtc_start+0x17c>)
    576a:	2300      	movs	r3, #0
    576c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    576e:	33ff      	adds	r3, #255	; 0xff
    5770:	2201      	movs	r2, #1
    5772:	4808      	ldr	r0, [pc, #32]	; (5794 <sd_mmc_spi_adtc_start+0x170>)
    5774:	4e09      	ldr	r6, [pc, #36]	; (579c <sd_mmc_spi_adtc_start+0x178>)
    5776:	47b0      	blx	r6
    5778:	e7d0      	b.n	571c <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    577a:	4e09      	ldr	r6, [pc, #36]	; (57a0 <sd_mmc_spi_adtc_start+0x17c>)
    577c:	23ff      	movs	r3, #255	; 0xff
    577e:	2204      	movs	r2, #4
    5780:	0031      	movs	r1, r6
    5782:	4804      	ldr	r0, [pc, #16]	; (5794 <sd_mmc_spi_adtc_start+0x170>)
    5784:	4f05      	ldr	r7, [pc, #20]	; (579c <sd_mmc_spi_adtc_start+0x178>)
    5786:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    5788:	6833      	ldr	r3, [r6, #0]
    578a:	ba1b      	rev	r3, r3
    578c:	6033      	str	r3, [r6, #0]
    578e:	e7c8      	b.n	5722 <sd_mmc_spi_adtc_start+0xfe>
    5790:	20000adb 	.word	0x20000adb
    5794:	20000a98 	.word	0x20000a98
    5798:	00004a15 	.word	0x00004a15
    579c:	00004801 	.word	0x00004801
    57a0:	20000ae0 	.word	0x20000ae0
    57a4:	20000ad4 	.word	0x20000ad4
    57a8:	20000adc 	.word	0x20000adc
    57ac:	20000ae4 	.word	0x20000ae4
    57b0:	000052b1 	.word	0x000052b1

000057b4 <sd_mmc_spi_send_cmd>:
{
    57b4:	b510      	push	{r4, lr}
    57b6:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    57b8:	2300      	movs	r3, #0
    57ba:	9300      	str	r3, [sp, #0]
    57bc:	2200      	movs	r2, #0
    57be:	4c02      	ldr	r4, [pc, #8]	; (57c8 <sd_mmc_spi_send_cmd+0x14>)
    57c0:	47a0      	blx	r4
}
    57c2:	b002      	add	sp, #8
    57c4:	bd10      	pop	{r4, pc}
    57c6:	46c0      	nop			; (mov r8, r8)
    57c8:	00005625 	.word	0x00005625

000057cc <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    57cc:	4b01      	ldr	r3, [pc, #4]	; (57d4 <sd_mmc_spi_get_response+0x8>)
    57ce:	6818      	ldr	r0, [r3, #0]
}
    57d0:	4770      	bx	lr
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	20000ae0 	.word	0x20000ae0

000057d8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    57d8:	b510      	push	{r4, lr}
    57da:	b084      	sub	sp, #16
    57dc:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    57de:	2200      	movs	r2, #0
    57e0:	4b14      	ldr	r3, [pc, #80]	; (5834 <sd_mmc_spi_read_word+0x5c>)
    57e2:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    57e4:	4b14      	ldr	r3, [pc, #80]	; (5838 <sd_mmc_spi_read_word+0x60>)
    57e6:	8819      	ldrh	r1, [r3, #0]
    57e8:	4b14      	ldr	r3, [pc, #80]	; (583c <sd_mmc_spi_read_word+0x64>)
    57ea:	6818      	ldr	r0, [r3, #0]
    57ec:	4b14      	ldr	r3, [pc, #80]	; (5840 <sd_mmc_spi_read_word+0x68>)
    57ee:	4798      	blx	r3
    57f0:	2900      	cmp	r1, #0
    57f2:	d103      	bne.n	57fc <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    57f4:	4b13      	ldr	r3, [pc, #76]	; (5844 <sd_mmc_spi_read_word+0x6c>)
    57f6:	4798      	blx	r3
    57f8:	2800      	cmp	r0, #0
    57fa:	d010      	beq.n	581e <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    57fc:	23ff      	movs	r3, #255	; 0xff
    57fe:	2204      	movs	r2, #4
    5800:	a901      	add	r1, sp, #4
    5802:	4811      	ldr	r0, [pc, #68]	; (5848 <sd_mmc_spi_read_word+0x70>)
    5804:	4c11      	ldr	r4, [pc, #68]	; (584c <sd_mmc_spi_read_word+0x74>)
    5806:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    5808:	4b0c      	ldr	r3, [pc, #48]	; (583c <sd_mmc_spi_read_word+0x64>)
    580a:	681a      	ldr	r2, [r3, #0]
    580c:	1d10      	adds	r0, r2, #4
    580e:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5810:	4b09      	ldr	r3, [pc, #36]	; (5838 <sd_mmc_spi_read_word+0x60>)
    5812:	8819      	ldrh	r1, [r3, #0]
    5814:	4b0a      	ldr	r3, [pc, #40]	; (5840 <sd_mmc_spi_read_word+0x68>)
    5816:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    5818:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    581a:	2900      	cmp	r1, #0
    581c:	d001      	beq.n	5822 <sd_mmc_spi_read_word+0x4a>
}
    581e:	b004      	add	sp, #16
    5820:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    5822:	23ff      	movs	r3, #255	; 0xff
    5824:	2202      	movs	r2, #2
    5826:	a903      	add	r1, sp, #12
    5828:	4807      	ldr	r0, [pc, #28]	; (5848 <sd_mmc_spi_read_word+0x70>)
    582a:	4c08      	ldr	r4, [pc, #32]	; (584c <sd_mmc_spi_read_word+0x74>)
    582c:	47a0      	blx	r4
	return true;
    582e:	2001      	movs	r0, #1
    5830:	e7f5      	b.n	581e <sd_mmc_spi_read_word+0x46>
    5832:	46c0      	nop			; (mov r8, r8)
    5834:	20000adb 	.word	0x20000adb
    5838:	20000ad4 	.word	0x20000ad4
    583c:	20000ae4 	.word	0x20000ae4
    5840:	00006585 	.word	0x00006585
    5844:	0000538d 	.word	0x0000538d
    5848:	20000a98 	.word	0x20000a98
    584c:	00004801 	.word	0x00004801

00005850 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    5850:	b5f0      	push	{r4, r5, r6, r7, lr}
    5852:	46de      	mov	lr, fp
    5854:	4657      	mov	r7, sl
    5856:	4646      	mov	r6, r8
    5858:	b5c0      	push	{r6, r7, lr}
    585a:	b082      	sub	sp, #8
    585c:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    585e:	2200      	movs	r2, #0
    5860:	4b17      	ldr	r3, [pc, #92]	; (58c0 <sd_mmc_spi_start_read_blocks+0x70>)
    5862:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    5864:	1e4c      	subs	r4, r1, #1
    5866:	b2a4      	uxth	r4, r4
    5868:	2900      	cmp	r1, #0
    586a:	d026      	beq.n	58ba <sd_mmc_spi_start_read_blocks+0x6a>
    586c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    586e:	4b15      	ldr	r3, [pc, #84]	; (58c4 <sd_mmc_spi_start_read_blocks+0x74>)
    5870:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    5872:	4f15      	ldr	r7, [pc, #84]	; (58c8 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    5874:	47d0      	blx	sl
    5876:	4680      	mov	r8, r0
    5878:	2800      	cmp	r0, #0
    587a:	d017      	beq.n	58ac <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    587c:	883a      	ldrh	r2, [r7, #0]
    587e:	465b      	mov	r3, fp
    5880:	1999      	adds	r1, r3, r6
    5882:	23ff      	movs	r3, #255	; 0xff
    5884:	4811      	ldr	r0, [pc, #68]	; (58cc <sd_mmc_spi_start_read_blocks+0x7c>)
    5886:	4d12      	ldr	r5, [pc, #72]	; (58d0 <sd_mmc_spi_start_read_blocks+0x80>)
    5888:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    588a:	883b      	ldrh	r3, [r7, #0]
    588c:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    588e:	4a11      	ldr	r2, [pc, #68]	; (58d4 <sd_mmc_spi_start_read_blocks+0x84>)
    5890:	6811      	ldr	r1, [r2, #0]
    5892:	468c      	mov	ip, r1
    5894:	4463      	add	r3, ip
    5896:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    5898:	23ff      	movs	r3, #255	; 0xff
    589a:	2202      	movs	r2, #2
    589c:	a901      	add	r1, sp, #4
    589e:	480b      	ldr	r0, [pc, #44]	; (58cc <sd_mmc_spi_start_read_blocks+0x7c>)
    58a0:	47a8      	blx	r5
	while (nb_block--) {
    58a2:	3c01      	subs	r4, #1
    58a4:	b2a4      	uxth	r4, r4
    58a6:	4b0c      	ldr	r3, [pc, #48]	; (58d8 <sd_mmc_spi_start_read_blocks+0x88>)
    58a8:	429c      	cmp	r4, r3
    58aa:	d1e3      	bne.n	5874 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    58ac:	4640      	mov	r0, r8
    58ae:	b002      	add	sp, #8
    58b0:	bc1c      	pop	{r2, r3, r4}
    58b2:	4690      	mov	r8, r2
    58b4:	469a      	mov	sl, r3
    58b6:	46a3      	mov	fp, r4
    58b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    58ba:	2301      	movs	r3, #1
    58bc:	4698      	mov	r8, r3
    58be:	e7f5      	b.n	58ac <sd_mmc_spi_start_read_blocks+0x5c>
    58c0:	20000adb 	.word	0x20000adb
    58c4:	0000538d 	.word	0x0000538d
    58c8:	20000ad4 	.word	0x20000ad4
    58cc:	20000a98 	.word	0x20000a98
    58d0:	00004801 	.word	0x00004801
    58d4:	20000ae4 	.word	0x20000ae4
    58d8:	0000ffff 	.word	0x0000ffff

000058dc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    58dc:	2001      	movs	r0, #1
    58de:	4770      	bx	lr

000058e0 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    58e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58e2:	46c6      	mov	lr, r8
    58e4:	b500      	push	{lr}
    58e6:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    58e8:	2200      	movs	r2, #0
    58ea:	4b15      	ldr	r3, [pc, #84]	; (5940 <sd_mmc_spi_start_write_blocks+0x60>)
    58ec:	701a      	strb	r2, [r3, #0]
	pos = 0;
    58ee:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    58f0:	4f14      	ldr	r7, [pc, #80]	; (5944 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    58f2:	4e15      	ldr	r6, [pc, #84]	; (5948 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    58f4:	e000      	b.n	58f8 <sd_mmc_spi_start_write_blocks+0x18>
{
    58f6:	0021      	movs	r1, r4
	while (nb_block--) {
    58f8:	1e4c      	subs	r4, r1, #1
    58fa:	b2a4      	uxth	r4, r4
    58fc:	2900      	cmp	r1, #0
    58fe:	d01b      	beq.n	5938 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    5900:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    5902:	8832      	ldrh	r2, [r6, #0]
    5904:	4643      	mov	r3, r8
    5906:	1959      	adds	r1, r3, r5
    5908:	4810      	ldr	r0, [pc, #64]	; (594c <sd_mmc_spi_start_write_blocks+0x6c>)
    590a:	4b11      	ldr	r3, [pc, #68]	; (5950 <sd_mmc_spi_start_write_blocks+0x70>)
    590c:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    590e:	8833      	ldrh	r3, [r6, #0]
    5910:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    5912:	4a10      	ldr	r2, [pc, #64]	; (5954 <sd_mmc_spi_start_write_blocks+0x74>)
    5914:	6811      	ldr	r1, [r2, #0]
    5916:	468c      	mov	ip, r1
    5918:	4463      	add	r3, ip
    591a:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    591c:	4b0e      	ldr	r3, [pc, #56]	; (5958 <sd_mmc_spi_start_write_blocks+0x78>)
    591e:	4798      	blx	r3
    5920:	2800      	cmp	r0, #0
    5922:	d00a      	beq.n	593a <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    5924:	2c00      	cmp	r4, #0
    5926:	d0e6      	beq.n	58f6 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    5928:	4b0c      	ldr	r3, [pc, #48]	; (595c <sd_mmc_spi_start_write_blocks+0x7c>)
    592a:	4798      	blx	r3
    592c:	2800      	cmp	r0, #0
    592e:	d1e2      	bne.n	58f6 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5930:	2205      	movs	r2, #5
    5932:	4b03      	ldr	r3, [pc, #12]	; (5940 <sd_mmc_spi_start_write_blocks+0x60>)
    5934:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    5936:	e000      	b.n	593a <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    5938:	2001      	movs	r0, #1
}
    593a:	bc04      	pop	{r2}
    593c:	4690      	mov	r8, r2
    593e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5940:	20000adb 	.word	0x20000adb
    5944:	00005269 	.word	0x00005269
    5948:	20000ad4 	.word	0x20000ad4
    594c:	20000a98 	.word	0x20000a98
    5950:	00004a15 	.word	0x00004a15
    5954:	20000ae4 	.word	0x20000ae4
    5958:	000053f9 	.word	0x000053f9
    595c:	000052b1 	.word	0x000052b1

00005960 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    5960:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    5962:	4b05      	ldr	r3, [pc, #20]	; (5978 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    5964:	4798      	blx	r3
    5966:	2800      	cmp	r0, #0
    5968:	d103      	bne.n	5972 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    596a:	2205      	movs	r2, #5
    596c:	4b03      	ldr	r3, [pc, #12]	; (597c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    596e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    5970:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    5972:	4b03      	ldr	r3, [pc, #12]	; (5980 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    5974:	4798      	blx	r3
    5976:	e7fb      	b.n	5970 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    5978:	000052b1 	.word	0x000052b1
    597c:	20000adb 	.word	0x20000adb
    5980:	00005315 	.word	0x00005315

00005984 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    5984:	b500      	push	{lr}
    5986:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5988:	ab01      	add	r3, sp, #4
    598a:	2280      	movs	r2, #128	; 0x80
    598c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    598e:	780a      	ldrb	r2, [r1, #0]
    5990:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    5992:	784a      	ldrb	r2, [r1, #1]
    5994:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    5996:	788a      	ldrb	r2, [r1, #2]
    5998:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    599a:	0019      	movs	r1, r3
    599c:	4b01      	ldr	r3, [pc, #4]	; (59a4 <port_pin_set_config+0x20>)
    599e:	4798      	blx	r3
}
    59a0:	b003      	add	sp, #12
    59a2:	bd00      	pop	{pc}
    59a4:	000060dd 	.word	0x000060dd

000059a8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    59a8:	b500      	push	{lr}
    59aa:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    59ac:	a901      	add	r1, sp, #4
    59ae:	2301      	movs	r3, #1
    59b0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    59b2:	2200      	movs	r2, #0
    59b4:	708a      	strb	r2, [r1, #2]
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    59b6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    59b8:	201c      	movs	r0, #28
    59ba:	4b02      	ldr	r3, [pc, #8]	; (59c4 <system_board_init+0x1c>)
    59bc:	4798      	blx	r3

    59be:	b003      	add	sp, #12
    59c0:	bd00      	pop	{pc}
    59c2:	46c0      	nop			; (mov r8, r8)
    59c4:	00005985 	.word	0x00005985

000059c8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    59c8:	4b0c      	ldr	r3, [pc, #48]	; (59fc <cpu_irq_enter_critical+0x34>)
    59ca:	681b      	ldr	r3, [r3, #0]
    59cc:	2b00      	cmp	r3, #0
    59ce:	d106      	bne.n	59de <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    59d0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    59d4:	2b00      	cmp	r3, #0
    59d6:	d007      	beq.n	59e8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    59d8:	2200      	movs	r2, #0
    59da:	4b09      	ldr	r3, [pc, #36]	; (5a00 <cpu_irq_enter_critical+0x38>)
    59dc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    59de:	4a07      	ldr	r2, [pc, #28]	; (59fc <cpu_irq_enter_critical+0x34>)
    59e0:	6813      	ldr	r3, [r2, #0]
    59e2:	3301      	adds	r3, #1
    59e4:	6013      	str	r3, [r2, #0]
}
    59e6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    59e8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    59ea:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    59ee:	2200      	movs	r2, #0
    59f0:	4b04      	ldr	r3, [pc, #16]	; (5a04 <cpu_irq_enter_critical+0x3c>)
    59f2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    59f4:	3201      	adds	r2, #1
    59f6:	4b02      	ldr	r3, [pc, #8]	; (5a00 <cpu_irq_enter_critical+0x38>)
    59f8:	701a      	strb	r2, [r3, #0]
    59fa:	e7f0      	b.n	59de <cpu_irq_enter_critical+0x16>
    59fc:	20000aec 	.word	0x20000aec
    5a00:	20000af0 	.word	0x20000af0
    5a04:	2000002d 	.word	0x2000002d

00005a08 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5a08:	4b08      	ldr	r3, [pc, #32]	; (5a2c <cpu_irq_leave_critical+0x24>)
    5a0a:	681a      	ldr	r2, [r3, #0]
    5a0c:	3a01      	subs	r2, #1
    5a0e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5a10:	681b      	ldr	r3, [r3, #0]
    5a12:	2b00      	cmp	r3, #0
    5a14:	d109      	bne.n	5a2a <cpu_irq_leave_critical+0x22>
    5a16:	4b06      	ldr	r3, [pc, #24]	; (5a30 <cpu_irq_leave_critical+0x28>)
    5a18:	781b      	ldrb	r3, [r3, #0]
    5a1a:	2b00      	cmp	r3, #0
    5a1c:	d005      	beq.n	5a2a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    5a1e:	2201      	movs	r2, #1
    5a20:	4b04      	ldr	r3, [pc, #16]	; (5a34 <cpu_irq_leave_critical+0x2c>)
    5a22:	701a      	strb	r2, [r3, #0]
    5a24:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5a28:	b662      	cpsie	i
	}
}
    5a2a:	4770      	bx	lr
    5a2c:	20000aec 	.word	0x20000aec
    5a30:	20000af0 	.word	0x20000af0
    5a34:	2000002d 	.word	0x2000002d

00005a38 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5a38:	b510      	push	{r4, lr}
	switch (clock_source) {
    5a3a:	2807      	cmp	r0, #7
    5a3c:	d803      	bhi.n	5a46 <system_clock_source_get_hz+0xe>
    5a3e:	0080      	lsls	r0, r0, #2
    5a40:	4b0f      	ldr	r3, [pc, #60]	; (5a80 <system_clock_source_get_hz+0x48>)
    5a42:	581b      	ldr	r3, [r3, r0]
    5a44:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    5a46:	2000      	movs	r0, #0
    5a48:	e018      	b.n	5a7c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    5a4a:	4b0e      	ldr	r3, [pc, #56]	; (5a84 <system_clock_source_get_hz+0x4c>)
    5a4c:	6858      	ldr	r0, [r3, #4]
    5a4e:	e015      	b.n	5a7c <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    5a50:	4b0d      	ldr	r3, [pc, #52]	; (5a88 <system_clock_source_get_hz+0x50>)
    5a52:	7d59      	ldrb	r1, [r3, #21]
    5a54:	0709      	lsls	r1, r1, #28
    5a56:	0f09      	lsrs	r1, r1, #28
    5a58:	3101      	adds	r1, #1
    5a5a:	480c      	ldr	r0, [pc, #48]	; (5a8c <system_clock_source_get_hz+0x54>)
    5a5c:	4b0c      	ldr	r3, [pc, #48]	; (5a90 <system_clock_source_get_hz+0x58>)
    5a5e:	4798      	blx	r3
    5a60:	e00c      	b.n	5a7c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    5a62:	4b08      	ldr	r3, [pc, #32]	; (5a84 <system_clock_source_get_hz+0x4c>)
    5a64:	6898      	ldr	r0, [r3, #8]
    5a66:	e009      	b.n	5a7c <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    5a68:	4b07      	ldr	r3, [pc, #28]	; (5a88 <system_clock_source_get_hz+0x50>)
    5a6a:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    5a6c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    5a6e:	079b      	lsls	r3, r3, #30
    5a70:	d504      	bpl.n	5a7c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    5a72:	4b04      	ldr	r3, [pc, #16]	; (5a84 <system_clock_source_get_hz+0x4c>)
    5a74:	6818      	ldr	r0, [r3, #0]
    5a76:	e001      	b.n	5a7c <system_clock_source_get_hz+0x44>
		return 32768UL;
    5a78:	2080      	movs	r0, #128	; 0x80
    5a7a:	0200      	lsls	r0, r0, #8
	}
}
    5a7c:	bd10      	pop	{r4, pc}
    5a7e:	46c0      	nop			; (mov r8, r8)
    5a80:	00009ed8 	.word	0x00009ed8
    5a84:	20000af4 	.word	0x20000af4
    5a88:	40001000 	.word	0x40001000
    5a8c:	02dc6c00 	.word	0x02dc6c00
    5a90:	00006479 	.word	0x00006479

00005a94 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a96:	46de      	mov	lr, fp
    5a98:	4657      	mov	r7, sl
    5a9a:	464e      	mov	r6, r9
    5a9c:	4645      	mov	r5, r8
    5a9e:	b5e0      	push	{r5, r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    5aa0:	4a25      	ldr	r2, [pc, #148]	; (5b38 <system_clock_source_xosc32k_set_config+0xa4>)
    5aa2:	8a93      	ldrh	r3, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    5aa4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5aa6:	7801      	ldrb	r1, [r0, #0]
    5aa8:	424c      	negs	r4, r1
    5aaa:	414c      	adcs	r4, r1
    5aac:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    5aae:	7881      	ldrb	r1, [r0, #2]
    5ab0:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    5ab2:	78c1      	ldrb	r1, [r0, #3]
    5ab4:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    5ab6:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5ab8:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    5aba:	7a81      	ldrb	r1, [r0, #10]
    5abc:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5abe:	491f      	ldr	r1, [pc, #124]	; (5b3c <system_clock_source_xosc32k_set_config+0xa8>)
    5ac0:	6844      	ldr	r4, [r0, #4]
    5ac2:	608c      	str	r4, [r1, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    5ac4:	7ac1      	ldrb	r1, [r0, #11]
    5ac6:	0089      	lsls	r1, r1, #2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    5ac8:	7b84      	ldrb	r4, [r0, #14]
    5aca:	0064      	lsls	r4, r4, #1
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
    5acc:	4321      	orrs	r1, r4
    5ace:	7b44      	ldrb	r4, [r0, #13]
    5ad0:	4321      	orrs	r1, r4
    5ad2:	b2c9      	uxtb	r1, r1
	OSC32KCTRL->CFDCTRL.reg =
    5ad4:	7591      	strb	r1, [r2, #22]

	OSC32KCTRL->EVCTRL.reg =
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);
    5ad6:	7b01      	ldrb	r1, [r0, #12]
	OSC32KCTRL->EVCTRL.reg =
    5ad8:	75d1      	strb	r1, [r2, #23]

	OSC32KCTRL->XOSC32K = temp;
    5ada:	2101      	movs	r1, #1
    5adc:	4648      	mov	r0, r9
    5ade:	0080      	lsls	r0, r0, #2
    5ae0:	2404      	movs	r4, #4
    5ae2:	43a3      	bics	r3, r4
    5ae4:	4303      	orrs	r3, r0
    5ae6:	4640      	mov	r0, r8
    5ae8:	4008      	ands	r0, r1
    5aea:	00c0      	lsls	r0, r0, #3
    5aec:	3404      	adds	r4, #4
    5aee:	43a3      	bics	r3, r4
    5af0:	4303      	orrs	r3, r0
    5af2:	4660      	mov	r0, ip
    5af4:	4008      	ands	r0, r1
    5af6:	0100      	lsls	r0, r0, #4
    5af8:	3408      	adds	r4, #8
    5afa:	43a3      	bics	r3, r4
    5afc:	4303      	orrs	r3, r0
    5afe:	400f      	ands	r7, r1
    5b00:	01bf      	lsls	r7, r7, #6
    5b02:	2040      	movs	r0, #64	; 0x40
    5b04:	4383      	bics	r3, r0
    5b06:	433b      	orrs	r3, r7
    5b08:	400e      	ands	r6, r1
    5b0a:	01f6      	lsls	r6, r6, #7
    5b0c:	3040      	adds	r0, #64	; 0x40
    5b0e:	4383      	bics	r3, r0
    5b10:	4333      	orrs	r3, r6
    5b12:	3879      	subs	r0, #121	; 0x79
    5b14:	4005      	ands	r5, r0
    5b16:	022d      	lsls	r5, r5, #8
    5b18:	4809      	ldr	r0, [pc, #36]	; (5b40 <system_clock_source_xosc32k_set_config+0xac>)
    5b1a:	4003      	ands	r3, r0
    5b1c:	432b      	orrs	r3, r5
    5b1e:	4658      	mov	r0, fp
    5b20:	4001      	ands	r1, r0
    5b22:	0309      	lsls	r1, r1, #12
    5b24:	4807      	ldr	r0, [pc, #28]	; (5b44 <system_clock_source_xosc32k_set_config+0xb0>)
    5b26:	4003      	ands	r3, r0
    5b28:	430b      	orrs	r3, r1
    5b2a:	8293      	strh	r3, [r2, #20]
}
    5b2c:	bc3c      	pop	{r2, r3, r4, r5}
    5b2e:	4690      	mov	r8, r2
    5b30:	4699      	mov	r9, r3
    5b32:	46a2      	mov	sl, r4
    5b34:	46ab      	mov	fp, r5
    5b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b38:	40001400 	.word	0x40001400
    5b3c:	20000af4 	.word	0x20000af4
    5b40:	fffff8ff 	.word	0xfffff8ff
    5b44:	ffffefff 	.word	0xffffefff

00005b48 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    5b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b4a:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    5b4c:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    5b4e:	7d03      	ldrb	r3, [r0, #20]
    5b50:	2b01      	cmp	r3, #1
    5b52:	d04d      	beq.n	5bf0 <system_clock_source_dpll_set_config+0xa8>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    5b54:	68a3      	ldr	r3, [r4, #8]
    5b56:	0118      	lsls	r0, r3, #4
    5b58:	0029      	movs	r1, r5
    5b5a:	4b29      	ldr	r3, [pc, #164]	; (5c00 <system_clock_source_dpll_set_config+0xb8>)
    5b5c:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    5b5e:	220f      	movs	r2, #15
    5b60:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    5b62:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    5b64:	7821      	ldrb	r1, [r4, #0]
    5b66:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    5b68:	7866      	ldrb	r6, [r4, #1]
    5b6a:	01b6      	lsls	r6, r6, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    5b6c:	4331      	orrs	r1, r6
    5b6e:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    5b70:	4e24      	ldr	r6, [pc, #144]	; (5c04 <system_clock_source_dpll_set_config+0xbc>)
    5b72:	7731      	strb	r1, [r6, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    5b74:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    5b76:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    5b78:	051b      	lsls	r3, r3, #20
    5b7a:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    5b7c:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    5b7e:	6233      	str	r3, [r6, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    5b80:	0037      	movs	r7, r6
    5b82:	262c      	movs	r6, #44	; 0x2c
    5b84:	2104      	movs	r1, #4
    5b86:	5dbb      	ldrb	r3, [r7, r6]
    5b88:	420b      	tst	r3, r1
    5b8a:	d1fc      	bne.n	5b86 <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    5b8c:	78a3      	ldrb	r3, [r4, #2]
    5b8e:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    5b90:	78e1      	ldrb	r1, [r4, #3]
    5b92:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    5b94:	430b      	orrs	r3, r1
    5b96:	7921      	ldrb	r1, [r4, #4]
    5b98:	0089      	lsls	r1, r1, #2
    5b9a:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    5b9c:	7ca1      	ldrb	r1, [r4, #18]
    5b9e:	2603      	movs	r6, #3
    5ba0:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    5ba2:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    5ba4:	8a21      	ldrh	r1, [r4, #16]
    5ba6:	0409      	lsls	r1, r1, #16
    5ba8:	4f17      	ldr	r7, [pc, #92]	; (5c08 <system_clock_source_dpll_set_config+0xc0>)
    5baa:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    5bac:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    5bae:	7ce1      	ldrb	r1, [r4, #19]
    5bb0:	0209      	lsls	r1, r1, #8
    5bb2:	27e0      	movs	r7, #224	; 0xe0
    5bb4:	00ff      	lsls	r7, r7, #3
    5bb6:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    5bb8:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    5bba:	7d27      	ldrb	r7, [r4, #20]
    5bbc:	013f      	lsls	r7, r7, #4
    5bbe:	2130      	movs	r1, #48	; 0x30
    5bc0:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    5bc2:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    5bc4:	490f      	ldr	r1, [pc, #60]	; (5c04 <system_clock_source_dpll_set_config+0xbc>)
    5bc6:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    5bc8:	7d63      	ldrb	r3, [r4, #21]
    5bca:	401e      	ands	r6, r3
    5bcc:	2328      	movs	r3, #40	; 0x28
    5bce:	54ce      	strb	r6, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    5bd0:	000f      	movs	r7, r1
    5bd2:	262c      	movs	r6, #44	; 0x2c
    5bd4:	2108      	movs	r1, #8
    5bd6:	5dbb      	ldrb	r3, [r7, r6]
    5bd8:	420b      	tst	r3, r1
    5bda:	d1fc      	bne.n	5bd6 <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    5bdc:	230f      	movs	r3, #15
    5bde:	4398      	bics	r0, r3
    5be0:	1882      	adds	r2, r0, r2
			(refclk *
    5be2:	436a      	muls	r2, r5
			) >> (4 + config->prescaler);
    5be4:	7d63      	ldrb	r3, [r4, #21]
    5be6:	3304      	adds	r3, #4
    5be8:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    5bea:	4b08      	ldr	r3, [pc, #32]	; (5c0c <system_clock_source_dpll_set_config+0xc4>)
    5bec:	601a      	str	r2, [r3, #0]
}
    5bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    5bf0:	8a01      	ldrh	r1, [r0, #16]
    5bf2:	3101      	adds	r1, #1
    5bf4:	0049      	lsls	r1, r1, #1
    5bf6:	0028      	movs	r0, r5
    5bf8:	4b01      	ldr	r3, [pc, #4]	; (5c00 <system_clock_source_dpll_set_config+0xb8>)
    5bfa:	4798      	blx	r3
    5bfc:	0005      	movs	r5, r0
    5bfe:	e7a9      	b.n	5b54 <system_clock_source_dpll_set_config+0xc>
    5c00:	00006479 	.word	0x00006479
    5c04:	40001000 	.word	0x40001000
    5c08:	07ff0000 	.word	0x07ff0000
    5c0c:	20000af4 	.word	0x20000af4

00005c10 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5c10:	2807      	cmp	r0, #7
    5c12:	d803      	bhi.n	5c1c <system_clock_source_enable+0xc>
    5c14:	0080      	lsls	r0, r0, #2
    5c16:	4b18      	ldr	r3, [pc, #96]	; (5c78 <system_clock_source_enable+0x68>)
    5c18:	581b      	ldr	r3, [r3, r0]
    5c1a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5c1c:	2017      	movs	r0, #23
    5c1e:	e029      	b.n	5c74 <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    5c20:	4a16      	ldr	r2, [pc, #88]	; (5c7c <system_clock_source_enable+0x6c>)
    5c22:	7d13      	ldrb	r3, [r2, #20]
    5c24:	2102      	movs	r1, #2
    5c26:	430b      	orrs	r3, r1
    5c28:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    5c2a:	2000      	movs	r0, #0
    5c2c:	e022      	b.n	5c74 <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    5c2e:	4a14      	ldr	r2, [pc, #80]	; (5c80 <system_clock_source_enable+0x70>)
    5c30:	6993      	ldr	r3, [r2, #24]
    5c32:	2102      	movs	r1, #2
    5c34:	430b      	orrs	r3, r1
    5c36:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    5c38:	2000      	movs	r0, #0
		break;
    5c3a:	e01b      	b.n	5c74 <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    5c3c:	4a0f      	ldr	r2, [pc, #60]	; (5c7c <system_clock_source_enable+0x6c>)
    5c3e:	8a13      	ldrh	r3, [r2, #16]
    5c40:	2102      	movs	r1, #2
    5c42:	430b      	orrs	r3, r1
    5c44:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    5c46:	2000      	movs	r0, #0
		break;
    5c48:	e014      	b.n	5c74 <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    5c4a:	4a0d      	ldr	r2, [pc, #52]	; (5c80 <system_clock_source_enable+0x70>)
    5c4c:	8a93      	ldrh	r3, [r2, #20]
    5c4e:	2102      	movs	r1, #2
    5c50:	430b      	orrs	r3, r1
    5c52:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    5c54:	2000      	movs	r0, #0
		break;
    5c56:	e00d      	b.n	5c74 <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    5c58:	4a08      	ldr	r2, [pc, #32]	; (5c7c <system_clock_source_enable+0x6c>)
    5c5a:	7f13      	ldrb	r3, [r2, #28]
    5c5c:	2102      	movs	r1, #2
    5c5e:	430b      	orrs	r3, r1
    5c60:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    5c62:	0010      	movs	r0, r2
    5c64:	312a      	adds	r1, #42	; 0x2a
    5c66:	2202      	movs	r2, #2
    5c68:	5c43      	ldrb	r3, [r0, r1]
    5c6a:	4213      	tst	r3, r2
    5c6c:	d1fc      	bne.n	5c68 <system_clock_source_enable+0x58>
	return STATUS_OK;
    5c6e:	2000      	movs	r0, #0
    5c70:	e000      	b.n	5c74 <system_clock_source_enable+0x64>
		return STATUS_OK;
    5c72:	2000      	movs	r0, #0
}
    5c74:	4770      	bx	lr
    5c76:	46c0      	nop			; (mov r8, r8)
    5c78:	00009ef8 	.word	0x00009ef8
    5c7c:	40001000 	.word	0x40001000
    5c80:	40001400 	.word	0x40001400

00005c84 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    5c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c86:	46ce      	mov	lr, r9
    5c88:	4647      	mov	r7, r8
    5c8a:	b580      	push	{r7, lr}
    5c8c:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    5c8e:	2203      	movs	r2, #3
    5c90:	4b4b      	ldr	r3, [pc, #300]	; (5dc0 <system_clock_init+0x13c>)
    5c92:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5c94:	4a4b      	ldr	r2, [pc, #300]	; (5dc4 <system_clock_init+0x140>)
    5c96:	6853      	ldr	r3, [r2, #4]
    5c98:	211e      	movs	r1, #30
    5c9a:	438b      	bics	r3, r1
    5c9c:	3918      	subs	r1, #24
    5c9e:	430b      	orrs	r3, r1
    5ca0:	6053      	str	r3, [r2, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5ca2:	a80a      	add	r0, sp, #40	; 0x28
    5ca4:	2300      	movs	r3, #0
    5ca6:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    5ca8:	2280      	movs	r2, #128	; 0x80
    5caa:	0212      	lsls	r2, r2, #8
    5cac:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    5cae:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    5cb0:	2201      	movs	r2, #1
    5cb2:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    5cb4:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    5cb6:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    5cb8:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    5cba:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    5cbc:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5cbe:	3902      	subs	r1, #2
    5cc0:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    5cc2:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    5cc4:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5cc6:	4b40      	ldr	r3, [pc, #256]	; (5dc8 <system_clock_init+0x144>)
    5cc8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5cca:	2005      	movs	r0, #5
    5ccc:	4b3f      	ldr	r3, [pc, #252]	; (5dcc <system_clock_init+0x148>)
    5cce:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    5cd0:	493f      	ldr	r1, [pc, #252]	; (5dd0 <system_clock_init+0x14c>)
    5cd2:	2201      	movs	r2, #1
    5cd4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5cd6:	421a      	tst	r2, r3
    5cd8:	d0fc      	beq.n	5cd4 <system_clock_init+0x50>
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    5cda:	4b3e      	ldr	r3, [pc, #248]	; (5dd4 <system_clock_init+0x150>)
    5cdc:	7d1a      	ldrb	r2, [r3, #20]
    5cde:	2180      	movs	r1, #128	; 0x80
    5ce0:	430a      	orrs	r2, r1
    5ce2:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    5ce4:	2200      	movs	r2, #0
    5ce6:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    5ce8:	001a      	movs	r2, r3
    5cea:	6993      	ldr	r3, [r2, #24]
    5cec:	2b00      	cmp	r3, #0
    5cee:	d1fc      	bne.n	5cea <system_clock_init+0x66>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5cf0:	4b39      	ldr	r3, [pc, #228]	; (5dd8 <system_clock_init+0x154>)
    5cf2:	4798      	blx	r3
	config->division_factor    = 1;
    5cf4:	ac01      	add	r4, sp, #4
    5cf6:	2601      	movs	r6, #1
    5cf8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    5cfa:	2500      	movs	r5, #0
    5cfc:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    5cfe:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5d00:	2305      	movs	r3, #5
    5d02:	4699      	mov	r9, r3
    5d04:	7023      	strb	r3, [r4, #0]
    5d06:	7226      	strb	r6, [r4, #8]
    5d08:	0021      	movs	r1, r4
    5d0a:	2001      	movs	r0, #1
    5d0c:	4b33      	ldr	r3, [pc, #204]	; (5ddc <system_clock_init+0x158>)
    5d0e:	4698      	mov	r8, r3
    5d10:	4798      	blx	r3
    5d12:	2001      	movs	r0, #1
    5d14:	4f32      	ldr	r7, [pc, #200]	; (5de0 <system_clock_init+0x15c>)
    5d16:	47b8      	blx	r7
	config->high_when_disabled = false;
    5d18:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    5d1a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5d1c:	7265      	strb	r5, [r4, #9]
    5d1e:	464b      	mov	r3, r9
    5d20:	7023      	strb	r3, [r4, #0]
    5d22:	2320      	movs	r3, #32
    5d24:	6063      	str	r3, [r4, #4]
    5d26:	0021      	movs	r1, r4
    5d28:	2002      	movs	r0, #2
    5d2a:	47c0      	blx	r8
    5d2c:	2002      	movs	r0, #2
    5d2e:	47b8      	blx	r7
	config->division_factor    = 1;
    5d30:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    5d32:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    5d34:	2306      	movs	r3, #6
    5d36:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    5d38:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5d3a:	7265      	strb	r5, [r4, #9]
    5d3c:	0021      	movs	r1, r4
    5d3e:	2007      	movs	r0, #7
    5d40:	47c0      	blx	r8
    5d42:	2007      	movs	r0, #7
    5d44:	47b8      	blx	r7
	config->division_factor    = 1;
    5d46:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    5d48:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    5d4a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5d4c:	7265      	strb	r5, [r4, #9]
    5d4e:	2307      	movs	r3, #7
    5d50:	7023      	strb	r3, [r4, #0]
    5d52:	0021      	movs	r1, r4
    5d54:	2008      	movs	r0, #8
    5d56:	47c0      	blx	r8
    5d58:	2008      	movs	r0, #8
    5d5a:	47b8      	blx	r7
	config->lock_bypass         = false;
    5d5c:	a804      	add	r0, sp, #16
    5d5e:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
    5d60:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
    5d62:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
    5d64:	4b1f      	ldr	r3, [pc, #124]	; (5de4 <system_clock_init+0x160>)
    5d66:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    5d68:	8206      	strh	r6, [r0, #16]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    5d6a:	7545      	strb	r5, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    5d6c:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    5d6e:	7485      	strb	r5, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    5d70:	7005      	strb	r5, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    5d72:	2301      	movs	r3, #1
    5d74:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    5d76:	7505      	strb	r5, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    5d78:	4b1b      	ldr	r3, [pc, #108]	; (5de8 <system_clock_init+0x164>)
    5d7a:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    5d7c:	4b1b      	ldr	r3, [pc, #108]	; (5dec <system_clock_init+0x168>)
    5d7e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    5d80:	2007      	movs	r0, #7
    5d82:	4b12      	ldr	r3, [pc, #72]	; (5dcc <system_clock_init+0x148>)
    5d84:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    5d86:	4813      	ldr	r0, [pc, #76]	; (5dd4 <system_clock_init+0x150>)
    5d88:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    5d8a:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    5d8c:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    5d8e:	4013      	ands	r3, r2
    5d90:	2b03      	cmp	r3, #3
    5d92:	d1fb      	bne.n	5d8c <system_clock_init+0x108>
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    5d94:	3b02      	subs	r3, #2
    5d96:	4a16      	ldr	r2, [pc, #88]	; (5df0 <system_clock_init+0x16c>)
    5d98:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    5d9a:	a901      	add	r1, sp, #4
    5d9c:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    5d9e:	2200      	movs	r2, #0
    5da0:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    5da2:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5da4:	3207      	adds	r2, #7
    5da6:	700a      	strb	r2, [r1, #0]
    5da8:	720b      	strb	r3, [r1, #8]
    5daa:	2000      	movs	r0, #0
    5dac:	4b0b      	ldr	r3, [pc, #44]	; (5ddc <system_clock_init+0x158>)
    5dae:	4798      	blx	r3
    5db0:	2000      	movs	r0, #0
    5db2:	4b0b      	ldr	r3, [pc, #44]	; (5de0 <system_clock_init+0x15c>)
    5db4:	4798      	blx	r3
#endif

}
    5db6:	b00f      	add	sp, #60	; 0x3c
    5db8:	bc0c      	pop	{r2, r3}
    5dba:	4690      	mov	r8, r2
    5dbc:	4699      	mov	r9, r3
    5dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5dc0:	40001800 	.word	0x40001800
    5dc4:	41004000 	.word	0x41004000
    5dc8:	00005a95 	.word	0x00005a95
    5dcc:	00005c11 	.word	0x00005c11
    5dd0:	40001400 	.word	0x40001400
    5dd4:	40001000 	.word	0x40001000
    5dd8:	00005df5 	.word	0x00005df5
    5ddc:	00005e19 	.word	0x00005e19
    5de0:	00005ec5 	.word	0x00005ec5
    5de4:	02dc6c00 	.word	0x02dc6c00
    5de8:	00007fff 	.word	0x00007fff
    5dec:	00005b49 	.word	0x00005b49
    5df0:	40000800 	.word	0x40000800

00005df4 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    5df4:	4a06      	ldr	r2, [pc, #24]	; (5e10 <system_gclk_init+0x1c>)
    5df6:	6953      	ldr	r3, [r2, #20]
    5df8:	2180      	movs	r1, #128	; 0x80
    5dfa:	430b      	orrs	r3, r1
    5dfc:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    5dfe:	2201      	movs	r2, #1
    5e00:	4b04      	ldr	r3, [pc, #16]	; (5e14 <system_gclk_init+0x20>)
    5e02:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    5e04:	0019      	movs	r1, r3
    5e06:	780b      	ldrb	r3, [r1, #0]
    5e08:	4213      	tst	r3, r2
    5e0a:	d1fc      	bne.n	5e06 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5e0c:	4770      	bx	lr
    5e0e:	46c0      	nop			; (mov r8, r8)
    5e10:	40000800 	.word	0x40000800
    5e14:	40001c00 	.word	0x40001c00

00005e18 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5e18:	b570      	push	{r4, r5, r6, lr}
    5e1a:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5e1c:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5e1e:	784b      	ldrb	r3, [r1, #1]
    5e20:	2b00      	cmp	r3, #0
    5e22:	d002      	beq.n	5e2a <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5e24:	2380      	movs	r3, #128	; 0x80
    5e26:	00db      	lsls	r3, r3, #3
    5e28:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5e2a:	7a4b      	ldrb	r3, [r1, #9]
    5e2c:	2b00      	cmp	r3, #0
    5e2e:	d002      	beq.n	5e36 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5e30:	2380      	movs	r3, #128	; 0x80
    5e32:	011b      	lsls	r3, r3, #4
    5e34:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5e36:	6848      	ldr	r0, [r1, #4]
    5e38:	2801      	cmp	r0, #1
    5e3a:	d90f      	bls.n	5e5c <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5e3c:	1e43      	subs	r3, r0, #1
    5e3e:	4218      	tst	r0, r3
    5e40:	d131      	bne.n	5ea6 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5e42:	2802      	cmp	r0, #2
    5e44:	d92d      	bls.n	5ea2 <system_gclk_gen_set_config+0x8a>
    5e46:	2302      	movs	r3, #2
    5e48:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5e4a:	3201      	adds	r2, #1
						mask <<= 1) {
    5e4c:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5e4e:	4298      	cmp	r0, r3
    5e50:	d8fb      	bhi.n	5e4a <system_gclk_gen_set_config+0x32>
    5e52:	2380      	movs	r3, #128	; 0x80
    5e54:	015b      	lsls	r3, r3, #5
    5e56:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    5e58:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5e5a:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5e5c:	7a0b      	ldrb	r3, [r1, #8]
    5e5e:	2b00      	cmp	r3, #0
    5e60:	d002      	beq.n	5e68 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5e62:	2380      	movs	r3, #128	; 0x80
    5e64:	019b      	lsls	r3, r3, #6
    5e66:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    5e68:	2604      	movs	r6, #4
    5e6a:	40a6      	lsls	r6, r4
    5e6c:	4911      	ldr	r1, [pc, #68]	; (5eb4 <system_gclk_gen_set_config+0x9c>)
    5e6e:	4a12      	ldr	r2, [pc, #72]	; (5eb8 <system_gclk_gen_set_config+0xa0>)
    5e70:	684b      	ldr	r3, [r1, #4]
    5e72:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    5e74:	421e      	tst	r6, r3
    5e76:	d1fb      	bne.n	5e70 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    5e78:	4b10      	ldr	r3, [pc, #64]	; (5ebc <system_gclk_gen_set_config+0xa4>)
    5e7a:	4798      	blx	r3
    5e7c:	00a4      	lsls	r4, r4, #2
    5e7e:	4b0d      	ldr	r3, [pc, #52]	; (5eb4 <system_gclk_gen_set_config+0x9c>)
    5e80:	469c      	mov	ip, r3
    5e82:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    5e84:	6a22      	ldr	r2, [r4, #32]
    5e86:	2380      	movs	r3, #128	; 0x80
    5e88:	005b      	lsls	r3, r3, #1
    5e8a:	401a      	ands	r2, r3
    5e8c:	432a      	orrs	r2, r5
    5e8e:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    5e90:	4661      	mov	r1, ip
    5e92:	4a09      	ldr	r2, [pc, #36]	; (5eb8 <system_gclk_gen_set_config+0xa0>)
    5e94:	684b      	ldr	r3, [r1, #4]
    5e96:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    5e98:	421e      	tst	r6, r3
    5e9a:	d1fb      	bne.n	5e94 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    5e9c:	4b08      	ldr	r3, [pc, #32]	; (5ec0 <system_gclk_gen_set_config+0xa8>)
    5e9e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    5ea0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5ea2:	2200      	movs	r2, #0
    5ea4:	e7d5      	b.n	5e52 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    5ea6:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5ea8:	2380      	movs	r3, #128	; 0x80
    5eaa:	009b      	lsls	r3, r3, #2
    5eac:	4318      	orrs	r0, r3
    5eae:	4305      	orrs	r5, r0
    5eb0:	e7d4      	b.n	5e5c <system_gclk_gen_set_config+0x44>
    5eb2:	46c0      	nop			; (mov r8, r8)
    5eb4:	40001c00 	.word	0x40001c00
    5eb8:	000007fc 	.word	0x000007fc
    5ebc:	000059c9 	.word	0x000059c9
    5ec0:	00005a09 	.word	0x00005a09

00005ec4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5ec4:	b510      	push	{r4, lr}
    5ec6:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    5ec8:	2204      	movs	r2, #4
    5eca:	4082      	lsls	r2, r0
    5ecc:	4809      	ldr	r0, [pc, #36]	; (5ef4 <system_gclk_gen_enable+0x30>)
    5ece:	490a      	ldr	r1, [pc, #40]	; (5ef8 <system_gclk_gen_enable+0x34>)
    5ed0:	6843      	ldr	r3, [r0, #4]
    5ed2:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    5ed4:	421a      	tst	r2, r3
    5ed6:	d1fb      	bne.n	5ed0 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    5ed8:	4b08      	ldr	r3, [pc, #32]	; (5efc <system_gclk_gen_enable+0x38>)
    5eda:	4798      	blx	r3
    5edc:	00a4      	lsls	r4, r4, #2
    5ede:	4b05      	ldr	r3, [pc, #20]	; (5ef4 <system_gclk_gen_enable+0x30>)
    5ee0:	469c      	mov	ip, r3
    5ee2:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    5ee4:	6a22      	ldr	r2, [r4, #32]
    5ee6:	2380      	movs	r3, #128	; 0x80
    5ee8:	005b      	lsls	r3, r3, #1
    5eea:	4313      	orrs	r3, r2
    5eec:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    5eee:	4b04      	ldr	r3, [pc, #16]	; (5f00 <system_gclk_gen_enable+0x3c>)
    5ef0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5ef2:	bd10      	pop	{r4, pc}
    5ef4:	40001c00 	.word	0x40001c00
    5ef8:	000007fc 	.word	0x000007fc
    5efc:	000059c9 	.word	0x000059c9
    5f00:	00005a09 	.word	0x00005a09

00005f04 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f06:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    5f08:	2204      	movs	r2, #4
    5f0a:	4082      	lsls	r2, r0
    5f0c:	4812      	ldr	r0, [pc, #72]	; (5f58 <system_gclk_gen_get_hz+0x54>)
    5f0e:	4913      	ldr	r1, [pc, #76]	; (5f5c <system_gclk_gen_get_hz+0x58>)
    5f10:	6843      	ldr	r3, [r0, #4]
    5f12:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    5f14:	421a      	tst	r2, r3
    5f16:	d1fb      	bne.n	5f10 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    5f18:	4b11      	ldr	r3, [pc, #68]	; (5f60 <system_gclk_gen_get_hz+0x5c>)
    5f1a:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    5f1c:	4f0e      	ldr	r7, [pc, #56]	; (5f58 <system_gclk_gen_get_hz+0x54>)
    5f1e:	3408      	adds	r4, #8
    5f20:	00a4      	lsls	r4, r4, #2
    5f22:	59e0      	ldr	r0, [r4, r7]
    5f24:	0740      	lsls	r0, r0, #29
    5f26:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5f28:	4b0e      	ldr	r3, [pc, #56]	; (5f64 <system_gclk_gen_get_hz+0x60>)
    5f2a:	4798      	blx	r3
    5f2c:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    5f2e:	59e5      	ldr	r5, [r4, r7]
    5f30:	04ed      	lsls	r5, r5, #19
    5f32:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    5f34:	59e4      	ldr	r4, [r4, r7]
    5f36:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    5f38:	4b0b      	ldr	r3, [pc, #44]	; (5f68 <system_gclk_gen_get_hz+0x64>)
    5f3a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5f3c:	2d00      	cmp	r5, #0
    5f3e:	d107      	bne.n	5f50 <system_gclk_gen_get_hz+0x4c>
    5f40:	2c01      	cmp	r4, #1
    5f42:	d907      	bls.n	5f54 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    5f44:	0021      	movs	r1, r4
    5f46:	0030      	movs	r0, r6
    5f48:	4b08      	ldr	r3, [pc, #32]	; (5f6c <system_gclk_gen_get_hz+0x68>)
    5f4a:	4798      	blx	r3
    5f4c:	0006      	movs	r6, r0
    5f4e:	e001      	b.n	5f54 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    5f50:	3401      	adds	r4, #1
    5f52:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    5f54:	0030      	movs	r0, r6
    5f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f58:	40001c00 	.word	0x40001c00
    5f5c:	000007fc 	.word	0x000007fc
    5f60:	000059c9 	.word	0x000059c9
    5f64:	00005a39 	.word	0x00005a39
    5f68:	00005a09 	.word	0x00005a09
    5f6c:	00006479 	.word	0x00006479

00005f70 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5f70:	b510      	push	{r4, lr}
    5f72:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5f74:	4b09      	ldr	r3, [pc, #36]	; (5f9c <system_gclk_chan_enable+0x2c>)
    5f76:	4798      	blx	r3
    5f78:	00a0      	lsls	r0, r4, #2
    5f7a:	4b09      	ldr	r3, [pc, #36]	; (5fa0 <system_gclk_chan_enable+0x30>)
    5f7c:	469c      	mov	ip, r3
    5f7e:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    5f80:	2280      	movs	r2, #128	; 0x80
    5f82:	5883      	ldr	r3, [r0, r2]
    5f84:	2140      	movs	r1, #64	; 0x40
    5f86:	430b      	orrs	r3, r1
    5f88:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    5f8a:	3140      	adds	r1, #64	; 0x40
    5f8c:	3a40      	subs	r2, #64	; 0x40
    5f8e:	5843      	ldr	r3, [r0, r1]
    5f90:	421a      	tst	r2, r3
    5f92:	d0fc      	beq.n	5f8e <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    5f94:	4b03      	ldr	r3, [pc, #12]	; (5fa4 <system_gclk_chan_enable+0x34>)
    5f96:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    5f98:	bd10      	pop	{r4, pc}
    5f9a:	46c0      	nop			; (mov r8, r8)
    5f9c:	000059c9 	.word	0x000059c9
    5fa0:	40001c00 	.word	0x40001c00
    5fa4:	00005a09 	.word	0x00005a09

00005fa8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5fa8:	b510      	push	{r4, lr}
    5faa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5fac:	4b09      	ldr	r3, [pc, #36]	; (5fd4 <system_gclk_chan_disable+0x2c>)
    5fae:	4798      	blx	r3
    5fb0:	00a0      	lsls	r0, r4, #2
    5fb2:	4b09      	ldr	r3, [pc, #36]	; (5fd8 <system_gclk_chan_disable+0x30>)
    5fb4:	469c      	mov	ip, r3
    5fb6:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    5fb8:	2280      	movs	r2, #128	; 0x80
    5fba:	5883      	ldr	r3, [r0, r2]
    5fbc:	2140      	movs	r1, #64	; 0x40
    5fbe:	438b      	bics	r3, r1
    5fc0:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    5fc2:	3140      	adds	r1, #64	; 0x40
    5fc4:	3a40      	subs	r2, #64	; 0x40
    5fc6:	5843      	ldr	r3, [r0, r1]
    5fc8:	421a      	tst	r2, r3
    5fca:	d1fc      	bne.n	5fc6 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    5fcc:	4b03      	ldr	r3, [pc, #12]	; (5fdc <system_gclk_chan_disable+0x34>)
    5fce:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    5fd0:	bd10      	pop	{r4, pc}
    5fd2:	46c0      	nop			; (mov r8, r8)
    5fd4:	000059c9 	.word	0x000059c9
    5fd8:	40001c00 	.word	0x40001c00
    5fdc:	00005a09 	.word	0x00005a09

00005fe0 <system_gclk_chan_set_config>:
{
    5fe0:	b570      	push	{r4, r5, r6, lr}
    5fe2:	0004      	movs	r4, r0
    5fe4:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    5fe6:	4b05      	ldr	r3, [pc, #20]	; (5ffc <system_gclk_chan_set_config+0x1c>)
    5fe8:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    5fea:	782a      	ldrb	r2, [r5, #0]
    5fec:	230f      	movs	r3, #15
    5fee:	4013      	ands	r3, r2
    5ff0:	3420      	adds	r4, #32
    5ff2:	00a4      	lsls	r4, r4, #2
    5ff4:	4a02      	ldr	r2, [pc, #8]	; (6000 <system_gclk_chan_set_config+0x20>)
    5ff6:	50a3      	str	r3, [r4, r2]
}
    5ff8:	bd70      	pop	{r4, r5, r6, pc}
    5ffa:	46c0      	nop			; (mov r8, r8)
    5ffc:	00005fa9 	.word	0x00005fa9
    6000:	40001c00 	.word	0x40001c00

00006004 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6004:	b510      	push	{r4, lr}
    6006:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6008:	4b06      	ldr	r3, [pc, #24]	; (6024 <system_gclk_chan_get_hz+0x20>)
    600a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    600c:	3420      	adds	r4, #32
    600e:	00a4      	lsls	r4, r4, #2
    6010:	4b05      	ldr	r3, [pc, #20]	; (6028 <system_gclk_chan_get_hz+0x24>)
    6012:	58e4      	ldr	r4, [r4, r3]
    6014:	0724      	lsls	r4, r4, #28
    6016:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6018:	4b04      	ldr	r3, [pc, #16]	; (602c <system_gclk_chan_get_hz+0x28>)
    601a:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    601c:	0020      	movs	r0, r4
    601e:	4b04      	ldr	r3, [pc, #16]	; (6030 <system_gclk_chan_get_hz+0x2c>)
    6020:	4798      	blx	r3
}
    6022:	bd10      	pop	{r4, pc}
    6024:	000059c9 	.word	0x000059c9
    6028:	40001c00 	.word	0x40001c00
    602c:	00005a09 	.word	0x00005a09
    6030:	00005f05 	.word	0x00005f05

00006034 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6034:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6036:	78d3      	ldrb	r3, [r2, #3]
    6038:	2b00      	cmp	r3, #0
    603a:	d135      	bne.n	60a8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    603c:	7813      	ldrb	r3, [r2, #0]
    603e:	2b80      	cmp	r3, #128	; 0x80
    6040:	d029      	beq.n	6096 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6042:	061b      	lsls	r3, r3, #24
    6044:	2480      	movs	r4, #128	; 0x80
    6046:	0264      	lsls	r4, r4, #9
    6048:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    604a:	7854      	ldrb	r4, [r2, #1]
    604c:	2502      	movs	r5, #2
    604e:	43ac      	bics	r4, r5
    6050:	d106      	bne.n	6060 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6052:	7894      	ldrb	r4, [r2, #2]
    6054:	2c00      	cmp	r4, #0
    6056:	d120      	bne.n	609a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6058:	2480      	movs	r4, #128	; 0x80
    605a:	02a4      	lsls	r4, r4, #10
    605c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    605e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6060:	7854      	ldrb	r4, [r2, #1]
    6062:	3c01      	subs	r4, #1
    6064:	2c01      	cmp	r4, #1
    6066:	d91c      	bls.n	60a2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6068:	040d      	lsls	r5, r1, #16
    606a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    606c:	24a0      	movs	r4, #160	; 0xa0
    606e:	05e4      	lsls	r4, r4, #23
    6070:	432c      	orrs	r4, r5
    6072:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6074:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6076:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6078:	24d0      	movs	r4, #208	; 0xd0
    607a:	0624      	lsls	r4, r4, #24
    607c:	432c      	orrs	r4, r5
    607e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6080:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6082:	78d4      	ldrb	r4, [r2, #3]
    6084:	2c00      	cmp	r4, #0
    6086:	d122      	bne.n	60ce <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6088:	035b      	lsls	r3, r3, #13
    608a:	d51c      	bpl.n	60c6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    608c:	7893      	ldrb	r3, [r2, #2]
    608e:	2b01      	cmp	r3, #1
    6090:	d01e      	beq.n	60d0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6092:	6141      	str	r1, [r0, #20]
    6094:	e017      	b.n	60c6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6096:	2300      	movs	r3, #0
    6098:	e7d7      	b.n	604a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    609a:	24c0      	movs	r4, #192	; 0xc0
    609c:	02e4      	lsls	r4, r4, #11
    609e:	4323      	orrs	r3, r4
    60a0:	e7dd      	b.n	605e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    60a2:	4c0d      	ldr	r4, [pc, #52]	; (60d8 <_system_pinmux_config+0xa4>)
    60a4:	4023      	ands	r3, r4
    60a6:	e7df      	b.n	6068 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    60a8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    60aa:	040c      	lsls	r4, r1, #16
    60ac:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    60ae:	23a0      	movs	r3, #160	; 0xa0
    60b0:	05db      	lsls	r3, r3, #23
    60b2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    60b4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    60b6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    60b8:	23d0      	movs	r3, #208	; 0xd0
    60ba:	061b      	lsls	r3, r3, #24
    60bc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    60be:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    60c0:	78d3      	ldrb	r3, [r2, #3]
    60c2:	2b00      	cmp	r3, #0
    60c4:	d103      	bne.n	60ce <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    60c6:	7853      	ldrb	r3, [r2, #1]
    60c8:	3b01      	subs	r3, #1
    60ca:	2b01      	cmp	r3, #1
    60cc:	d902      	bls.n	60d4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    60ce:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    60d0:	6181      	str	r1, [r0, #24]
    60d2:	e7f8      	b.n	60c6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    60d4:	6081      	str	r1, [r0, #8]
}
    60d6:	e7fa      	b.n	60ce <_system_pinmux_config+0x9a>
    60d8:	fffbffff 	.word	0xfffbffff

000060dc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    60dc:	b510      	push	{r4, lr}
    60de:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    60e0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    60e2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    60e4:	2900      	cmp	r1, #0
    60e6:	d105      	bne.n	60f4 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    60e8:	0943      	lsrs	r3, r0, #5
    60ea:	01db      	lsls	r3, r3, #7
    60ec:	2182      	movs	r1, #130	; 0x82
    60ee:	05c9      	lsls	r1, r1, #23
    60f0:	468c      	mov	ip, r1
    60f2:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    60f4:	241f      	movs	r4, #31
    60f6:	4020      	ands	r0, r4
    60f8:	2101      	movs	r1, #1
    60fa:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    60fc:	0018      	movs	r0, r3
    60fe:	4b01      	ldr	r3, [pc, #4]	; (6104 <system_pinmux_pin_set_config+0x28>)
    6100:	4798      	blx	r3
}
    6102:	bd10      	pop	{r4, pc}
    6104:	00006035 	.word	0x00006035

00006108 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6108:	4770      	bx	lr
	...

0000610c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    610c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    610e:	4b05      	ldr	r3, [pc, #20]	; (6124 <system_init+0x18>)
    6110:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6112:	4b05      	ldr	r3, [pc, #20]	; (6128 <system_init+0x1c>)
    6114:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6116:	4b05      	ldr	r3, [pc, #20]	; (612c <system_init+0x20>)
    6118:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    611a:	4b05      	ldr	r3, [pc, #20]	; (6130 <system_init+0x24>)
    611c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    611e:	4b05      	ldr	r3, [pc, #20]	; (6134 <system_init+0x28>)
    6120:	4798      	blx	r3
}
    6122:	bd10      	pop	{r4, pc}
    6124:	00005c85 	.word	0x00005c85
    6128:	000059a9 	.word	0x000059a9
    612c:	00006109 	.word	0x00006109
    6130:	00006109 	.word	0x00006109
    6134:	00006109 	.word	0x00006109

00006138 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6138:	e7fe      	b.n	6138 <Dummy_Handler>
	...

0000613c <Reset_Handler>:
{
    613c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    613e:	4a17      	ldr	r2, [pc, #92]	; (619c <Reset_Handler+0x60>)
    6140:	4b17      	ldr	r3, [pc, #92]	; (61a0 <Reset_Handler+0x64>)
    6142:	429a      	cmp	r2, r3
    6144:	d011      	beq.n	616a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6146:	001a      	movs	r2, r3
    6148:	4b16      	ldr	r3, [pc, #88]	; (61a4 <Reset_Handler+0x68>)
    614a:	429a      	cmp	r2, r3
    614c:	d20d      	bcs.n	616a <Reset_Handler+0x2e>
    614e:	4a16      	ldr	r2, [pc, #88]	; (61a8 <Reset_Handler+0x6c>)
    6150:	3303      	adds	r3, #3
    6152:	1a9b      	subs	r3, r3, r2
    6154:	089b      	lsrs	r3, r3, #2
    6156:	3301      	adds	r3, #1
    6158:	009b      	lsls	r3, r3, #2
    615a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    615c:	4810      	ldr	r0, [pc, #64]	; (61a0 <Reset_Handler+0x64>)
    615e:	490f      	ldr	r1, [pc, #60]	; (619c <Reset_Handler+0x60>)
    6160:	588c      	ldr	r4, [r1, r2]
    6162:	5084      	str	r4, [r0, r2]
    6164:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    6166:	429a      	cmp	r2, r3
    6168:	d1fa      	bne.n	6160 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    616a:	4a10      	ldr	r2, [pc, #64]	; (61ac <Reset_Handler+0x70>)
    616c:	4b10      	ldr	r3, [pc, #64]	; (61b0 <Reset_Handler+0x74>)
    616e:	429a      	cmp	r2, r3
    6170:	d20a      	bcs.n	6188 <Reset_Handler+0x4c>
    6172:	43d3      	mvns	r3, r2
    6174:	490e      	ldr	r1, [pc, #56]	; (61b0 <Reset_Handler+0x74>)
    6176:	185b      	adds	r3, r3, r1
    6178:	2103      	movs	r1, #3
    617a:	438b      	bics	r3, r1
    617c:	3304      	adds	r3, #4
    617e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6180:	2100      	movs	r1, #0
    6182:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6184:	4293      	cmp	r3, r2
    6186:	d1fc      	bne.n	6182 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6188:	4a0a      	ldr	r2, [pc, #40]	; (61b4 <Reset_Handler+0x78>)
    618a:	21ff      	movs	r1, #255	; 0xff
    618c:	4b0a      	ldr	r3, [pc, #40]	; (61b8 <Reset_Handler+0x7c>)
    618e:	438b      	bics	r3, r1
    6190:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    6192:	4b0a      	ldr	r3, [pc, #40]	; (61bc <Reset_Handler+0x80>)
    6194:	4798      	blx	r3
        main();
    6196:	4b0a      	ldr	r3, [pc, #40]	; (61c0 <Reset_Handler+0x84>)
    6198:	4798      	blx	r3
    619a:	e7fe      	b.n	619a <Reset_Handler+0x5e>
    619c:	0000a240 	.word	0x0000a240
    61a0:	20000000 	.word	0x20000000
    61a4:	20000094 	.word	0x20000094
    61a8:	20000004 	.word	0x20000004
    61ac:	20000098 	.word	0x20000098
    61b0:	20000b9c 	.word	0x20000b9c
    61b4:	e000ed00 	.word	0xe000ed00
    61b8:	00000000 	.word	0x00000000
    61bc:	00008081 	.word	0x00008081
    61c0:	00006211 	.word	0x00006211

000061c4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    61c4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    61c6:	4a06      	ldr	r2, [pc, #24]	; (61e0 <_sbrk+0x1c>)
    61c8:	6812      	ldr	r2, [r2, #0]
    61ca:	2a00      	cmp	r2, #0
    61cc:	d004      	beq.n	61d8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    61ce:	4a04      	ldr	r2, [pc, #16]	; (61e0 <_sbrk+0x1c>)
    61d0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    61d2:	18c3      	adds	r3, r0, r3
    61d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    61d6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    61d8:	4902      	ldr	r1, [pc, #8]	; (61e4 <_sbrk+0x20>)
    61da:	4a01      	ldr	r2, [pc, #4]	; (61e0 <_sbrk+0x1c>)
    61dc:	6011      	str	r1, [r2, #0]
    61de:	e7f6      	b.n	61ce <_sbrk+0xa>
    61e0:	20000b00 	.word	0x20000b00
    61e4:	20002ba0 	.word	0x20002ba0

000061e8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    61e8:	2001      	movs	r0, #1
    61ea:	4240      	negs	r0, r0
    61ec:	4770      	bx	lr

000061ee <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    61ee:	2380      	movs	r3, #128	; 0x80
    61f0:	019b      	lsls	r3, r3, #6
    61f2:	604b      	str	r3, [r1, #4]

	return 0;
}
    61f4:	2000      	movs	r0, #0
    61f6:	4770      	bx	lr

000061f8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    61f8:	2001      	movs	r0, #1
    61fa:	4770      	bx	lr

000061fc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    61fc:	2000      	movs	r0, #0
    61fe:	4770      	bx	lr

00006200 <SysTick_Handler>:
#include "util.h"

volatile uint32_t g_ul_ms_ticks = 0;
void SysTick_Handler(void)
{
	g_ul_ms_ticks++;
    6200:	4a02      	ldr	r2, [pc, #8]	; (620c <SysTick_Handler+0xc>)
    6202:	6813      	ldr	r3, [r2, #0]
    6204:	3301      	adds	r3, #1
    6206:	6013      	str	r3, [r2, #0]
}
    6208:	4770      	bx	lr
    620a:	46c0      	nop			; (mov r8, r8)
    620c:	20000b04 	.word	0x20000b04

00006210 <main>:

bool ledstate;

int main (void)
{
    6210:	b5f0      	push	{r4, r5, r6, r7, lr}
    6212:	46de      	mov	lr, fp
    6214:	4657      	mov	r7, sl
    6216:	464e      	mov	r6, r9
    6218:	b5c0      	push	{r6, r7, lr}
    621a:	4c6f      	ldr	r4, [pc, #444]	; (63d8 <main+0x1c8>)
    621c:	44a5      	add	sp, r4
	system_init();
    621e:	4b6f      	ldr	r3, [pc, #444]	; (63dc <main+0x1cc>)
    6220:	4798      	blx	r3
	delay_init();
    6222:	4b6f      	ldr	r3, [pc, #444]	; (63e0 <main+0x1d0>)
    6224:	4798      	blx	r3
	
	struct rtc_calendar_time now;

	
	/* Insert application code here, after the board has been initialized. */
	configure_usart_cdc();
    6226:	4b6f      	ldr	r3, [pc, #444]	; (63e4 <main+0x1d4>)
    6228:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    622a:	2280      	movs	r2, #128	; 0x80
    622c:	0552      	lsls	r2, r2, #21
    622e:	2382      	movs	r3, #130	; 0x82
    6230:	05db      	lsls	r3, r3, #23
    6232:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(LED_0_PIN, 1);
	
	configure_can();
    6234:	4b6c      	ldr	r3, [pc, #432]	; (63e8 <main+0x1d8>)
    6236:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    6238:	4c6c      	ldr	r4, [pc, #432]	; (63ec <main+0x1dc>)
    623a:	2501      	movs	r5, #1
    623c:	7025      	strb	r5, [r4, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    623e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    6242:	b662      	cpsie	i
	
	system_interrupt_enable_global();

	
	configure_i2c();
    6244:	4b6a      	ldr	r3, [pc, #424]	; (63f0 <main+0x1e0>)
    6246:	4798      	blx	r3
	initialize_rtc_calendar();
    6248:	4b6a      	ldr	r3, [pc, #424]	; (63f4 <main+0x1e4>)
    624a:	4798      	blx	r3
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    624c:	4a6a      	ldr	r2, [pc, #424]	; (63f8 <main+0x1e8>)
    624e:	4b6b      	ldr	r3, [pc, #428]	; (63fc <main+0x1ec>)
    6250:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    6252:	486b      	ldr	r0, [pc, #428]	; (6400 <main+0x1f0>)
    6254:	6a03      	ldr	r3, [r0, #32]
    6256:	021b      	lsls	r3, r3, #8
    6258:	0a1b      	lsrs	r3, r3, #8
    625a:	21c0      	movs	r1, #192	; 0xc0
    625c:	0609      	lsls	r1, r1, #24
    625e:	430b      	orrs	r3, r1
    6260:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    6262:	2300      	movs	r3, #0
    6264:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    6266:	3307      	adds	r3, #7
    6268:	6013      	str	r3, [r2, #0]
	SysTick_Config(48000000 / 1000);
	
	irq_initialize_vectors();
	cpu_irq_enable();
    626a:	7025      	strb	r5, [r4, #0]
    626c:	f3bf 8f5f 	dmb	sy
    6270:	b662      	cpsie	i
	int logno = 0;
	int onetwentyeighths = 0;


	/* Initialize SD MMC stack */
	sd_mmc_init();
    6272:	4b64      	ldr	r3, [pc, #400]	; (6404 <main+0x1f4>)
    6274:	4798      	blx	r3
	int logno = 0;
    6276:	2400      	movs	r4, #0

	while (1) {
		printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
    6278:	4b63      	ldr	r3, [pc, #396]	; (6408 <main+0x1f8>)
    627a:	4699      	mov	r9, r3

		/* Wait card present and ready */
		do {
			status = sd_mmc_test_unit_ready(0);
			if (CTRL_FAIL == status) {
				printf("Failed to initialize SD card [%d], please re-insert the card.\r\n", status);
    627c:	001e      	movs	r6, r3
    627e:	e045      	b.n	630c <main+0xfc>
    6280:	2101      	movs	r1, #1
    6282:	4862      	ldr	r0, [pc, #392]	; (640c <main+0x1fc>)
    6284:	47b0      	blx	r6
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    6286:	4d62      	ldr	r5, [pc, #392]	; (6410 <main+0x200>)
    6288:	2000      	movs	r0, #0
    628a:	47a8      	blx	r5
    628c:	2802      	cmp	r0, #2
    628e:	d1fb      	bne.n	6288 <main+0x78>
			status = sd_mmc_test_unit_ready(0);
    6290:	2000      	movs	r0, #0
    6292:	47b8      	blx	r7
			if (CTRL_FAIL == status) {
    6294:	2801      	cmp	r0, #1
    6296:	d0f3      	beq.n	6280 <main+0x70>
				}
			}
		} while (CTRL_GOOD != status);
    6298:	2800      	cmp	r0, #0
    629a:	d1f9      	bne.n	6290 <main+0x80>

		memset(&fs, 0, sizeof(FATFS));
    629c:	228c      	movs	r2, #140	; 0x8c
    629e:	0092      	lsls	r2, r2, #2
    62a0:	2100      	movs	r1, #0
    62a2:	a8ff      	add	r0, sp, #1020	; 0x3fc
    62a4:	3048      	adds	r0, #72	; 0x48
    62a6:	4b5b      	ldr	r3, [pc, #364]	; (6414 <main+0x204>)
    62a8:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    62aa:	a9ff      	add	r1, sp, #1020	; 0x3fc
    62ac:	3148      	adds	r1, #72	; 0x48
    62ae:	2000      	movs	r0, #0
    62b0:	4b59      	ldr	r3, [pc, #356]	; (6418 <main+0x208>)
    62b2:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    62b4:	280b      	cmp	r0, #11
    62b6:	d02d      	beq.n	6314 <main+0x104>
			printf("Failed to mount FAT32 filesystem on SD card [%d], please check that\r\n", res);
			goto main_end_of_test;
		}

		do {
			sprintf(test_file_name, "0:LOG%05d.CSV", logno++);
    62b8:	4b58      	ldr	r3, [pc, #352]	; (641c <main+0x20c>)
    62ba:	469b      	mov	fp, r3
			bzero(&file_stat, sizeof(file_stat));
    62bc:	4f55      	ldr	r7, [pc, #340]	; (6414 <main+0x204>)
			sprintf(test_file_name, "0:LOG%05d.CSV", logno++);
    62be:	1c65      	adds	r5, r4, #1
    62c0:	0022      	movs	r2, r4
    62c2:	4957      	ldr	r1, [pc, #348]	; (6420 <main+0x210>)
    62c4:	4b57      	ldr	r3, [pc, #348]	; (6424 <main+0x214>)
    62c6:	446b      	add	r3, sp
    62c8:	0018      	movs	r0, r3
    62ca:	47d8      	blx	fp
			bzero(&file_stat, sizeof(file_stat));
    62cc:	2220      	movs	r2, #32
    62ce:	2100      	movs	r1, #0
    62d0:	a880      	add	r0, sp, #512	; 0x200
    62d2:	47b8      	blx	r7
			res = f_stat(test_file_name, &file_stat);
    62d4:	a980      	add	r1, sp, #512	; 0x200
    62d6:	4b53      	ldr	r3, [pc, #332]	; (6424 <main+0x214>)
    62d8:	446b      	add	r3, sp
    62da:	0018      	movs	r0, r3
    62dc:	4b52      	ldr	r3, [pc, #328]	; (6428 <main+0x218>)
    62de:	4798      	blx	r3
			sprintf(test_file_name, "0:LOG%05d.CSV", logno++);
    62e0:	002c      	movs	r4, r5
		} while (res == FR_OK);
    62e2:	2800      	cmp	r0, #0
    62e4:	d0eb      	beq.n	62be <main+0xae>
		
		if (res != FR_NO_FILE) {
    62e6:	2804      	cmp	r0, #4
    62e8:	d019      	beq.n	631e <main+0x10e>
			printf("Failed to find new file on card [%d]\r\n", res);
    62ea:	0001      	movs	r1, r0
    62ec:	484f      	ldr	r0, [pc, #316]	; (642c <main+0x21c>)
    62ee:	4b46      	ldr	r3, [pc, #280]	; (6408 <main+0x1f8>)
    62f0:	4798      	blx	r3
		port_pin_set_output_level(LED_0_PIN, 0);

		delay_s(10);

		main_end_of_test:
		printf("Please unplug the card.\r\n");
    62f2:	484f      	ldr	r0, [pc, #316]	; (6430 <main+0x220>)
    62f4:	4b4f      	ldr	r3, [pc, #316]	; (6434 <main+0x224>)
    62f6:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    62f8:	2280      	movs	r2, #128	; 0x80
    62fa:	0552      	lsls	r2, r2, #21
    62fc:	2382      	movs	r3, #130	; 0x82
    62fe:	05db      	lsls	r3, r3, #23
    6300:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(LED_0_PIN, 0);
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    6302:	4d43      	ldr	r5, [pc, #268]	; (6410 <main+0x200>)
    6304:	2000      	movs	r0, #0
    6306:	47a8      	blx	r5
    6308:	2802      	cmp	r0, #2
    630a:	d1fb      	bne.n	6304 <main+0xf4>
		printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
    630c:	484a      	ldr	r0, [pc, #296]	; (6438 <main+0x228>)
    630e:	47c8      	blx	r9
			status = sd_mmc_test_unit_ready(0);
    6310:	4f4a      	ldr	r7, [pc, #296]	; (643c <main+0x22c>)
    6312:	e7bd      	b.n	6290 <main+0x80>
			printf("Failed to mount FAT32 filesystem on SD card [%d], please check that\r\n", res);
    6314:	210b      	movs	r1, #11
    6316:	484a      	ldr	r0, [pc, #296]	; (6440 <main+0x230>)
    6318:	4b3b      	ldr	r3, [pc, #236]	; (6408 <main+0x1f8>)
    631a:	4798      	blx	r3
			goto main_end_of_test;
    631c:	e7e9      	b.n	62f2 <main+0xe2>
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    631e:	4941      	ldr	r1, [pc, #260]	; (6424 <main+0x214>)
    6320:	4469      	add	r1, sp
    6322:	2330      	movs	r3, #48	; 0x30
    6324:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    6326:	220a      	movs	r2, #10
    6328:	a888      	add	r0, sp, #544	; 0x220
    632a:	4b46      	ldr	r3, [pc, #280]	; (6444 <main+0x234>)
    632c:	4798      	blx	r3
    632e:	1e01      	subs	r1, r0, #0
		if (res != FR_OK) {
    6330:	d004      	beq.n	633c <main+0x12c>
			printf("Failed to create file on card [%d]\r\n", res);
    6332:	4845      	ldr	r0, [pc, #276]	; (6448 <main+0x238>)
    6334:	4b34      	ldr	r3, [pc, #208]	; (6408 <main+0x1f8>)
    6336:	4798      	blx	r3
			sprintf(test_file_name, "0:LOG%05d.CSV", logno++);
    6338:	002c      	movs	r4, r5
			goto main_end_of_test;
    633a:	e7da      	b.n	62f2 <main+0xe2>
		printf("Starting data logging...\r\n");
    633c:	4843      	ldr	r0, [pc, #268]	; (644c <main+0x23c>)
    633e:	4b3d      	ldr	r3, [pc, #244]	; (6434 <main+0x224>)
    6340:	4798      	blx	r3
		res = f_puts("year,month,day,hour,min,sec,ms,id,data\n", &file_object);
    6342:	a988      	add	r1, sp, #544	; 0x220
    6344:	4842      	ldr	r0, [pc, #264]	; (6450 <main+0x240>)
    6346:	4b43      	ldr	r3, [pc, #268]	; (6454 <main+0x244>)
    6348:	4798      	blx	r3
    634a:	2482      	movs	r4, #130	; 0x82
    634c:	05e4      	lsls	r4, r4, #23
    634e:	2780      	movs	r7, #128	; 0x80
    6350:	057f      	lsls	r7, r7, #21
    6352:	6167      	str	r7, [r4, #20]
		delay_ms(5000);
    6354:	4840      	ldr	r0, [pc, #256]	; (6458 <main+0x248>)
    6356:	4b41      	ldr	r3, [pc, #260]	; (645c <main+0x24c>)
    6358:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    635a:	61a7      	str	r7, [r4, #24]
    635c:	23fa      	movs	r3, #250	; 0xfa
    635e:	009b      	lsls	r3, r3, #2
    6360:	469b      	mov	fp, r3
				sprintf(line, "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    6362:	4c3f      	ldr	r4, [pc, #252]	; (6460 <main+0x250>)
				sprintf(line + 500, "123456789012");
    6364:	4b3f      	ldr	r3, [pc, #252]	; (6464 <main+0x254>)
    6366:	469a      	mov	sl, r3
				sprintf(line, "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    6368:	2265      	movs	r2, #101	; 0x65
    636a:	493f      	ldr	r1, [pc, #252]	; (6468 <main+0x258>)
    636c:	4668      	mov	r0, sp
    636e:	47a0      	blx	r4
				sprintf(line + 100, "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    6370:	2265      	movs	r2, #101	; 0x65
    6372:	493d      	ldr	r1, [pc, #244]	; (6468 <main+0x258>)
    6374:	a819      	add	r0, sp, #100	; 0x64
    6376:	47a0      	blx	r4
				sprintf(line + 200, "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    6378:	2265      	movs	r2, #101	; 0x65
    637a:	493b      	ldr	r1, [pc, #236]	; (6468 <main+0x258>)
    637c:	a832      	add	r0, sp, #200	; 0xc8
    637e:	47a0      	blx	r4
				sprintf(line + 300, "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    6380:	2265      	movs	r2, #101	; 0x65
    6382:	4939      	ldr	r1, [pc, #228]	; (6468 <main+0x258>)
    6384:	a84b      	add	r0, sp, #300	; 0x12c
    6386:	47a0      	blx	r4
				sprintf(line + 400, "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    6388:	2265      	movs	r2, #101	; 0x65
    638a:	4937      	ldr	r1, [pc, #220]	; (6468 <main+0x258>)
    638c:	a864      	add	r0, sp, #400	; 0x190
    638e:	47a0      	blx	r4
				sprintf(line + 500, "123456789012");
    6390:	ab7d      	add	r3, sp, #500	; 0x1f4
    6392:	4651      	mov	r1, sl
    6394:	c985      	ldmia	r1!, {r0, r2, r7}
    6396:	c385      	stmia	r3!, {r0, r2, r7}
    6398:	001a      	movs	r2, r3
    639a:	780b      	ldrb	r3, [r1, #0]
    639c:	7013      	strb	r3, [r2, #0]
				if (f_puts(line, &file_object) == -1) goto sd_cleanup;
    639e:	a988      	add	r1, sp, #544	; 0x220
    63a0:	4668      	mov	r0, sp
    63a2:	4b2c      	ldr	r3, [pc, #176]	; (6454 <main+0x244>)
    63a4:	4798      	blx	r3
    63a6:	1c43      	adds	r3, r0, #1
    63a8:	d009      	beq.n	63be <main+0x1ae>
				f_sync(&file_object);
    63aa:	a888      	add	r0, sp, #544	; 0x220
    63ac:	4b2f      	ldr	r3, [pc, #188]	; (646c <main+0x25c>)
    63ae:	4798      	blx	r3
    63b0:	2301      	movs	r3, #1
    63b2:	425b      	negs	r3, r3
    63b4:	469c      	mov	ip, r3
    63b6:	44e3      	add	fp, ip
		while (count < 1000) {
    63b8:	465b      	mov	r3, fp
    63ba:	2b00      	cmp	r3, #0
    63bc:	d1d4      	bne.n	6368 <main+0x158>
		f_close(&file_object);
    63be:	a888      	add	r0, sp, #544	; 0x220
    63c0:	4b2b      	ldr	r3, [pc, #172]	; (6470 <main+0x260>)
    63c2:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    63c4:	2280      	movs	r2, #128	; 0x80
    63c6:	0552      	lsls	r2, r2, #21
    63c8:	2382      	movs	r3, #130	; 0x82
    63ca:	05db      	lsls	r3, r3, #23
    63cc:	615a      	str	r2, [r3, #20]
		delay_s(10);
    63ce:	4829      	ldr	r0, [pc, #164]	; (6474 <main+0x264>)
    63d0:	4b22      	ldr	r3, [pc, #136]	; (645c <main+0x24c>)
    63d2:	4798      	blx	r3
			sprintf(test_file_name, "0:LOG%05d.CSV", logno++);
    63d4:	002c      	movs	r4, r5
    63d6:	e78c      	b.n	62f2 <main+0xe2>
    63d8:	fffff958 	.word	0xfffff958
    63dc:	0000610d 	.word	0x0000610d
    63e0:	000051fd 	.word	0x000051fd
    63e4:	00001399 	.word	0x00001399
    63e8:	00000cd9 	.word	0x00000cd9
    63ec:	2000002d 	.word	0x2000002d
    63f0:	0000104d 	.word	0x0000104d
    63f4:	00001141 	.word	0x00001141
    63f8:	e000e010 	.word	0xe000e010
    63fc:	0000bb7f 	.word	0x0000bb7f
    6400:	e000ed00 	.word	0xe000ed00
    6404:	00000319 	.word	0x00000319
    6408:	000080ed 	.word	0x000080ed
    640c:	00009f48 	.word	0x00009f48
    6410:	00000339 	.word	0x00000339
    6414:	000080db 	.word	0x000080db
    6418:	0000391d 	.word	0x0000391d
    641c:	00008361 	.word	0x00008361
    6420:	00009fd0 	.word	0x00009fd0
    6424:	00000674 	.word	0x00000674
    6428:	00003dcd 	.word	0x00003dcd
    642c:	00009fe0 	.word	0x00009fe0
    6430:	0000a0ec 	.word	0x0000a0ec
    6434:	000081e1 	.word	0x000081e1
    6438:	00009f18 	.word	0x00009f18
    643c:	00000b11 	.word	0x00000b11
    6440:	00009f88 	.word	0x00009f88
    6444:	00003949 	.word	0x00003949
    6448:	0000a008 	.word	0x0000a008
    644c:	0000a030 	.word	0x0000a030
    6450:	0000a04c 	.word	0x0000a04c
    6454:	00003e55 	.word	0x00003e55
    6458:	00001388 	.word	0x00001388
    645c:	0000523d 	.word	0x0000523d
    6460:	000080c9 	.word	0x000080c9
    6464:	0000a0dc 	.word	0x0000a0dc
    6468:	0000a074 	.word	0x0000a074
    646c:	00003d01 	.word	0x00003d01
    6470:	00003db5 	.word	0x00003db5
    6474:	00002710 	.word	0x00002710

00006478 <__udivsi3>:
    6478:	2200      	movs	r2, #0
    647a:	0843      	lsrs	r3, r0, #1
    647c:	428b      	cmp	r3, r1
    647e:	d374      	bcc.n	656a <__udivsi3+0xf2>
    6480:	0903      	lsrs	r3, r0, #4
    6482:	428b      	cmp	r3, r1
    6484:	d35f      	bcc.n	6546 <__udivsi3+0xce>
    6486:	0a03      	lsrs	r3, r0, #8
    6488:	428b      	cmp	r3, r1
    648a:	d344      	bcc.n	6516 <__udivsi3+0x9e>
    648c:	0b03      	lsrs	r3, r0, #12
    648e:	428b      	cmp	r3, r1
    6490:	d328      	bcc.n	64e4 <__udivsi3+0x6c>
    6492:	0c03      	lsrs	r3, r0, #16
    6494:	428b      	cmp	r3, r1
    6496:	d30d      	bcc.n	64b4 <__udivsi3+0x3c>
    6498:	22ff      	movs	r2, #255	; 0xff
    649a:	0209      	lsls	r1, r1, #8
    649c:	ba12      	rev	r2, r2
    649e:	0c03      	lsrs	r3, r0, #16
    64a0:	428b      	cmp	r3, r1
    64a2:	d302      	bcc.n	64aa <__udivsi3+0x32>
    64a4:	1212      	asrs	r2, r2, #8
    64a6:	0209      	lsls	r1, r1, #8
    64a8:	d065      	beq.n	6576 <__udivsi3+0xfe>
    64aa:	0b03      	lsrs	r3, r0, #12
    64ac:	428b      	cmp	r3, r1
    64ae:	d319      	bcc.n	64e4 <__udivsi3+0x6c>
    64b0:	e000      	b.n	64b4 <__udivsi3+0x3c>
    64b2:	0a09      	lsrs	r1, r1, #8
    64b4:	0bc3      	lsrs	r3, r0, #15
    64b6:	428b      	cmp	r3, r1
    64b8:	d301      	bcc.n	64be <__udivsi3+0x46>
    64ba:	03cb      	lsls	r3, r1, #15
    64bc:	1ac0      	subs	r0, r0, r3
    64be:	4152      	adcs	r2, r2
    64c0:	0b83      	lsrs	r3, r0, #14
    64c2:	428b      	cmp	r3, r1
    64c4:	d301      	bcc.n	64ca <__udivsi3+0x52>
    64c6:	038b      	lsls	r3, r1, #14
    64c8:	1ac0      	subs	r0, r0, r3
    64ca:	4152      	adcs	r2, r2
    64cc:	0b43      	lsrs	r3, r0, #13
    64ce:	428b      	cmp	r3, r1
    64d0:	d301      	bcc.n	64d6 <__udivsi3+0x5e>
    64d2:	034b      	lsls	r3, r1, #13
    64d4:	1ac0      	subs	r0, r0, r3
    64d6:	4152      	adcs	r2, r2
    64d8:	0b03      	lsrs	r3, r0, #12
    64da:	428b      	cmp	r3, r1
    64dc:	d301      	bcc.n	64e2 <__udivsi3+0x6a>
    64de:	030b      	lsls	r3, r1, #12
    64e0:	1ac0      	subs	r0, r0, r3
    64e2:	4152      	adcs	r2, r2
    64e4:	0ac3      	lsrs	r3, r0, #11
    64e6:	428b      	cmp	r3, r1
    64e8:	d301      	bcc.n	64ee <__udivsi3+0x76>
    64ea:	02cb      	lsls	r3, r1, #11
    64ec:	1ac0      	subs	r0, r0, r3
    64ee:	4152      	adcs	r2, r2
    64f0:	0a83      	lsrs	r3, r0, #10
    64f2:	428b      	cmp	r3, r1
    64f4:	d301      	bcc.n	64fa <__udivsi3+0x82>
    64f6:	028b      	lsls	r3, r1, #10
    64f8:	1ac0      	subs	r0, r0, r3
    64fa:	4152      	adcs	r2, r2
    64fc:	0a43      	lsrs	r3, r0, #9
    64fe:	428b      	cmp	r3, r1
    6500:	d301      	bcc.n	6506 <__udivsi3+0x8e>
    6502:	024b      	lsls	r3, r1, #9
    6504:	1ac0      	subs	r0, r0, r3
    6506:	4152      	adcs	r2, r2
    6508:	0a03      	lsrs	r3, r0, #8
    650a:	428b      	cmp	r3, r1
    650c:	d301      	bcc.n	6512 <__udivsi3+0x9a>
    650e:	020b      	lsls	r3, r1, #8
    6510:	1ac0      	subs	r0, r0, r3
    6512:	4152      	adcs	r2, r2
    6514:	d2cd      	bcs.n	64b2 <__udivsi3+0x3a>
    6516:	09c3      	lsrs	r3, r0, #7
    6518:	428b      	cmp	r3, r1
    651a:	d301      	bcc.n	6520 <__udivsi3+0xa8>
    651c:	01cb      	lsls	r3, r1, #7
    651e:	1ac0      	subs	r0, r0, r3
    6520:	4152      	adcs	r2, r2
    6522:	0983      	lsrs	r3, r0, #6
    6524:	428b      	cmp	r3, r1
    6526:	d301      	bcc.n	652c <__udivsi3+0xb4>
    6528:	018b      	lsls	r3, r1, #6
    652a:	1ac0      	subs	r0, r0, r3
    652c:	4152      	adcs	r2, r2
    652e:	0943      	lsrs	r3, r0, #5
    6530:	428b      	cmp	r3, r1
    6532:	d301      	bcc.n	6538 <__udivsi3+0xc0>
    6534:	014b      	lsls	r3, r1, #5
    6536:	1ac0      	subs	r0, r0, r3
    6538:	4152      	adcs	r2, r2
    653a:	0903      	lsrs	r3, r0, #4
    653c:	428b      	cmp	r3, r1
    653e:	d301      	bcc.n	6544 <__udivsi3+0xcc>
    6540:	010b      	lsls	r3, r1, #4
    6542:	1ac0      	subs	r0, r0, r3
    6544:	4152      	adcs	r2, r2
    6546:	08c3      	lsrs	r3, r0, #3
    6548:	428b      	cmp	r3, r1
    654a:	d301      	bcc.n	6550 <__udivsi3+0xd8>
    654c:	00cb      	lsls	r3, r1, #3
    654e:	1ac0      	subs	r0, r0, r3
    6550:	4152      	adcs	r2, r2
    6552:	0883      	lsrs	r3, r0, #2
    6554:	428b      	cmp	r3, r1
    6556:	d301      	bcc.n	655c <__udivsi3+0xe4>
    6558:	008b      	lsls	r3, r1, #2
    655a:	1ac0      	subs	r0, r0, r3
    655c:	4152      	adcs	r2, r2
    655e:	0843      	lsrs	r3, r0, #1
    6560:	428b      	cmp	r3, r1
    6562:	d301      	bcc.n	6568 <__udivsi3+0xf0>
    6564:	004b      	lsls	r3, r1, #1
    6566:	1ac0      	subs	r0, r0, r3
    6568:	4152      	adcs	r2, r2
    656a:	1a41      	subs	r1, r0, r1
    656c:	d200      	bcs.n	6570 <__udivsi3+0xf8>
    656e:	4601      	mov	r1, r0
    6570:	4152      	adcs	r2, r2
    6572:	4610      	mov	r0, r2
    6574:	4770      	bx	lr
    6576:	e7ff      	b.n	6578 <__udivsi3+0x100>
    6578:	b501      	push	{r0, lr}
    657a:	2000      	movs	r0, #0
    657c:	f000 f8f0 	bl	6760 <__aeabi_idiv0>
    6580:	bd02      	pop	{r1, pc}
    6582:	46c0      	nop			; (mov r8, r8)

00006584 <__aeabi_uidivmod>:
    6584:	2900      	cmp	r1, #0
    6586:	d0f7      	beq.n	6578 <__udivsi3+0x100>
    6588:	e776      	b.n	6478 <__udivsi3>
    658a:	4770      	bx	lr

0000658c <__divsi3>:
    658c:	4603      	mov	r3, r0
    658e:	430b      	orrs	r3, r1
    6590:	d47f      	bmi.n	6692 <__divsi3+0x106>
    6592:	2200      	movs	r2, #0
    6594:	0843      	lsrs	r3, r0, #1
    6596:	428b      	cmp	r3, r1
    6598:	d374      	bcc.n	6684 <__divsi3+0xf8>
    659a:	0903      	lsrs	r3, r0, #4
    659c:	428b      	cmp	r3, r1
    659e:	d35f      	bcc.n	6660 <__divsi3+0xd4>
    65a0:	0a03      	lsrs	r3, r0, #8
    65a2:	428b      	cmp	r3, r1
    65a4:	d344      	bcc.n	6630 <__divsi3+0xa4>
    65a6:	0b03      	lsrs	r3, r0, #12
    65a8:	428b      	cmp	r3, r1
    65aa:	d328      	bcc.n	65fe <__divsi3+0x72>
    65ac:	0c03      	lsrs	r3, r0, #16
    65ae:	428b      	cmp	r3, r1
    65b0:	d30d      	bcc.n	65ce <__divsi3+0x42>
    65b2:	22ff      	movs	r2, #255	; 0xff
    65b4:	0209      	lsls	r1, r1, #8
    65b6:	ba12      	rev	r2, r2
    65b8:	0c03      	lsrs	r3, r0, #16
    65ba:	428b      	cmp	r3, r1
    65bc:	d302      	bcc.n	65c4 <__divsi3+0x38>
    65be:	1212      	asrs	r2, r2, #8
    65c0:	0209      	lsls	r1, r1, #8
    65c2:	d065      	beq.n	6690 <__divsi3+0x104>
    65c4:	0b03      	lsrs	r3, r0, #12
    65c6:	428b      	cmp	r3, r1
    65c8:	d319      	bcc.n	65fe <__divsi3+0x72>
    65ca:	e000      	b.n	65ce <__divsi3+0x42>
    65cc:	0a09      	lsrs	r1, r1, #8
    65ce:	0bc3      	lsrs	r3, r0, #15
    65d0:	428b      	cmp	r3, r1
    65d2:	d301      	bcc.n	65d8 <__divsi3+0x4c>
    65d4:	03cb      	lsls	r3, r1, #15
    65d6:	1ac0      	subs	r0, r0, r3
    65d8:	4152      	adcs	r2, r2
    65da:	0b83      	lsrs	r3, r0, #14
    65dc:	428b      	cmp	r3, r1
    65de:	d301      	bcc.n	65e4 <__divsi3+0x58>
    65e0:	038b      	lsls	r3, r1, #14
    65e2:	1ac0      	subs	r0, r0, r3
    65e4:	4152      	adcs	r2, r2
    65e6:	0b43      	lsrs	r3, r0, #13
    65e8:	428b      	cmp	r3, r1
    65ea:	d301      	bcc.n	65f0 <__divsi3+0x64>
    65ec:	034b      	lsls	r3, r1, #13
    65ee:	1ac0      	subs	r0, r0, r3
    65f0:	4152      	adcs	r2, r2
    65f2:	0b03      	lsrs	r3, r0, #12
    65f4:	428b      	cmp	r3, r1
    65f6:	d301      	bcc.n	65fc <__divsi3+0x70>
    65f8:	030b      	lsls	r3, r1, #12
    65fa:	1ac0      	subs	r0, r0, r3
    65fc:	4152      	adcs	r2, r2
    65fe:	0ac3      	lsrs	r3, r0, #11
    6600:	428b      	cmp	r3, r1
    6602:	d301      	bcc.n	6608 <__divsi3+0x7c>
    6604:	02cb      	lsls	r3, r1, #11
    6606:	1ac0      	subs	r0, r0, r3
    6608:	4152      	adcs	r2, r2
    660a:	0a83      	lsrs	r3, r0, #10
    660c:	428b      	cmp	r3, r1
    660e:	d301      	bcc.n	6614 <__divsi3+0x88>
    6610:	028b      	lsls	r3, r1, #10
    6612:	1ac0      	subs	r0, r0, r3
    6614:	4152      	adcs	r2, r2
    6616:	0a43      	lsrs	r3, r0, #9
    6618:	428b      	cmp	r3, r1
    661a:	d301      	bcc.n	6620 <__divsi3+0x94>
    661c:	024b      	lsls	r3, r1, #9
    661e:	1ac0      	subs	r0, r0, r3
    6620:	4152      	adcs	r2, r2
    6622:	0a03      	lsrs	r3, r0, #8
    6624:	428b      	cmp	r3, r1
    6626:	d301      	bcc.n	662c <__divsi3+0xa0>
    6628:	020b      	lsls	r3, r1, #8
    662a:	1ac0      	subs	r0, r0, r3
    662c:	4152      	adcs	r2, r2
    662e:	d2cd      	bcs.n	65cc <__divsi3+0x40>
    6630:	09c3      	lsrs	r3, r0, #7
    6632:	428b      	cmp	r3, r1
    6634:	d301      	bcc.n	663a <__divsi3+0xae>
    6636:	01cb      	lsls	r3, r1, #7
    6638:	1ac0      	subs	r0, r0, r3
    663a:	4152      	adcs	r2, r2
    663c:	0983      	lsrs	r3, r0, #6
    663e:	428b      	cmp	r3, r1
    6640:	d301      	bcc.n	6646 <__divsi3+0xba>
    6642:	018b      	lsls	r3, r1, #6
    6644:	1ac0      	subs	r0, r0, r3
    6646:	4152      	adcs	r2, r2
    6648:	0943      	lsrs	r3, r0, #5
    664a:	428b      	cmp	r3, r1
    664c:	d301      	bcc.n	6652 <__divsi3+0xc6>
    664e:	014b      	lsls	r3, r1, #5
    6650:	1ac0      	subs	r0, r0, r3
    6652:	4152      	adcs	r2, r2
    6654:	0903      	lsrs	r3, r0, #4
    6656:	428b      	cmp	r3, r1
    6658:	d301      	bcc.n	665e <__divsi3+0xd2>
    665a:	010b      	lsls	r3, r1, #4
    665c:	1ac0      	subs	r0, r0, r3
    665e:	4152      	adcs	r2, r2
    6660:	08c3      	lsrs	r3, r0, #3
    6662:	428b      	cmp	r3, r1
    6664:	d301      	bcc.n	666a <__divsi3+0xde>
    6666:	00cb      	lsls	r3, r1, #3
    6668:	1ac0      	subs	r0, r0, r3
    666a:	4152      	adcs	r2, r2
    666c:	0883      	lsrs	r3, r0, #2
    666e:	428b      	cmp	r3, r1
    6670:	d301      	bcc.n	6676 <__divsi3+0xea>
    6672:	008b      	lsls	r3, r1, #2
    6674:	1ac0      	subs	r0, r0, r3
    6676:	4152      	adcs	r2, r2
    6678:	0843      	lsrs	r3, r0, #1
    667a:	428b      	cmp	r3, r1
    667c:	d301      	bcc.n	6682 <__divsi3+0xf6>
    667e:	004b      	lsls	r3, r1, #1
    6680:	1ac0      	subs	r0, r0, r3
    6682:	4152      	adcs	r2, r2
    6684:	1a41      	subs	r1, r0, r1
    6686:	d200      	bcs.n	668a <__divsi3+0xfe>
    6688:	4601      	mov	r1, r0
    668a:	4152      	adcs	r2, r2
    668c:	4610      	mov	r0, r2
    668e:	4770      	bx	lr
    6690:	e05d      	b.n	674e <__divsi3+0x1c2>
    6692:	0fca      	lsrs	r2, r1, #31
    6694:	d000      	beq.n	6698 <__divsi3+0x10c>
    6696:	4249      	negs	r1, r1
    6698:	1003      	asrs	r3, r0, #32
    669a:	d300      	bcc.n	669e <__divsi3+0x112>
    669c:	4240      	negs	r0, r0
    669e:	4053      	eors	r3, r2
    66a0:	2200      	movs	r2, #0
    66a2:	469c      	mov	ip, r3
    66a4:	0903      	lsrs	r3, r0, #4
    66a6:	428b      	cmp	r3, r1
    66a8:	d32d      	bcc.n	6706 <__divsi3+0x17a>
    66aa:	0a03      	lsrs	r3, r0, #8
    66ac:	428b      	cmp	r3, r1
    66ae:	d312      	bcc.n	66d6 <__divsi3+0x14a>
    66b0:	22fc      	movs	r2, #252	; 0xfc
    66b2:	0189      	lsls	r1, r1, #6
    66b4:	ba12      	rev	r2, r2
    66b6:	0a03      	lsrs	r3, r0, #8
    66b8:	428b      	cmp	r3, r1
    66ba:	d30c      	bcc.n	66d6 <__divsi3+0x14a>
    66bc:	0189      	lsls	r1, r1, #6
    66be:	1192      	asrs	r2, r2, #6
    66c0:	428b      	cmp	r3, r1
    66c2:	d308      	bcc.n	66d6 <__divsi3+0x14a>
    66c4:	0189      	lsls	r1, r1, #6
    66c6:	1192      	asrs	r2, r2, #6
    66c8:	428b      	cmp	r3, r1
    66ca:	d304      	bcc.n	66d6 <__divsi3+0x14a>
    66cc:	0189      	lsls	r1, r1, #6
    66ce:	d03a      	beq.n	6746 <__divsi3+0x1ba>
    66d0:	1192      	asrs	r2, r2, #6
    66d2:	e000      	b.n	66d6 <__divsi3+0x14a>
    66d4:	0989      	lsrs	r1, r1, #6
    66d6:	09c3      	lsrs	r3, r0, #7
    66d8:	428b      	cmp	r3, r1
    66da:	d301      	bcc.n	66e0 <__divsi3+0x154>
    66dc:	01cb      	lsls	r3, r1, #7
    66de:	1ac0      	subs	r0, r0, r3
    66e0:	4152      	adcs	r2, r2
    66e2:	0983      	lsrs	r3, r0, #6
    66e4:	428b      	cmp	r3, r1
    66e6:	d301      	bcc.n	66ec <__divsi3+0x160>
    66e8:	018b      	lsls	r3, r1, #6
    66ea:	1ac0      	subs	r0, r0, r3
    66ec:	4152      	adcs	r2, r2
    66ee:	0943      	lsrs	r3, r0, #5
    66f0:	428b      	cmp	r3, r1
    66f2:	d301      	bcc.n	66f8 <__divsi3+0x16c>
    66f4:	014b      	lsls	r3, r1, #5
    66f6:	1ac0      	subs	r0, r0, r3
    66f8:	4152      	adcs	r2, r2
    66fa:	0903      	lsrs	r3, r0, #4
    66fc:	428b      	cmp	r3, r1
    66fe:	d301      	bcc.n	6704 <__divsi3+0x178>
    6700:	010b      	lsls	r3, r1, #4
    6702:	1ac0      	subs	r0, r0, r3
    6704:	4152      	adcs	r2, r2
    6706:	08c3      	lsrs	r3, r0, #3
    6708:	428b      	cmp	r3, r1
    670a:	d301      	bcc.n	6710 <__divsi3+0x184>
    670c:	00cb      	lsls	r3, r1, #3
    670e:	1ac0      	subs	r0, r0, r3
    6710:	4152      	adcs	r2, r2
    6712:	0883      	lsrs	r3, r0, #2
    6714:	428b      	cmp	r3, r1
    6716:	d301      	bcc.n	671c <__divsi3+0x190>
    6718:	008b      	lsls	r3, r1, #2
    671a:	1ac0      	subs	r0, r0, r3
    671c:	4152      	adcs	r2, r2
    671e:	d2d9      	bcs.n	66d4 <__divsi3+0x148>
    6720:	0843      	lsrs	r3, r0, #1
    6722:	428b      	cmp	r3, r1
    6724:	d301      	bcc.n	672a <__divsi3+0x19e>
    6726:	004b      	lsls	r3, r1, #1
    6728:	1ac0      	subs	r0, r0, r3
    672a:	4152      	adcs	r2, r2
    672c:	1a41      	subs	r1, r0, r1
    672e:	d200      	bcs.n	6732 <__divsi3+0x1a6>
    6730:	4601      	mov	r1, r0
    6732:	4663      	mov	r3, ip
    6734:	4152      	adcs	r2, r2
    6736:	105b      	asrs	r3, r3, #1
    6738:	4610      	mov	r0, r2
    673a:	d301      	bcc.n	6740 <__divsi3+0x1b4>
    673c:	4240      	negs	r0, r0
    673e:	2b00      	cmp	r3, #0
    6740:	d500      	bpl.n	6744 <__divsi3+0x1b8>
    6742:	4249      	negs	r1, r1
    6744:	4770      	bx	lr
    6746:	4663      	mov	r3, ip
    6748:	105b      	asrs	r3, r3, #1
    674a:	d300      	bcc.n	674e <__divsi3+0x1c2>
    674c:	4240      	negs	r0, r0
    674e:	b501      	push	{r0, lr}
    6750:	2000      	movs	r0, #0
    6752:	f000 f805 	bl	6760 <__aeabi_idiv0>
    6756:	bd02      	pop	{r1, pc}

00006758 <__aeabi_idivmod>:
    6758:	2900      	cmp	r1, #0
    675a:	d0f8      	beq.n	674e <__divsi3+0x1c2>
    675c:	e716      	b.n	658c <__divsi3>
    675e:	4770      	bx	lr

00006760 <__aeabi_idiv0>:
    6760:	4770      	bx	lr
    6762:	46c0      	nop			; (mov r8, r8)

00006764 <__aeabi_lmul>:
    6764:	b5f0      	push	{r4, r5, r6, r7, lr}
    6766:	46ce      	mov	lr, r9
    6768:	4647      	mov	r7, r8
    676a:	0415      	lsls	r5, r2, #16
    676c:	0c2d      	lsrs	r5, r5, #16
    676e:	002e      	movs	r6, r5
    6770:	b580      	push	{r7, lr}
    6772:	0407      	lsls	r7, r0, #16
    6774:	0c14      	lsrs	r4, r2, #16
    6776:	0c3f      	lsrs	r7, r7, #16
    6778:	4699      	mov	r9, r3
    677a:	0c03      	lsrs	r3, r0, #16
    677c:	437e      	muls	r6, r7
    677e:	435d      	muls	r5, r3
    6780:	4367      	muls	r7, r4
    6782:	4363      	muls	r3, r4
    6784:	197f      	adds	r7, r7, r5
    6786:	0c34      	lsrs	r4, r6, #16
    6788:	19e4      	adds	r4, r4, r7
    678a:	469c      	mov	ip, r3
    678c:	42a5      	cmp	r5, r4
    678e:	d903      	bls.n	6798 <__aeabi_lmul+0x34>
    6790:	2380      	movs	r3, #128	; 0x80
    6792:	025b      	lsls	r3, r3, #9
    6794:	4698      	mov	r8, r3
    6796:	44c4      	add	ip, r8
    6798:	464b      	mov	r3, r9
    679a:	4351      	muls	r1, r2
    679c:	4343      	muls	r3, r0
    679e:	0436      	lsls	r6, r6, #16
    67a0:	0c36      	lsrs	r6, r6, #16
    67a2:	0c25      	lsrs	r5, r4, #16
    67a4:	0424      	lsls	r4, r4, #16
    67a6:	4465      	add	r5, ip
    67a8:	19a4      	adds	r4, r4, r6
    67aa:	1859      	adds	r1, r3, r1
    67ac:	1949      	adds	r1, r1, r5
    67ae:	0020      	movs	r0, r4
    67b0:	bc0c      	pop	{r2, r3}
    67b2:	4690      	mov	r8, r2
    67b4:	4699      	mov	r9, r3
    67b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000067b8 <__aeabi_dadd>:
    67b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67ba:	4645      	mov	r5, r8
    67bc:	46de      	mov	lr, fp
    67be:	4657      	mov	r7, sl
    67c0:	464e      	mov	r6, r9
    67c2:	030c      	lsls	r4, r1, #12
    67c4:	b5e0      	push	{r5, r6, r7, lr}
    67c6:	004e      	lsls	r6, r1, #1
    67c8:	0fc9      	lsrs	r1, r1, #31
    67ca:	4688      	mov	r8, r1
    67cc:	000d      	movs	r5, r1
    67ce:	0a61      	lsrs	r1, r4, #9
    67d0:	0f44      	lsrs	r4, r0, #29
    67d2:	430c      	orrs	r4, r1
    67d4:	00c7      	lsls	r7, r0, #3
    67d6:	0319      	lsls	r1, r3, #12
    67d8:	0058      	lsls	r0, r3, #1
    67da:	0fdb      	lsrs	r3, r3, #31
    67dc:	469b      	mov	fp, r3
    67de:	0a4b      	lsrs	r3, r1, #9
    67e0:	0f51      	lsrs	r1, r2, #29
    67e2:	430b      	orrs	r3, r1
    67e4:	0d76      	lsrs	r6, r6, #21
    67e6:	0d40      	lsrs	r0, r0, #21
    67e8:	0019      	movs	r1, r3
    67ea:	00d2      	lsls	r2, r2, #3
    67ec:	45d8      	cmp	r8, fp
    67ee:	d100      	bne.n	67f2 <__aeabi_dadd+0x3a>
    67f0:	e0ae      	b.n	6950 <__aeabi_dadd+0x198>
    67f2:	1a35      	subs	r5, r6, r0
    67f4:	2d00      	cmp	r5, #0
    67f6:	dc00      	bgt.n	67fa <__aeabi_dadd+0x42>
    67f8:	e0f6      	b.n	69e8 <__aeabi_dadd+0x230>
    67fa:	2800      	cmp	r0, #0
    67fc:	d10f      	bne.n	681e <__aeabi_dadd+0x66>
    67fe:	4313      	orrs	r3, r2
    6800:	d100      	bne.n	6804 <__aeabi_dadd+0x4c>
    6802:	e0db      	b.n	69bc <__aeabi_dadd+0x204>
    6804:	1e6b      	subs	r3, r5, #1
    6806:	2b00      	cmp	r3, #0
    6808:	d000      	beq.n	680c <__aeabi_dadd+0x54>
    680a:	e137      	b.n	6a7c <__aeabi_dadd+0x2c4>
    680c:	1aba      	subs	r2, r7, r2
    680e:	4297      	cmp	r7, r2
    6810:	41bf      	sbcs	r7, r7
    6812:	1a64      	subs	r4, r4, r1
    6814:	427f      	negs	r7, r7
    6816:	1be4      	subs	r4, r4, r7
    6818:	2601      	movs	r6, #1
    681a:	0017      	movs	r7, r2
    681c:	e024      	b.n	6868 <__aeabi_dadd+0xb0>
    681e:	4bc6      	ldr	r3, [pc, #792]	; (6b38 <__aeabi_dadd+0x380>)
    6820:	429e      	cmp	r6, r3
    6822:	d04d      	beq.n	68c0 <__aeabi_dadd+0x108>
    6824:	2380      	movs	r3, #128	; 0x80
    6826:	041b      	lsls	r3, r3, #16
    6828:	4319      	orrs	r1, r3
    682a:	2d38      	cmp	r5, #56	; 0x38
    682c:	dd00      	ble.n	6830 <__aeabi_dadd+0x78>
    682e:	e107      	b.n	6a40 <__aeabi_dadd+0x288>
    6830:	2d1f      	cmp	r5, #31
    6832:	dd00      	ble.n	6836 <__aeabi_dadd+0x7e>
    6834:	e138      	b.n	6aa8 <__aeabi_dadd+0x2f0>
    6836:	2020      	movs	r0, #32
    6838:	1b43      	subs	r3, r0, r5
    683a:	469a      	mov	sl, r3
    683c:	000b      	movs	r3, r1
    683e:	4650      	mov	r0, sl
    6840:	4083      	lsls	r3, r0
    6842:	4699      	mov	r9, r3
    6844:	0013      	movs	r3, r2
    6846:	4648      	mov	r0, r9
    6848:	40eb      	lsrs	r3, r5
    684a:	4318      	orrs	r0, r3
    684c:	0003      	movs	r3, r0
    684e:	4650      	mov	r0, sl
    6850:	4082      	lsls	r2, r0
    6852:	1e50      	subs	r0, r2, #1
    6854:	4182      	sbcs	r2, r0
    6856:	40e9      	lsrs	r1, r5
    6858:	431a      	orrs	r2, r3
    685a:	1aba      	subs	r2, r7, r2
    685c:	1a61      	subs	r1, r4, r1
    685e:	4297      	cmp	r7, r2
    6860:	41a4      	sbcs	r4, r4
    6862:	0017      	movs	r7, r2
    6864:	4264      	negs	r4, r4
    6866:	1b0c      	subs	r4, r1, r4
    6868:	0223      	lsls	r3, r4, #8
    686a:	d562      	bpl.n	6932 <__aeabi_dadd+0x17a>
    686c:	0264      	lsls	r4, r4, #9
    686e:	0a65      	lsrs	r5, r4, #9
    6870:	2d00      	cmp	r5, #0
    6872:	d100      	bne.n	6876 <__aeabi_dadd+0xbe>
    6874:	e0df      	b.n	6a36 <__aeabi_dadd+0x27e>
    6876:	0028      	movs	r0, r5
    6878:	f001 fbe4 	bl	8044 <__clzsi2>
    687c:	0003      	movs	r3, r0
    687e:	3b08      	subs	r3, #8
    6880:	2b1f      	cmp	r3, #31
    6882:	dd00      	ble.n	6886 <__aeabi_dadd+0xce>
    6884:	e0d2      	b.n	6a2c <__aeabi_dadd+0x274>
    6886:	2220      	movs	r2, #32
    6888:	003c      	movs	r4, r7
    688a:	1ad2      	subs	r2, r2, r3
    688c:	409d      	lsls	r5, r3
    688e:	40d4      	lsrs	r4, r2
    6890:	409f      	lsls	r7, r3
    6892:	4325      	orrs	r5, r4
    6894:	429e      	cmp	r6, r3
    6896:	dd00      	ble.n	689a <__aeabi_dadd+0xe2>
    6898:	e0c4      	b.n	6a24 <__aeabi_dadd+0x26c>
    689a:	1b9e      	subs	r6, r3, r6
    689c:	1c73      	adds	r3, r6, #1
    689e:	2b1f      	cmp	r3, #31
    68a0:	dd00      	ble.n	68a4 <__aeabi_dadd+0xec>
    68a2:	e0f1      	b.n	6a88 <__aeabi_dadd+0x2d0>
    68a4:	2220      	movs	r2, #32
    68a6:	0038      	movs	r0, r7
    68a8:	0029      	movs	r1, r5
    68aa:	1ad2      	subs	r2, r2, r3
    68ac:	40d8      	lsrs	r0, r3
    68ae:	4091      	lsls	r1, r2
    68b0:	4097      	lsls	r7, r2
    68b2:	002c      	movs	r4, r5
    68b4:	4301      	orrs	r1, r0
    68b6:	1e78      	subs	r0, r7, #1
    68b8:	4187      	sbcs	r7, r0
    68ba:	40dc      	lsrs	r4, r3
    68bc:	2600      	movs	r6, #0
    68be:	430f      	orrs	r7, r1
    68c0:	077b      	lsls	r3, r7, #29
    68c2:	d009      	beq.n	68d8 <__aeabi_dadd+0x120>
    68c4:	230f      	movs	r3, #15
    68c6:	403b      	ands	r3, r7
    68c8:	2b04      	cmp	r3, #4
    68ca:	d005      	beq.n	68d8 <__aeabi_dadd+0x120>
    68cc:	1d3b      	adds	r3, r7, #4
    68ce:	42bb      	cmp	r3, r7
    68d0:	41bf      	sbcs	r7, r7
    68d2:	427f      	negs	r7, r7
    68d4:	19e4      	adds	r4, r4, r7
    68d6:	001f      	movs	r7, r3
    68d8:	0223      	lsls	r3, r4, #8
    68da:	d52c      	bpl.n	6936 <__aeabi_dadd+0x17e>
    68dc:	4b96      	ldr	r3, [pc, #600]	; (6b38 <__aeabi_dadd+0x380>)
    68de:	3601      	adds	r6, #1
    68e0:	429e      	cmp	r6, r3
    68e2:	d100      	bne.n	68e6 <__aeabi_dadd+0x12e>
    68e4:	e09a      	b.n	6a1c <__aeabi_dadd+0x264>
    68e6:	4645      	mov	r5, r8
    68e8:	4b94      	ldr	r3, [pc, #592]	; (6b3c <__aeabi_dadd+0x384>)
    68ea:	08ff      	lsrs	r7, r7, #3
    68ec:	401c      	ands	r4, r3
    68ee:	0760      	lsls	r0, r4, #29
    68f0:	0576      	lsls	r6, r6, #21
    68f2:	0264      	lsls	r4, r4, #9
    68f4:	4307      	orrs	r7, r0
    68f6:	0b24      	lsrs	r4, r4, #12
    68f8:	0d76      	lsrs	r6, r6, #21
    68fa:	2100      	movs	r1, #0
    68fc:	0324      	lsls	r4, r4, #12
    68fe:	0b23      	lsrs	r3, r4, #12
    6900:	0d0c      	lsrs	r4, r1, #20
    6902:	4a8f      	ldr	r2, [pc, #572]	; (6b40 <__aeabi_dadd+0x388>)
    6904:	0524      	lsls	r4, r4, #20
    6906:	431c      	orrs	r4, r3
    6908:	4014      	ands	r4, r2
    690a:	0533      	lsls	r3, r6, #20
    690c:	4323      	orrs	r3, r4
    690e:	005b      	lsls	r3, r3, #1
    6910:	07ed      	lsls	r5, r5, #31
    6912:	085b      	lsrs	r3, r3, #1
    6914:	432b      	orrs	r3, r5
    6916:	0038      	movs	r0, r7
    6918:	0019      	movs	r1, r3
    691a:	bc3c      	pop	{r2, r3, r4, r5}
    691c:	4690      	mov	r8, r2
    691e:	4699      	mov	r9, r3
    6920:	46a2      	mov	sl, r4
    6922:	46ab      	mov	fp, r5
    6924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6926:	4664      	mov	r4, ip
    6928:	4304      	orrs	r4, r0
    692a:	d100      	bne.n	692e <__aeabi_dadd+0x176>
    692c:	e211      	b.n	6d52 <__aeabi_dadd+0x59a>
    692e:	0004      	movs	r4, r0
    6930:	4667      	mov	r7, ip
    6932:	077b      	lsls	r3, r7, #29
    6934:	d1c6      	bne.n	68c4 <__aeabi_dadd+0x10c>
    6936:	4645      	mov	r5, r8
    6938:	0760      	lsls	r0, r4, #29
    693a:	08ff      	lsrs	r7, r7, #3
    693c:	4307      	orrs	r7, r0
    693e:	08e4      	lsrs	r4, r4, #3
    6940:	4b7d      	ldr	r3, [pc, #500]	; (6b38 <__aeabi_dadd+0x380>)
    6942:	429e      	cmp	r6, r3
    6944:	d030      	beq.n	69a8 <__aeabi_dadd+0x1f0>
    6946:	0324      	lsls	r4, r4, #12
    6948:	0576      	lsls	r6, r6, #21
    694a:	0b24      	lsrs	r4, r4, #12
    694c:	0d76      	lsrs	r6, r6, #21
    694e:	e7d4      	b.n	68fa <__aeabi_dadd+0x142>
    6950:	1a33      	subs	r3, r6, r0
    6952:	469a      	mov	sl, r3
    6954:	2b00      	cmp	r3, #0
    6956:	dd78      	ble.n	6a4a <__aeabi_dadd+0x292>
    6958:	2800      	cmp	r0, #0
    695a:	d031      	beq.n	69c0 <__aeabi_dadd+0x208>
    695c:	4876      	ldr	r0, [pc, #472]	; (6b38 <__aeabi_dadd+0x380>)
    695e:	4286      	cmp	r6, r0
    6960:	d0ae      	beq.n	68c0 <__aeabi_dadd+0x108>
    6962:	2080      	movs	r0, #128	; 0x80
    6964:	0400      	lsls	r0, r0, #16
    6966:	4301      	orrs	r1, r0
    6968:	4653      	mov	r3, sl
    696a:	2b38      	cmp	r3, #56	; 0x38
    696c:	dc00      	bgt.n	6970 <__aeabi_dadd+0x1b8>
    696e:	e0e9      	b.n	6b44 <__aeabi_dadd+0x38c>
    6970:	430a      	orrs	r2, r1
    6972:	1e51      	subs	r1, r2, #1
    6974:	418a      	sbcs	r2, r1
    6976:	2100      	movs	r1, #0
    6978:	19d2      	adds	r2, r2, r7
    697a:	42ba      	cmp	r2, r7
    697c:	41bf      	sbcs	r7, r7
    697e:	1909      	adds	r1, r1, r4
    6980:	427c      	negs	r4, r7
    6982:	0017      	movs	r7, r2
    6984:	190c      	adds	r4, r1, r4
    6986:	0223      	lsls	r3, r4, #8
    6988:	d5d3      	bpl.n	6932 <__aeabi_dadd+0x17a>
    698a:	4b6b      	ldr	r3, [pc, #428]	; (6b38 <__aeabi_dadd+0x380>)
    698c:	3601      	adds	r6, #1
    698e:	429e      	cmp	r6, r3
    6990:	d100      	bne.n	6994 <__aeabi_dadd+0x1dc>
    6992:	e13a      	b.n	6c0a <__aeabi_dadd+0x452>
    6994:	2001      	movs	r0, #1
    6996:	4b69      	ldr	r3, [pc, #420]	; (6b3c <__aeabi_dadd+0x384>)
    6998:	401c      	ands	r4, r3
    699a:	087b      	lsrs	r3, r7, #1
    699c:	4007      	ands	r7, r0
    699e:	431f      	orrs	r7, r3
    69a0:	07e0      	lsls	r0, r4, #31
    69a2:	4307      	orrs	r7, r0
    69a4:	0864      	lsrs	r4, r4, #1
    69a6:	e78b      	b.n	68c0 <__aeabi_dadd+0x108>
    69a8:	0023      	movs	r3, r4
    69aa:	433b      	orrs	r3, r7
    69ac:	d100      	bne.n	69b0 <__aeabi_dadd+0x1f8>
    69ae:	e1cb      	b.n	6d48 <__aeabi_dadd+0x590>
    69b0:	2280      	movs	r2, #128	; 0x80
    69b2:	0312      	lsls	r2, r2, #12
    69b4:	4314      	orrs	r4, r2
    69b6:	0324      	lsls	r4, r4, #12
    69b8:	0b24      	lsrs	r4, r4, #12
    69ba:	e79e      	b.n	68fa <__aeabi_dadd+0x142>
    69bc:	002e      	movs	r6, r5
    69be:	e77f      	b.n	68c0 <__aeabi_dadd+0x108>
    69c0:	0008      	movs	r0, r1
    69c2:	4310      	orrs	r0, r2
    69c4:	d100      	bne.n	69c8 <__aeabi_dadd+0x210>
    69c6:	e0b4      	b.n	6b32 <__aeabi_dadd+0x37a>
    69c8:	1e58      	subs	r0, r3, #1
    69ca:	2800      	cmp	r0, #0
    69cc:	d000      	beq.n	69d0 <__aeabi_dadd+0x218>
    69ce:	e0de      	b.n	6b8e <__aeabi_dadd+0x3d6>
    69d0:	18ba      	adds	r2, r7, r2
    69d2:	42ba      	cmp	r2, r7
    69d4:	419b      	sbcs	r3, r3
    69d6:	1864      	adds	r4, r4, r1
    69d8:	425b      	negs	r3, r3
    69da:	18e4      	adds	r4, r4, r3
    69dc:	0017      	movs	r7, r2
    69de:	2601      	movs	r6, #1
    69e0:	0223      	lsls	r3, r4, #8
    69e2:	d5a6      	bpl.n	6932 <__aeabi_dadd+0x17a>
    69e4:	2602      	movs	r6, #2
    69e6:	e7d5      	b.n	6994 <__aeabi_dadd+0x1dc>
    69e8:	2d00      	cmp	r5, #0
    69ea:	d16e      	bne.n	6aca <__aeabi_dadd+0x312>
    69ec:	1c70      	adds	r0, r6, #1
    69ee:	0540      	lsls	r0, r0, #21
    69f0:	0d40      	lsrs	r0, r0, #21
    69f2:	2801      	cmp	r0, #1
    69f4:	dc00      	bgt.n	69f8 <__aeabi_dadd+0x240>
    69f6:	e0f9      	b.n	6bec <__aeabi_dadd+0x434>
    69f8:	1ab8      	subs	r0, r7, r2
    69fa:	4684      	mov	ip, r0
    69fc:	4287      	cmp	r7, r0
    69fe:	4180      	sbcs	r0, r0
    6a00:	1ae5      	subs	r5, r4, r3
    6a02:	4240      	negs	r0, r0
    6a04:	1a2d      	subs	r5, r5, r0
    6a06:	0228      	lsls	r0, r5, #8
    6a08:	d400      	bmi.n	6a0c <__aeabi_dadd+0x254>
    6a0a:	e089      	b.n	6b20 <__aeabi_dadd+0x368>
    6a0c:	1bd7      	subs	r7, r2, r7
    6a0e:	42ba      	cmp	r2, r7
    6a10:	4192      	sbcs	r2, r2
    6a12:	1b1c      	subs	r4, r3, r4
    6a14:	4252      	negs	r2, r2
    6a16:	1aa5      	subs	r5, r4, r2
    6a18:	46d8      	mov	r8, fp
    6a1a:	e729      	b.n	6870 <__aeabi_dadd+0xb8>
    6a1c:	4645      	mov	r5, r8
    6a1e:	2400      	movs	r4, #0
    6a20:	2700      	movs	r7, #0
    6a22:	e76a      	b.n	68fa <__aeabi_dadd+0x142>
    6a24:	4c45      	ldr	r4, [pc, #276]	; (6b3c <__aeabi_dadd+0x384>)
    6a26:	1af6      	subs	r6, r6, r3
    6a28:	402c      	ands	r4, r5
    6a2a:	e749      	b.n	68c0 <__aeabi_dadd+0x108>
    6a2c:	003d      	movs	r5, r7
    6a2e:	3828      	subs	r0, #40	; 0x28
    6a30:	4085      	lsls	r5, r0
    6a32:	2700      	movs	r7, #0
    6a34:	e72e      	b.n	6894 <__aeabi_dadd+0xdc>
    6a36:	0038      	movs	r0, r7
    6a38:	f001 fb04 	bl	8044 <__clzsi2>
    6a3c:	3020      	adds	r0, #32
    6a3e:	e71d      	b.n	687c <__aeabi_dadd+0xc4>
    6a40:	430a      	orrs	r2, r1
    6a42:	1e51      	subs	r1, r2, #1
    6a44:	418a      	sbcs	r2, r1
    6a46:	2100      	movs	r1, #0
    6a48:	e707      	b.n	685a <__aeabi_dadd+0xa2>
    6a4a:	2b00      	cmp	r3, #0
    6a4c:	d000      	beq.n	6a50 <__aeabi_dadd+0x298>
    6a4e:	e0f3      	b.n	6c38 <__aeabi_dadd+0x480>
    6a50:	1c70      	adds	r0, r6, #1
    6a52:	0543      	lsls	r3, r0, #21
    6a54:	0d5b      	lsrs	r3, r3, #21
    6a56:	2b01      	cmp	r3, #1
    6a58:	dc00      	bgt.n	6a5c <__aeabi_dadd+0x2a4>
    6a5a:	e0ad      	b.n	6bb8 <__aeabi_dadd+0x400>
    6a5c:	4b36      	ldr	r3, [pc, #216]	; (6b38 <__aeabi_dadd+0x380>)
    6a5e:	4298      	cmp	r0, r3
    6a60:	d100      	bne.n	6a64 <__aeabi_dadd+0x2ac>
    6a62:	e0d1      	b.n	6c08 <__aeabi_dadd+0x450>
    6a64:	18ba      	adds	r2, r7, r2
    6a66:	42ba      	cmp	r2, r7
    6a68:	41bf      	sbcs	r7, r7
    6a6a:	1864      	adds	r4, r4, r1
    6a6c:	427f      	negs	r7, r7
    6a6e:	19e4      	adds	r4, r4, r7
    6a70:	07e7      	lsls	r7, r4, #31
    6a72:	0852      	lsrs	r2, r2, #1
    6a74:	4317      	orrs	r7, r2
    6a76:	0864      	lsrs	r4, r4, #1
    6a78:	0006      	movs	r6, r0
    6a7a:	e721      	b.n	68c0 <__aeabi_dadd+0x108>
    6a7c:	482e      	ldr	r0, [pc, #184]	; (6b38 <__aeabi_dadd+0x380>)
    6a7e:	4285      	cmp	r5, r0
    6a80:	d100      	bne.n	6a84 <__aeabi_dadd+0x2cc>
    6a82:	e093      	b.n	6bac <__aeabi_dadd+0x3f4>
    6a84:	001d      	movs	r5, r3
    6a86:	e6d0      	b.n	682a <__aeabi_dadd+0x72>
    6a88:	0029      	movs	r1, r5
    6a8a:	3e1f      	subs	r6, #31
    6a8c:	40f1      	lsrs	r1, r6
    6a8e:	2b20      	cmp	r3, #32
    6a90:	d100      	bne.n	6a94 <__aeabi_dadd+0x2dc>
    6a92:	e08d      	b.n	6bb0 <__aeabi_dadd+0x3f8>
    6a94:	2240      	movs	r2, #64	; 0x40
    6a96:	1ad3      	subs	r3, r2, r3
    6a98:	409d      	lsls	r5, r3
    6a9a:	432f      	orrs	r7, r5
    6a9c:	1e7d      	subs	r5, r7, #1
    6a9e:	41af      	sbcs	r7, r5
    6aa0:	2400      	movs	r4, #0
    6aa2:	430f      	orrs	r7, r1
    6aa4:	2600      	movs	r6, #0
    6aa6:	e744      	b.n	6932 <__aeabi_dadd+0x17a>
    6aa8:	002b      	movs	r3, r5
    6aaa:	0008      	movs	r0, r1
    6aac:	3b20      	subs	r3, #32
    6aae:	40d8      	lsrs	r0, r3
    6ab0:	0003      	movs	r3, r0
    6ab2:	2d20      	cmp	r5, #32
    6ab4:	d100      	bne.n	6ab8 <__aeabi_dadd+0x300>
    6ab6:	e07d      	b.n	6bb4 <__aeabi_dadd+0x3fc>
    6ab8:	2040      	movs	r0, #64	; 0x40
    6aba:	1b45      	subs	r5, r0, r5
    6abc:	40a9      	lsls	r1, r5
    6abe:	430a      	orrs	r2, r1
    6ac0:	1e51      	subs	r1, r2, #1
    6ac2:	418a      	sbcs	r2, r1
    6ac4:	2100      	movs	r1, #0
    6ac6:	431a      	orrs	r2, r3
    6ac8:	e6c7      	b.n	685a <__aeabi_dadd+0xa2>
    6aca:	2e00      	cmp	r6, #0
    6acc:	d050      	beq.n	6b70 <__aeabi_dadd+0x3b8>
    6ace:	4e1a      	ldr	r6, [pc, #104]	; (6b38 <__aeabi_dadd+0x380>)
    6ad0:	42b0      	cmp	r0, r6
    6ad2:	d057      	beq.n	6b84 <__aeabi_dadd+0x3cc>
    6ad4:	2680      	movs	r6, #128	; 0x80
    6ad6:	426b      	negs	r3, r5
    6ad8:	4699      	mov	r9, r3
    6ada:	0436      	lsls	r6, r6, #16
    6adc:	4334      	orrs	r4, r6
    6ade:	464b      	mov	r3, r9
    6ae0:	2b38      	cmp	r3, #56	; 0x38
    6ae2:	dd00      	ble.n	6ae6 <__aeabi_dadd+0x32e>
    6ae4:	e0d6      	b.n	6c94 <__aeabi_dadd+0x4dc>
    6ae6:	2b1f      	cmp	r3, #31
    6ae8:	dd00      	ble.n	6aec <__aeabi_dadd+0x334>
    6aea:	e135      	b.n	6d58 <__aeabi_dadd+0x5a0>
    6aec:	2620      	movs	r6, #32
    6aee:	1af5      	subs	r5, r6, r3
    6af0:	0026      	movs	r6, r4
    6af2:	40ae      	lsls	r6, r5
    6af4:	46b2      	mov	sl, r6
    6af6:	003e      	movs	r6, r7
    6af8:	40de      	lsrs	r6, r3
    6afa:	46ac      	mov	ip, r5
    6afc:	0035      	movs	r5, r6
    6afe:	4656      	mov	r6, sl
    6b00:	432e      	orrs	r6, r5
    6b02:	4665      	mov	r5, ip
    6b04:	40af      	lsls	r7, r5
    6b06:	1e7d      	subs	r5, r7, #1
    6b08:	41af      	sbcs	r7, r5
    6b0a:	40dc      	lsrs	r4, r3
    6b0c:	4337      	orrs	r7, r6
    6b0e:	1bd7      	subs	r7, r2, r7
    6b10:	42ba      	cmp	r2, r7
    6b12:	4192      	sbcs	r2, r2
    6b14:	1b0c      	subs	r4, r1, r4
    6b16:	4252      	negs	r2, r2
    6b18:	1aa4      	subs	r4, r4, r2
    6b1a:	0006      	movs	r6, r0
    6b1c:	46d8      	mov	r8, fp
    6b1e:	e6a3      	b.n	6868 <__aeabi_dadd+0xb0>
    6b20:	4664      	mov	r4, ip
    6b22:	4667      	mov	r7, ip
    6b24:	432c      	orrs	r4, r5
    6b26:	d000      	beq.n	6b2a <__aeabi_dadd+0x372>
    6b28:	e6a2      	b.n	6870 <__aeabi_dadd+0xb8>
    6b2a:	2500      	movs	r5, #0
    6b2c:	2600      	movs	r6, #0
    6b2e:	2700      	movs	r7, #0
    6b30:	e706      	b.n	6940 <__aeabi_dadd+0x188>
    6b32:	001e      	movs	r6, r3
    6b34:	e6c4      	b.n	68c0 <__aeabi_dadd+0x108>
    6b36:	46c0      	nop			; (mov r8, r8)
    6b38:	000007ff 	.word	0x000007ff
    6b3c:	ff7fffff 	.word	0xff7fffff
    6b40:	800fffff 	.word	0x800fffff
    6b44:	2b1f      	cmp	r3, #31
    6b46:	dc63      	bgt.n	6c10 <__aeabi_dadd+0x458>
    6b48:	2020      	movs	r0, #32
    6b4a:	1ac3      	subs	r3, r0, r3
    6b4c:	0008      	movs	r0, r1
    6b4e:	4098      	lsls	r0, r3
    6b50:	469c      	mov	ip, r3
    6b52:	4683      	mov	fp, r0
    6b54:	4653      	mov	r3, sl
    6b56:	0010      	movs	r0, r2
    6b58:	40d8      	lsrs	r0, r3
    6b5a:	0003      	movs	r3, r0
    6b5c:	4658      	mov	r0, fp
    6b5e:	4318      	orrs	r0, r3
    6b60:	4663      	mov	r3, ip
    6b62:	409a      	lsls	r2, r3
    6b64:	1e53      	subs	r3, r2, #1
    6b66:	419a      	sbcs	r2, r3
    6b68:	4653      	mov	r3, sl
    6b6a:	4302      	orrs	r2, r0
    6b6c:	40d9      	lsrs	r1, r3
    6b6e:	e703      	b.n	6978 <__aeabi_dadd+0x1c0>
    6b70:	0026      	movs	r6, r4
    6b72:	433e      	orrs	r6, r7
    6b74:	d006      	beq.n	6b84 <__aeabi_dadd+0x3cc>
    6b76:	43eb      	mvns	r3, r5
    6b78:	4699      	mov	r9, r3
    6b7a:	2b00      	cmp	r3, #0
    6b7c:	d0c7      	beq.n	6b0e <__aeabi_dadd+0x356>
    6b7e:	4e94      	ldr	r6, [pc, #592]	; (6dd0 <__aeabi_dadd+0x618>)
    6b80:	42b0      	cmp	r0, r6
    6b82:	d1ac      	bne.n	6ade <__aeabi_dadd+0x326>
    6b84:	000c      	movs	r4, r1
    6b86:	0017      	movs	r7, r2
    6b88:	0006      	movs	r6, r0
    6b8a:	46d8      	mov	r8, fp
    6b8c:	e698      	b.n	68c0 <__aeabi_dadd+0x108>
    6b8e:	4b90      	ldr	r3, [pc, #576]	; (6dd0 <__aeabi_dadd+0x618>)
    6b90:	459a      	cmp	sl, r3
    6b92:	d00b      	beq.n	6bac <__aeabi_dadd+0x3f4>
    6b94:	4682      	mov	sl, r0
    6b96:	e6e7      	b.n	6968 <__aeabi_dadd+0x1b0>
    6b98:	2800      	cmp	r0, #0
    6b9a:	d000      	beq.n	6b9e <__aeabi_dadd+0x3e6>
    6b9c:	e09e      	b.n	6cdc <__aeabi_dadd+0x524>
    6b9e:	0018      	movs	r0, r3
    6ba0:	4310      	orrs	r0, r2
    6ba2:	d100      	bne.n	6ba6 <__aeabi_dadd+0x3ee>
    6ba4:	e0e9      	b.n	6d7a <__aeabi_dadd+0x5c2>
    6ba6:	001c      	movs	r4, r3
    6ba8:	0017      	movs	r7, r2
    6baa:	46d8      	mov	r8, fp
    6bac:	4e88      	ldr	r6, [pc, #544]	; (6dd0 <__aeabi_dadd+0x618>)
    6bae:	e687      	b.n	68c0 <__aeabi_dadd+0x108>
    6bb0:	2500      	movs	r5, #0
    6bb2:	e772      	b.n	6a9a <__aeabi_dadd+0x2e2>
    6bb4:	2100      	movs	r1, #0
    6bb6:	e782      	b.n	6abe <__aeabi_dadd+0x306>
    6bb8:	0023      	movs	r3, r4
    6bba:	433b      	orrs	r3, r7
    6bbc:	2e00      	cmp	r6, #0
    6bbe:	d000      	beq.n	6bc2 <__aeabi_dadd+0x40a>
    6bc0:	e0ab      	b.n	6d1a <__aeabi_dadd+0x562>
    6bc2:	2b00      	cmp	r3, #0
    6bc4:	d100      	bne.n	6bc8 <__aeabi_dadd+0x410>
    6bc6:	e0e7      	b.n	6d98 <__aeabi_dadd+0x5e0>
    6bc8:	000b      	movs	r3, r1
    6bca:	4313      	orrs	r3, r2
    6bcc:	d100      	bne.n	6bd0 <__aeabi_dadd+0x418>
    6bce:	e677      	b.n	68c0 <__aeabi_dadd+0x108>
    6bd0:	18ba      	adds	r2, r7, r2
    6bd2:	42ba      	cmp	r2, r7
    6bd4:	41bf      	sbcs	r7, r7
    6bd6:	1864      	adds	r4, r4, r1
    6bd8:	427f      	negs	r7, r7
    6bda:	19e4      	adds	r4, r4, r7
    6bdc:	0223      	lsls	r3, r4, #8
    6bde:	d400      	bmi.n	6be2 <__aeabi_dadd+0x42a>
    6be0:	e0f2      	b.n	6dc8 <__aeabi_dadd+0x610>
    6be2:	4b7c      	ldr	r3, [pc, #496]	; (6dd4 <__aeabi_dadd+0x61c>)
    6be4:	0017      	movs	r7, r2
    6be6:	401c      	ands	r4, r3
    6be8:	0006      	movs	r6, r0
    6bea:	e669      	b.n	68c0 <__aeabi_dadd+0x108>
    6bec:	0020      	movs	r0, r4
    6bee:	4338      	orrs	r0, r7
    6bf0:	2e00      	cmp	r6, #0
    6bf2:	d1d1      	bne.n	6b98 <__aeabi_dadd+0x3e0>
    6bf4:	2800      	cmp	r0, #0
    6bf6:	d15b      	bne.n	6cb0 <__aeabi_dadd+0x4f8>
    6bf8:	001c      	movs	r4, r3
    6bfa:	4314      	orrs	r4, r2
    6bfc:	d100      	bne.n	6c00 <__aeabi_dadd+0x448>
    6bfe:	e0a8      	b.n	6d52 <__aeabi_dadd+0x59a>
    6c00:	001c      	movs	r4, r3
    6c02:	0017      	movs	r7, r2
    6c04:	46d8      	mov	r8, fp
    6c06:	e65b      	b.n	68c0 <__aeabi_dadd+0x108>
    6c08:	0006      	movs	r6, r0
    6c0a:	2400      	movs	r4, #0
    6c0c:	2700      	movs	r7, #0
    6c0e:	e697      	b.n	6940 <__aeabi_dadd+0x188>
    6c10:	4650      	mov	r0, sl
    6c12:	000b      	movs	r3, r1
    6c14:	3820      	subs	r0, #32
    6c16:	40c3      	lsrs	r3, r0
    6c18:	4699      	mov	r9, r3
    6c1a:	4653      	mov	r3, sl
    6c1c:	2b20      	cmp	r3, #32
    6c1e:	d100      	bne.n	6c22 <__aeabi_dadd+0x46a>
    6c20:	e095      	b.n	6d4e <__aeabi_dadd+0x596>
    6c22:	2340      	movs	r3, #64	; 0x40
    6c24:	4650      	mov	r0, sl
    6c26:	1a1b      	subs	r3, r3, r0
    6c28:	4099      	lsls	r1, r3
    6c2a:	430a      	orrs	r2, r1
    6c2c:	1e51      	subs	r1, r2, #1
    6c2e:	418a      	sbcs	r2, r1
    6c30:	464b      	mov	r3, r9
    6c32:	2100      	movs	r1, #0
    6c34:	431a      	orrs	r2, r3
    6c36:	e69f      	b.n	6978 <__aeabi_dadd+0x1c0>
    6c38:	2e00      	cmp	r6, #0
    6c3a:	d130      	bne.n	6c9e <__aeabi_dadd+0x4e6>
    6c3c:	0026      	movs	r6, r4
    6c3e:	433e      	orrs	r6, r7
    6c40:	d067      	beq.n	6d12 <__aeabi_dadd+0x55a>
    6c42:	43db      	mvns	r3, r3
    6c44:	469a      	mov	sl, r3
    6c46:	2b00      	cmp	r3, #0
    6c48:	d01c      	beq.n	6c84 <__aeabi_dadd+0x4cc>
    6c4a:	4e61      	ldr	r6, [pc, #388]	; (6dd0 <__aeabi_dadd+0x618>)
    6c4c:	42b0      	cmp	r0, r6
    6c4e:	d060      	beq.n	6d12 <__aeabi_dadd+0x55a>
    6c50:	4653      	mov	r3, sl
    6c52:	2b38      	cmp	r3, #56	; 0x38
    6c54:	dd00      	ble.n	6c58 <__aeabi_dadd+0x4a0>
    6c56:	e096      	b.n	6d86 <__aeabi_dadd+0x5ce>
    6c58:	2b1f      	cmp	r3, #31
    6c5a:	dd00      	ble.n	6c5e <__aeabi_dadd+0x4a6>
    6c5c:	e09f      	b.n	6d9e <__aeabi_dadd+0x5e6>
    6c5e:	2620      	movs	r6, #32
    6c60:	1af3      	subs	r3, r6, r3
    6c62:	0026      	movs	r6, r4
    6c64:	409e      	lsls	r6, r3
    6c66:	469c      	mov	ip, r3
    6c68:	46b3      	mov	fp, r6
    6c6a:	4653      	mov	r3, sl
    6c6c:	003e      	movs	r6, r7
    6c6e:	40de      	lsrs	r6, r3
    6c70:	0033      	movs	r3, r6
    6c72:	465e      	mov	r6, fp
    6c74:	431e      	orrs	r6, r3
    6c76:	4663      	mov	r3, ip
    6c78:	409f      	lsls	r7, r3
    6c7a:	1e7b      	subs	r3, r7, #1
    6c7c:	419f      	sbcs	r7, r3
    6c7e:	4653      	mov	r3, sl
    6c80:	40dc      	lsrs	r4, r3
    6c82:	4337      	orrs	r7, r6
    6c84:	18bf      	adds	r7, r7, r2
    6c86:	4297      	cmp	r7, r2
    6c88:	4192      	sbcs	r2, r2
    6c8a:	1864      	adds	r4, r4, r1
    6c8c:	4252      	negs	r2, r2
    6c8e:	18a4      	adds	r4, r4, r2
    6c90:	0006      	movs	r6, r0
    6c92:	e678      	b.n	6986 <__aeabi_dadd+0x1ce>
    6c94:	4327      	orrs	r7, r4
    6c96:	1e7c      	subs	r4, r7, #1
    6c98:	41a7      	sbcs	r7, r4
    6c9a:	2400      	movs	r4, #0
    6c9c:	e737      	b.n	6b0e <__aeabi_dadd+0x356>
    6c9e:	4e4c      	ldr	r6, [pc, #304]	; (6dd0 <__aeabi_dadd+0x618>)
    6ca0:	42b0      	cmp	r0, r6
    6ca2:	d036      	beq.n	6d12 <__aeabi_dadd+0x55a>
    6ca4:	2680      	movs	r6, #128	; 0x80
    6ca6:	425b      	negs	r3, r3
    6ca8:	0436      	lsls	r6, r6, #16
    6caa:	469a      	mov	sl, r3
    6cac:	4334      	orrs	r4, r6
    6cae:	e7cf      	b.n	6c50 <__aeabi_dadd+0x498>
    6cb0:	0018      	movs	r0, r3
    6cb2:	4310      	orrs	r0, r2
    6cb4:	d100      	bne.n	6cb8 <__aeabi_dadd+0x500>
    6cb6:	e603      	b.n	68c0 <__aeabi_dadd+0x108>
    6cb8:	1ab8      	subs	r0, r7, r2
    6cba:	4684      	mov	ip, r0
    6cbc:	4567      	cmp	r7, ip
    6cbe:	41ad      	sbcs	r5, r5
    6cc0:	1ae0      	subs	r0, r4, r3
    6cc2:	426d      	negs	r5, r5
    6cc4:	1b40      	subs	r0, r0, r5
    6cc6:	0205      	lsls	r5, r0, #8
    6cc8:	d400      	bmi.n	6ccc <__aeabi_dadd+0x514>
    6cca:	e62c      	b.n	6926 <__aeabi_dadd+0x16e>
    6ccc:	1bd7      	subs	r7, r2, r7
    6cce:	42ba      	cmp	r2, r7
    6cd0:	4192      	sbcs	r2, r2
    6cd2:	1b1c      	subs	r4, r3, r4
    6cd4:	4252      	negs	r2, r2
    6cd6:	1aa4      	subs	r4, r4, r2
    6cd8:	46d8      	mov	r8, fp
    6cda:	e5f1      	b.n	68c0 <__aeabi_dadd+0x108>
    6cdc:	0018      	movs	r0, r3
    6cde:	4310      	orrs	r0, r2
    6ce0:	d100      	bne.n	6ce4 <__aeabi_dadd+0x52c>
    6ce2:	e763      	b.n	6bac <__aeabi_dadd+0x3f4>
    6ce4:	08f8      	lsrs	r0, r7, #3
    6ce6:	0767      	lsls	r7, r4, #29
    6ce8:	4307      	orrs	r7, r0
    6cea:	2080      	movs	r0, #128	; 0x80
    6cec:	08e4      	lsrs	r4, r4, #3
    6cee:	0300      	lsls	r0, r0, #12
    6cf0:	4204      	tst	r4, r0
    6cf2:	d008      	beq.n	6d06 <__aeabi_dadd+0x54e>
    6cf4:	08dd      	lsrs	r5, r3, #3
    6cf6:	4205      	tst	r5, r0
    6cf8:	d105      	bne.n	6d06 <__aeabi_dadd+0x54e>
    6cfa:	08d2      	lsrs	r2, r2, #3
    6cfc:	0759      	lsls	r1, r3, #29
    6cfe:	4311      	orrs	r1, r2
    6d00:	000f      	movs	r7, r1
    6d02:	002c      	movs	r4, r5
    6d04:	46d8      	mov	r8, fp
    6d06:	0f7b      	lsrs	r3, r7, #29
    6d08:	00e4      	lsls	r4, r4, #3
    6d0a:	431c      	orrs	r4, r3
    6d0c:	00ff      	lsls	r7, r7, #3
    6d0e:	4e30      	ldr	r6, [pc, #192]	; (6dd0 <__aeabi_dadd+0x618>)
    6d10:	e5d6      	b.n	68c0 <__aeabi_dadd+0x108>
    6d12:	000c      	movs	r4, r1
    6d14:	0017      	movs	r7, r2
    6d16:	0006      	movs	r6, r0
    6d18:	e5d2      	b.n	68c0 <__aeabi_dadd+0x108>
    6d1a:	2b00      	cmp	r3, #0
    6d1c:	d038      	beq.n	6d90 <__aeabi_dadd+0x5d8>
    6d1e:	000b      	movs	r3, r1
    6d20:	4313      	orrs	r3, r2
    6d22:	d100      	bne.n	6d26 <__aeabi_dadd+0x56e>
    6d24:	e742      	b.n	6bac <__aeabi_dadd+0x3f4>
    6d26:	08f8      	lsrs	r0, r7, #3
    6d28:	0767      	lsls	r7, r4, #29
    6d2a:	4307      	orrs	r7, r0
    6d2c:	2080      	movs	r0, #128	; 0x80
    6d2e:	08e4      	lsrs	r4, r4, #3
    6d30:	0300      	lsls	r0, r0, #12
    6d32:	4204      	tst	r4, r0
    6d34:	d0e7      	beq.n	6d06 <__aeabi_dadd+0x54e>
    6d36:	08cb      	lsrs	r3, r1, #3
    6d38:	4203      	tst	r3, r0
    6d3a:	d1e4      	bne.n	6d06 <__aeabi_dadd+0x54e>
    6d3c:	08d2      	lsrs	r2, r2, #3
    6d3e:	0749      	lsls	r1, r1, #29
    6d40:	4311      	orrs	r1, r2
    6d42:	000f      	movs	r7, r1
    6d44:	001c      	movs	r4, r3
    6d46:	e7de      	b.n	6d06 <__aeabi_dadd+0x54e>
    6d48:	2700      	movs	r7, #0
    6d4a:	2400      	movs	r4, #0
    6d4c:	e5d5      	b.n	68fa <__aeabi_dadd+0x142>
    6d4e:	2100      	movs	r1, #0
    6d50:	e76b      	b.n	6c2a <__aeabi_dadd+0x472>
    6d52:	2500      	movs	r5, #0
    6d54:	2700      	movs	r7, #0
    6d56:	e5f3      	b.n	6940 <__aeabi_dadd+0x188>
    6d58:	464e      	mov	r6, r9
    6d5a:	0025      	movs	r5, r4
    6d5c:	3e20      	subs	r6, #32
    6d5e:	40f5      	lsrs	r5, r6
    6d60:	464b      	mov	r3, r9
    6d62:	002e      	movs	r6, r5
    6d64:	2b20      	cmp	r3, #32
    6d66:	d02d      	beq.n	6dc4 <__aeabi_dadd+0x60c>
    6d68:	2540      	movs	r5, #64	; 0x40
    6d6a:	1aed      	subs	r5, r5, r3
    6d6c:	40ac      	lsls	r4, r5
    6d6e:	4327      	orrs	r7, r4
    6d70:	1e7c      	subs	r4, r7, #1
    6d72:	41a7      	sbcs	r7, r4
    6d74:	2400      	movs	r4, #0
    6d76:	4337      	orrs	r7, r6
    6d78:	e6c9      	b.n	6b0e <__aeabi_dadd+0x356>
    6d7a:	2480      	movs	r4, #128	; 0x80
    6d7c:	2500      	movs	r5, #0
    6d7e:	0324      	lsls	r4, r4, #12
    6d80:	4e13      	ldr	r6, [pc, #76]	; (6dd0 <__aeabi_dadd+0x618>)
    6d82:	2700      	movs	r7, #0
    6d84:	e5dc      	b.n	6940 <__aeabi_dadd+0x188>
    6d86:	4327      	orrs	r7, r4
    6d88:	1e7c      	subs	r4, r7, #1
    6d8a:	41a7      	sbcs	r7, r4
    6d8c:	2400      	movs	r4, #0
    6d8e:	e779      	b.n	6c84 <__aeabi_dadd+0x4cc>
    6d90:	000c      	movs	r4, r1
    6d92:	0017      	movs	r7, r2
    6d94:	4e0e      	ldr	r6, [pc, #56]	; (6dd0 <__aeabi_dadd+0x618>)
    6d96:	e593      	b.n	68c0 <__aeabi_dadd+0x108>
    6d98:	000c      	movs	r4, r1
    6d9a:	0017      	movs	r7, r2
    6d9c:	e590      	b.n	68c0 <__aeabi_dadd+0x108>
    6d9e:	4656      	mov	r6, sl
    6da0:	0023      	movs	r3, r4
    6da2:	3e20      	subs	r6, #32
    6da4:	40f3      	lsrs	r3, r6
    6da6:	4699      	mov	r9, r3
    6da8:	4653      	mov	r3, sl
    6daa:	2b20      	cmp	r3, #32
    6dac:	d00e      	beq.n	6dcc <__aeabi_dadd+0x614>
    6dae:	2340      	movs	r3, #64	; 0x40
    6db0:	4656      	mov	r6, sl
    6db2:	1b9b      	subs	r3, r3, r6
    6db4:	409c      	lsls	r4, r3
    6db6:	4327      	orrs	r7, r4
    6db8:	1e7c      	subs	r4, r7, #1
    6dba:	41a7      	sbcs	r7, r4
    6dbc:	464b      	mov	r3, r9
    6dbe:	2400      	movs	r4, #0
    6dc0:	431f      	orrs	r7, r3
    6dc2:	e75f      	b.n	6c84 <__aeabi_dadd+0x4cc>
    6dc4:	2400      	movs	r4, #0
    6dc6:	e7d2      	b.n	6d6e <__aeabi_dadd+0x5b6>
    6dc8:	0017      	movs	r7, r2
    6dca:	e5b2      	b.n	6932 <__aeabi_dadd+0x17a>
    6dcc:	2400      	movs	r4, #0
    6dce:	e7f2      	b.n	6db6 <__aeabi_dadd+0x5fe>
    6dd0:	000007ff 	.word	0x000007ff
    6dd4:	ff7fffff 	.word	0xff7fffff

00006dd8 <__aeabi_ddiv>:
    6dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dda:	4657      	mov	r7, sl
    6ddc:	4645      	mov	r5, r8
    6dde:	46de      	mov	lr, fp
    6de0:	464e      	mov	r6, r9
    6de2:	b5e0      	push	{r5, r6, r7, lr}
    6de4:	004c      	lsls	r4, r1, #1
    6de6:	030e      	lsls	r6, r1, #12
    6de8:	b087      	sub	sp, #28
    6dea:	4683      	mov	fp, r0
    6dec:	4692      	mov	sl, r2
    6dee:	001d      	movs	r5, r3
    6df0:	4680      	mov	r8, r0
    6df2:	0b36      	lsrs	r6, r6, #12
    6df4:	0d64      	lsrs	r4, r4, #21
    6df6:	0fcf      	lsrs	r7, r1, #31
    6df8:	2c00      	cmp	r4, #0
    6dfa:	d04f      	beq.n	6e9c <__aeabi_ddiv+0xc4>
    6dfc:	4b6f      	ldr	r3, [pc, #444]	; (6fbc <__aeabi_ddiv+0x1e4>)
    6dfe:	429c      	cmp	r4, r3
    6e00:	d035      	beq.n	6e6e <__aeabi_ddiv+0x96>
    6e02:	2380      	movs	r3, #128	; 0x80
    6e04:	0f42      	lsrs	r2, r0, #29
    6e06:	041b      	lsls	r3, r3, #16
    6e08:	00f6      	lsls	r6, r6, #3
    6e0a:	4313      	orrs	r3, r2
    6e0c:	4333      	orrs	r3, r6
    6e0e:	4699      	mov	r9, r3
    6e10:	00c3      	lsls	r3, r0, #3
    6e12:	4698      	mov	r8, r3
    6e14:	4b6a      	ldr	r3, [pc, #424]	; (6fc0 <__aeabi_ddiv+0x1e8>)
    6e16:	2600      	movs	r6, #0
    6e18:	469c      	mov	ip, r3
    6e1a:	2300      	movs	r3, #0
    6e1c:	4464      	add	r4, ip
    6e1e:	9303      	str	r3, [sp, #12]
    6e20:	032b      	lsls	r3, r5, #12
    6e22:	0b1b      	lsrs	r3, r3, #12
    6e24:	469b      	mov	fp, r3
    6e26:	006b      	lsls	r3, r5, #1
    6e28:	0fed      	lsrs	r5, r5, #31
    6e2a:	4650      	mov	r0, sl
    6e2c:	0d5b      	lsrs	r3, r3, #21
    6e2e:	9501      	str	r5, [sp, #4]
    6e30:	d05e      	beq.n	6ef0 <__aeabi_ddiv+0x118>
    6e32:	4a62      	ldr	r2, [pc, #392]	; (6fbc <__aeabi_ddiv+0x1e4>)
    6e34:	4293      	cmp	r3, r2
    6e36:	d053      	beq.n	6ee0 <__aeabi_ddiv+0x108>
    6e38:	465a      	mov	r2, fp
    6e3a:	00d1      	lsls	r1, r2, #3
    6e3c:	2280      	movs	r2, #128	; 0x80
    6e3e:	0f40      	lsrs	r0, r0, #29
    6e40:	0412      	lsls	r2, r2, #16
    6e42:	4302      	orrs	r2, r0
    6e44:	430a      	orrs	r2, r1
    6e46:	4693      	mov	fp, r2
    6e48:	4652      	mov	r2, sl
    6e4a:	00d1      	lsls	r1, r2, #3
    6e4c:	4a5c      	ldr	r2, [pc, #368]	; (6fc0 <__aeabi_ddiv+0x1e8>)
    6e4e:	4694      	mov	ip, r2
    6e50:	2200      	movs	r2, #0
    6e52:	4463      	add	r3, ip
    6e54:	0038      	movs	r0, r7
    6e56:	4068      	eors	r0, r5
    6e58:	4684      	mov	ip, r0
    6e5a:	9002      	str	r0, [sp, #8]
    6e5c:	1ae4      	subs	r4, r4, r3
    6e5e:	4316      	orrs	r6, r2
    6e60:	2e0f      	cmp	r6, #15
    6e62:	d900      	bls.n	6e66 <__aeabi_ddiv+0x8e>
    6e64:	e0b4      	b.n	6fd0 <__aeabi_ddiv+0x1f8>
    6e66:	4b57      	ldr	r3, [pc, #348]	; (6fc4 <__aeabi_ddiv+0x1ec>)
    6e68:	00b6      	lsls	r6, r6, #2
    6e6a:	599b      	ldr	r3, [r3, r6]
    6e6c:	469f      	mov	pc, r3
    6e6e:	0003      	movs	r3, r0
    6e70:	4333      	orrs	r3, r6
    6e72:	4699      	mov	r9, r3
    6e74:	d16c      	bne.n	6f50 <__aeabi_ddiv+0x178>
    6e76:	2300      	movs	r3, #0
    6e78:	4698      	mov	r8, r3
    6e7a:	3302      	adds	r3, #2
    6e7c:	2608      	movs	r6, #8
    6e7e:	9303      	str	r3, [sp, #12]
    6e80:	e7ce      	b.n	6e20 <__aeabi_ddiv+0x48>
    6e82:	46cb      	mov	fp, r9
    6e84:	4641      	mov	r1, r8
    6e86:	9a03      	ldr	r2, [sp, #12]
    6e88:	9701      	str	r7, [sp, #4]
    6e8a:	2a02      	cmp	r2, #2
    6e8c:	d165      	bne.n	6f5a <__aeabi_ddiv+0x182>
    6e8e:	9b01      	ldr	r3, [sp, #4]
    6e90:	4c4a      	ldr	r4, [pc, #296]	; (6fbc <__aeabi_ddiv+0x1e4>)
    6e92:	469c      	mov	ip, r3
    6e94:	2300      	movs	r3, #0
    6e96:	2200      	movs	r2, #0
    6e98:	4698      	mov	r8, r3
    6e9a:	e06b      	b.n	6f74 <__aeabi_ddiv+0x19c>
    6e9c:	0003      	movs	r3, r0
    6e9e:	4333      	orrs	r3, r6
    6ea0:	4699      	mov	r9, r3
    6ea2:	d04e      	beq.n	6f42 <__aeabi_ddiv+0x16a>
    6ea4:	2e00      	cmp	r6, #0
    6ea6:	d100      	bne.n	6eaa <__aeabi_ddiv+0xd2>
    6ea8:	e1bc      	b.n	7224 <__aeabi_ddiv+0x44c>
    6eaa:	0030      	movs	r0, r6
    6eac:	f001 f8ca 	bl	8044 <__clzsi2>
    6eb0:	0003      	movs	r3, r0
    6eb2:	3b0b      	subs	r3, #11
    6eb4:	2b1c      	cmp	r3, #28
    6eb6:	dd00      	ble.n	6eba <__aeabi_ddiv+0xe2>
    6eb8:	e1ac      	b.n	7214 <__aeabi_ddiv+0x43c>
    6eba:	221d      	movs	r2, #29
    6ebc:	1ad3      	subs	r3, r2, r3
    6ebe:	465a      	mov	r2, fp
    6ec0:	0001      	movs	r1, r0
    6ec2:	40da      	lsrs	r2, r3
    6ec4:	3908      	subs	r1, #8
    6ec6:	408e      	lsls	r6, r1
    6ec8:	0013      	movs	r3, r2
    6eca:	4333      	orrs	r3, r6
    6ecc:	4699      	mov	r9, r3
    6ece:	465b      	mov	r3, fp
    6ed0:	408b      	lsls	r3, r1
    6ed2:	4698      	mov	r8, r3
    6ed4:	2300      	movs	r3, #0
    6ed6:	4c3c      	ldr	r4, [pc, #240]	; (6fc8 <__aeabi_ddiv+0x1f0>)
    6ed8:	2600      	movs	r6, #0
    6eda:	1a24      	subs	r4, r4, r0
    6edc:	9303      	str	r3, [sp, #12]
    6ede:	e79f      	b.n	6e20 <__aeabi_ddiv+0x48>
    6ee0:	4651      	mov	r1, sl
    6ee2:	465a      	mov	r2, fp
    6ee4:	4311      	orrs	r1, r2
    6ee6:	d129      	bne.n	6f3c <__aeabi_ddiv+0x164>
    6ee8:	2200      	movs	r2, #0
    6eea:	4693      	mov	fp, r2
    6eec:	3202      	adds	r2, #2
    6eee:	e7b1      	b.n	6e54 <__aeabi_ddiv+0x7c>
    6ef0:	4659      	mov	r1, fp
    6ef2:	4301      	orrs	r1, r0
    6ef4:	d01e      	beq.n	6f34 <__aeabi_ddiv+0x15c>
    6ef6:	465b      	mov	r3, fp
    6ef8:	2b00      	cmp	r3, #0
    6efa:	d100      	bne.n	6efe <__aeabi_ddiv+0x126>
    6efc:	e19e      	b.n	723c <__aeabi_ddiv+0x464>
    6efe:	4658      	mov	r0, fp
    6f00:	f001 f8a0 	bl	8044 <__clzsi2>
    6f04:	0003      	movs	r3, r0
    6f06:	3b0b      	subs	r3, #11
    6f08:	2b1c      	cmp	r3, #28
    6f0a:	dd00      	ble.n	6f0e <__aeabi_ddiv+0x136>
    6f0c:	e18f      	b.n	722e <__aeabi_ddiv+0x456>
    6f0e:	0002      	movs	r2, r0
    6f10:	4659      	mov	r1, fp
    6f12:	3a08      	subs	r2, #8
    6f14:	4091      	lsls	r1, r2
    6f16:	468b      	mov	fp, r1
    6f18:	211d      	movs	r1, #29
    6f1a:	1acb      	subs	r3, r1, r3
    6f1c:	4651      	mov	r1, sl
    6f1e:	40d9      	lsrs	r1, r3
    6f20:	000b      	movs	r3, r1
    6f22:	4659      	mov	r1, fp
    6f24:	430b      	orrs	r3, r1
    6f26:	4651      	mov	r1, sl
    6f28:	469b      	mov	fp, r3
    6f2a:	4091      	lsls	r1, r2
    6f2c:	4b26      	ldr	r3, [pc, #152]	; (6fc8 <__aeabi_ddiv+0x1f0>)
    6f2e:	2200      	movs	r2, #0
    6f30:	1a1b      	subs	r3, r3, r0
    6f32:	e78f      	b.n	6e54 <__aeabi_ddiv+0x7c>
    6f34:	2300      	movs	r3, #0
    6f36:	2201      	movs	r2, #1
    6f38:	469b      	mov	fp, r3
    6f3a:	e78b      	b.n	6e54 <__aeabi_ddiv+0x7c>
    6f3c:	4651      	mov	r1, sl
    6f3e:	2203      	movs	r2, #3
    6f40:	e788      	b.n	6e54 <__aeabi_ddiv+0x7c>
    6f42:	2300      	movs	r3, #0
    6f44:	4698      	mov	r8, r3
    6f46:	3301      	adds	r3, #1
    6f48:	2604      	movs	r6, #4
    6f4a:	2400      	movs	r4, #0
    6f4c:	9303      	str	r3, [sp, #12]
    6f4e:	e767      	b.n	6e20 <__aeabi_ddiv+0x48>
    6f50:	2303      	movs	r3, #3
    6f52:	46b1      	mov	r9, r6
    6f54:	9303      	str	r3, [sp, #12]
    6f56:	260c      	movs	r6, #12
    6f58:	e762      	b.n	6e20 <__aeabi_ddiv+0x48>
    6f5a:	2a03      	cmp	r2, #3
    6f5c:	d100      	bne.n	6f60 <__aeabi_ddiv+0x188>
    6f5e:	e25c      	b.n	741a <__aeabi_ddiv+0x642>
    6f60:	9b01      	ldr	r3, [sp, #4]
    6f62:	2a01      	cmp	r2, #1
    6f64:	d000      	beq.n	6f68 <__aeabi_ddiv+0x190>
    6f66:	e1e4      	b.n	7332 <__aeabi_ddiv+0x55a>
    6f68:	4013      	ands	r3, r2
    6f6a:	469c      	mov	ip, r3
    6f6c:	2300      	movs	r3, #0
    6f6e:	2400      	movs	r4, #0
    6f70:	2200      	movs	r2, #0
    6f72:	4698      	mov	r8, r3
    6f74:	2100      	movs	r1, #0
    6f76:	0312      	lsls	r2, r2, #12
    6f78:	0b13      	lsrs	r3, r2, #12
    6f7a:	0d0a      	lsrs	r2, r1, #20
    6f7c:	0512      	lsls	r2, r2, #20
    6f7e:	431a      	orrs	r2, r3
    6f80:	0523      	lsls	r3, r4, #20
    6f82:	4c12      	ldr	r4, [pc, #72]	; (6fcc <__aeabi_ddiv+0x1f4>)
    6f84:	4640      	mov	r0, r8
    6f86:	4022      	ands	r2, r4
    6f88:	4313      	orrs	r3, r2
    6f8a:	4662      	mov	r2, ip
    6f8c:	005b      	lsls	r3, r3, #1
    6f8e:	07d2      	lsls	r2, r2, #31
    6f90:	085b      	lsrs	r3, r3, #1
    6f92:	4313      	orrs	r3, r2
    6f94:	0019      	movs	r1, r3
    6f96:	b007      	add	sp, #28
    6f98:	bc3c      	pop	{r2, r3, r4, r5}
    6f9a:	4690      	mov	r8, r2
    6f9c:	4699      	mov	r9, r3
    6f9e:	46a2      	mov	sl, r4
    6fa0:	46ab      	mov	fp, r5
    6fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fa4:	2300      	movs	r3, #0
    6fa6:	2280      	movs	r2, #128	; 0x80
    6fa8:	469c      	mov	ip, r3
    6faa:	0312      	lsls	r2, r2, #12
    6fac:	4698      	mov	r8, r3
    6fae:	4c03      	ldr	r4, [pc, #12]	; (6fbc <__aeabi_ddiv+0x1e4>)
    6fb0:	e7e0      	b.n	6f74 <__aeabi_ddiv+0x19c>
    6fb2:	2300      	movs	r3, #0
    6fb4:	4c01      	ldr	r4, [pc, #4]	; (6fbc <__aeabi_ddiv+0x1e4>)
    6fb6:	2200      	movs	r2, #0
    6fb8:	4698      	mov	r8, r3
    6fba:	e7db      	b.n	6f74 <__aeabi_ddiv+0x19c>
    6fbc:	000007ff 	.word	0x000007ff
    6fc0:	fffffc01 	.word	0xfffffc01
    6fc4:	0000a108 	.word	0x0000a108
    6fc8:	fffffc0d 	.word	0xfffffc0d
    6fcc:	800fffff 	.word	0x800fffff
    6fd0:	45d9      	cmp	r9, fp
    6fd2:	d900      	bls.n	6fd6 <__aeabi_ddiv+0x1fe>
    6fd4:	e139      	b.n	724a <__aeabi_ddiv+0x472>
    6fd6:	d100      	bne.n	6fda <__aeabi_ddiv+0x202>
    6fd8:	e134      	b.n	7244 <__aeabi_ddiv+0x46c>
    6fda:	2300      	movs	r3, #0
    6fdc:	4646      	mov	r6, r8
    6fde:	464d      	mov	r5, r9
    6fe0:	469a      	mov	sl, r3
    6fe2:	3c01      	subs	r4, #1
    6fe4:	465b      	mov	r3, fp
    6fe6:	0e0a      	lsrs	r2, r1, #24
    6fe8:	021b      	lsls	r3, r3, #8
    6fea:	431a      	orrs	r2, r3
    6fec:	020b      	lsls	r3, r1, #8
    6fee:	0c17      	lsrs	r7, r2, #16
    6ff0:	9303      	str	r3, [sp, #12]
    6ff2:	0413      	lsls	r3, r2, #16
    6ff4:	0c1b      	lsrs	r3, r3, #16
    6ff6:	0039      	movs	r1, r7
    6ff8:	0028      	movs	r0, r5
    6ffa:	4690      	mov	r8, r2
    6ffc:	9301      	str	r3, [sp, #4]
    6ffe:	f7ff fa3b 	bl	6478 <__udivsi3>
    7002:	0002      	movs	r2, r0
    7004:	9b01      	ldr	r3, [sp, #4]
    7006:	4683      	mov	fp, r0
    7008:	435a      	muls	r2, r3
    700a:	0028      	movs	r0, r5
    700c:	0039      	movs	r1, r7
    700e:	4691      	mov	r9, r2
    7010:	f7ff fab8 	bl	6584 <__aeabi_uidivmod>
    7014:	0c35      	lsrs	r5, r6, #16
    7016:	0409      	lsls	r1, r1, #16
    7018:	430d      	orrs	r5, r1
    701a:	45a9      	cmp	r9, r5
    701c:	d90d      	bls.n	703a <__aeabi_ddiv+0x262>
    701e:	465b      	mov	r3, fp
    7020:	4445      	add	r5, r8
    7022:	3b01      	subs	r3, #1
    7024:	45a8      	cmp	r8, r5
    7026:	d900      	bls.n	702a <__aeabi_ddiv+0x252>
    7028:	e13a      	b.n	72a0 <__aeabi_ddiv+0x4c8>
    702a:	45a9      	cmp	r9, r5
    702c:	d800      	bhi.n	7030 <__aeabi_ddiv+0x258>
    702e:	e137      	b.n	72a0 <__aeabi_ddiv+0x4c8>
    7030:	2302      	movs	r3, #2
    7032:	425b      	negs	r3, r3
    7034:	469c      	mov	ip, r3
    7036:	4445      	add	r5, r8
    7038:	44e3      	add	fp, ip
    703a:	464b      	mov	r3, r9
    703c:	1aeb      	subs	r3, r5, r3
    703e:	0039      	movs	r1, r7
    7040:	0018      	movs	r0, r3
    7042:	9304      	str	r3, [sp, #16]
    7044:	f7ff fa18 	bl	6478 <__udivsi3>
    7048:	9b01      	ldr	r3, [sp, #4]
    704a:	0005      	movs	r5, r0
    704c:	4343      	muls	r3, r0
    704e:	0039      	movs	r1, r7
    7050:	9804      	ldr	r0, [sp, #16]
    7052:	4699      	mov	r9, r3
    7054:	f7ff fa96 	bl	6584 <__aeabi_uidivmod>
    7058:	0433      	lsls	r3, r6, #16
    705a:	0409      	lsls	r1, r1, #16
    705c:	0c1b      	lsrs	r3, r3, #16
    705e:	430b      	orrs	r3, r1
    7060:	4599      	cmp	r9, r3
    7062:	d909      	bls.n	7078 <__aeabi_ddiv+0x2a0>
    7064:	4443      	add	r3, r8
    7066:	1e6a      	subs	r2, r5, #1
    7068:	4598      	cmp	r8, r3
    706a:	d900      	bls.n	706e <__aeabi_ddiv+0x296>
    706c:	e11a      	b.n	72a4 <__aeabi_ddiv+0x4cc>
    706e:	4599      	cmp	r9, r3
    7070:	d800      	bhi.n	7074 <__aeabi_ddiv+0x29c>
    7072:	e117      	b.n	72a4 <__aeabi_ddiv+0x4cc>
    7074:	3d02      	subs	r5, #2
    7076:	4443      	add	r3, r8
    7078:	464a      	mov	r2, r9
    707a:	1a9b      	subs	r3, r3, r2
    707c:	465a      	mov	r2, fp
    707e:	0412      	lsls	r2, r2, #16
    7080:	432a      	orrs	r2, r5
    7082:	9903      	ldr	r1, [sp, #12]
    7084:	4693      	mov	fp, r2
    7086:	0c10      	lsrs	r0, r2, #16
    7088:	0c0a      	lsrs	r2, r1, #16
    708a:	4691      	mov	r9, r2
    708c:	0409      	lsls	r1, r1, #16
    708e:	465a      	mov	r2, fp
    7090:	0c09      	lsrs	r1, r1, #16
    7092:	464e      	mov	r6, r9
    7094:	000d      	movs	r5, r1
    7096:	0412      	lsls	r2, r2, #16
    7098:	0c12      	lsrs	r2, r2, #16
    709a:	4345      	muls	r5, r0
    709c:	9105      	str	r1, [sp, #20]
    709e:	4351      	muls	r1, r2
    70a0:	4372      	muls	r2, r6
    70a2:	4370      	muls	r0, r6
    70a4:	1952      	adds	r2, r2, r5
    70a6:	0c0e      	lsrs	r6, r1, #16
    70a8:	18b2      	adds	r2, r6, r2
    70aa:	4295      	cmp	r5, r2
    70ac:	d903      	bls.n	70b6 <__aeabi_ddiv+0x2de>
    70ae:	2580      	movs	r5, #128	; 0x80
    70b0:	026d      	lsls	r5, r5, #9
    70b2:	46ac      	mov	ip, r5
    70b4:	4460      	add	r0, ip
    70b6:	0c15      	lsrs	r5, r2, #16
    70b8:	0409      	lsls	r1, r1, #16
    70ba:	0412      	lsls	r2, r2, #16
    70bc:	0c09      	lsrs	r1, r1, #16
    70be:	1828      	adds	r0, r5, r0
    70c0:	1852      	adds	r2, r2, r1
    70c2:	4283      	cmp	r3, r0
    70c4:	d200      	bcs.n	70c8 <__aeabi_ddiv+0x2f0>
    70c6:	e0ce      	b.n	7266 <__aeabi_ddiv+0x48e>
    70c8:	d100      	bne.n	70cc <__aeabi_ddiv+0x2f4>
    70ca:	e0c8      	b.n	725e <__aeabi_ddiv+0x486>
    70cc:	1a1d      	subs	r5, r3, r0
    70ce:	4653      	mov	r3, sl
    70d0:	1a9e      	subs	r6, r3, r2
    70d2:	45b2      	cmp	sl, r6
    70d4:	4192      	sbcs	r2, r2
    70d6:	4252      	negs	r2, r2
    70d8:	1aab      	subs	r3, r5, r2
    70da:	469a      	mov	sl, r3
    70dc:	4598      	cmp	r8, r3
    70de:	d100      	bne.n	70e2 <__aeabi_ddiv+0x30a>
    70e0:	e117      	b.n	7312 <__aeabi_ddiv+0x53a>
    70e2:	0039      	movs	r1, r7
    70e4:	0018      	movs	r0, r3
    70e6:	f7ff f9c7 	bl	6478 <__udivsi3>
    70ea:	9b01      	ldr	r3, [sp, #4]
    70ec:	0005      	movs	r5, r0
    70ee:	4343      	muls	r3, r0
    70f0:	0039      	movs	r1, r7
    70f2:	4650      	mov	r0, sl
    70f4:	9304      	str	r3, [sp, #16]
    70f6:	f7ff fa45 	bl	6584 <__aeabi_uidivmod>
    70fa:	9804      	ldr	r0, [sp, #16]
    70fc:	040b      	lsls	r3, r1, #16
    70fe:	0c31      	lsrs	r1, r6, #16
    7100:	4319      	orrs	r1, r3
    7102:	4288      	cmp	r0, r1
    7104:	d909      	bls.n	711a <__aeabi_ddiv+0x342>
    7106:	4441      	add	r1, r8
    7108:	1e6b      	subs	r3, r5, #1
    710a:	4588      	cmp	r8, r1
    710c:	d900      	bls.n	7110 <__aeabi_ddiv+0x338>
    710e:	e107      	b.n	7320 <__aeabi_ddiv+0x548>
    7110:	4288      	cmp	r0, r1
    7112:	d800      	bhi.n	7116 <__aeabi_ddiv+0x33e>
    7114:	e104      	b.n	7320 <__aeabi_ddiv+0x548>
    7116:	3d02      	subs	r5, #2
    7118:	4441      	add	r1, r8
    711a:	9b04      	ldr	r3, [sp, #16]
    711c:	1acb      	subs	r3, r1, r3
    711e:	0018      	movs	r0, r3
    7120:	0039      	movs	r1, r7
    7122:	9304      	str	r3, [sp, #16]
    7124:	f7ff f9a8 	bl	6478 <__udivsi3>
    7128:	9b01      	ldr	r3, [sp, #4]
    712a:	4682      	mov	sl, r0
    712c:	4343      	muls	r3, r0
    712e:	0039      	movs	r1, r7
    7130:	9804      	ldr	r0, [sp, #16]
    7132:	9301      	str	r3, [sp, #4]
    7134:	f7ff fa26 	bl	6584 <__aeabi_uidivmod>
    7138:	9801      	ldr	r0, [sp, #4]
    713a:	040b      	lsls	r3, r1, #16
    713c:	0431      	lsls	r1, r6, #16
    713e:	0c09      	lsrs	r1, r1, #16
    7140:	4319      	orrs	r1, r3
    7142:	4288      	cmp	r0, r1
    7144:	d90d      	bls.n	7162 <__aeabi_ddiv+0x38a>
    7146:	4653      	mov	r3, sl
    7148:	4441      	add	r1, r8
    714a:	3b01      	subs	r3, #1
    714c:	4588      	cmp	r8, r1
    714e:	d900      	bls.n	7152 <__aeabi_ddiv+0x37a>
    7150:	e0e8      	b.n	7324 <__aeabi_ddiv+0x54c>
    7152:	4288      	cmp	r0, r1
    7154:	d800      	bhi.n	7158 <__aeabi_ddiv+0x380>
    7156:	e0e5      	b.n	7324 <__aeabi_ddiv+0x54c>
    7158:	2302      	movs	r3, #2
    715a:	425b      	negs	r3, r3
    715c:	469c      	mov	ip, r3
    715e:	4441      	add	r1, r8
    7160:	44e2      	add	sl, ip
    7162:	9b01      	ldr	r3, [sp, #4]
    7164:	042d      	lsls	r5, r5, #16
    7166:	1ace      	subs	r6, r1, r3
    7168:	4651      	mov	r1, sl
    716a:	4329      	orrs	r1, r5
    716c:	9d05      	ldr	r5, [sp, #20]
    716e:	464f      	mov	r7, r9
    7170:	002a      	movs	r2, r5
    7172:	040b      	lsls	r3, r1, #16
    7174:	0c08      	lsrs	r0, r1, #16
    7176:	0c1b      	lsrs	r3, r3, #16
    7178:	435a      	muls	r2, r3
    717a:	4345      	muls	r5, r0
    717c:	437b      	muls	r3, r7
    717e:	4378      	muls	r0, r7
    7180:	195b      	adds	r3, r3, r5
    7182:	0c17      	lsrs	r7, r2, #16
    7184:	18fb      	adds	r3, r7, r3
    7186:	429d      	cmp	r5, r3
    7188:	d903      	bls.n	7192 <__aeabi_ddiv+0x3ba>
    718a:	2580      	movs	r5, #128	; 0x80
    718c:	026d      	lsls	r5, r5, #9
    718e:	46ac      	mov	ip, r5
    7190:	4460      	add	r0, ip
    7192:	0c1d      	lsrs	r5, r3, #16
    7194:	0412      	lsls	r2, r2, #16
    7196:	041b      	lsls	r3, r3, #16
    7198:	0c12      	lsrs	r2, r2, #16
    719a:	1828      	adds	r0, r5, r0
    719c:	189b      	adds	r3, r3, r2
    719e:	4286      	cmp	r6, r0
    71a0:	d200      	bcs.n	71a4 <__aeabi_ddiv+0x3cc>
    71a2:	e093      	b.n	72cc <__aeabi_ddiv+0x4f4>
    71a4:	d100      	bne.n	71a8 <__aeabi_ddiv+0x3d0>
    71a6:	e08e      	b.n	72c6 <__aeabi_ddiv+0x4ee>
    71a8:	2301      	movs	r3, #1
    71aa:	4319      	orrs	r1, r3
    71ac:	4ba0      	ldr	r3, [pc, #640]	; (7430 <__aeabi_ddiv+0x658>)
    71ae:	18e3      	adds	r3, r4, r3
    71b0:	2b00      	cmp	r3, #0
    71b2:	dc00      	bgt.n	71b6 <__aeabi_ddiv+0x3de>
    71b4:	e099      	b.n	72ea <__aeabi_ddiv+0x512>
    71b6:	074a      	lsls	r2, r1, #29
    71b8:	d000      	beq.n	71bc <__aeabi_ddiv+0x3e4>
    71ba:	e09e      	b.n	72fa <__aeabi_ddiv+0x522>
    71bc:	465a      	mov	r2, fp
    71be:	01d2      	lsls	r2, r2, #7
    71c0:	d506      	bpl.n	71d0 <__aeabi_ddiv+0x3f8>
    71c2:	465a      	mov	r2, fp
    71c4:	4b9b      	ldr	r3, [pc, #620]	; (7434 <__aeabi_ddiv+0x65c>)
    71c6:	401a      	ands	r2, r3
    71c8:	2380      	movs	r3, #128	; 0x80
    71ca:	4693      	mov	fp, r2
    71cc:	00db      	lsls	r3, r3, #3
    71ce:	18e3      	adds	r3, r4, r3
    71d0:	4a99      	ldr	r2, [pc, #612]	; (7438 <__aeabi_ddiv+0x660>)
    71d2:	4293      	cmp	r3, r2
    71d4:	dd68      	ble.n	72a8 <__aeabi_ddiv+0x4d0>
    71d6:	2301      	movs	r3, #1
    71d8:	9a02      	ldr	r2, [sp, #8]
    71da:	4c98      	ldr	r4, [pc, #608]	; (743c <__aeabi_ddiv+0x664>)
    71dc:	401a      	ands	r2, r3
    71de:	2300      	movs	r3, #0
    71e0:	4694      	mov	ip, r2
    71e2:	4698      	mov	r8, r3
    71e4:	2200      	movs	r2, #0
    71e6:	e6c5      	b.n	6f74 <__aeabi_ddiv+0x19c>
    71e8:	2280      	movs	r2, #128	; 0x80
    71ea:	464b      	mov	r3, r9
    71ec:	0312      	lsls	r2, r2, #12
    71ee:	4213      	tst	r3, r2
    71f0:	d00a      	beq.n	7208 <__aeabi_ddiv+0x430>
    71f2:	465b      	mov	r3, fp
    71f4:	4213      	tst	r3, r2
    71f6:	d106      	bne.n	7206 <__aeabi_ddiv+0x42e>
    71f8:	431a      	orrs	r2, r3
    71fa:	0312      	lsls	r2, r2, #12
    71fc:	0b12      	lsrs	r2, r2, #12
    71fe:	46ac      	mov	ip, r5
    7200:	4688      	mov	r8, r1
    7202:	4c8e      	ldr	r4, [pc, #568]	; (743c <__aeabi_ddiv+0x664>)
    7204:	e6b6      	b.n	6f74 <__aeabi_ddiv+0x19c>
    7206:	464b      	mov	r3, r9
    7208:	431a      	orrs	r2, r3
    720a:	0312      	lsls	r2, r2, #12
    720c:	0b12      	lsrs	r2, r2, #12
    720e:	46bc      	mov	ip, r7
    7210:	4c8a      	ldr	r4, [pc, #552]	; (743c <__aeabi_ddiv+0x664>)
    7212:	e6af      	b.n	6f74 <__aeabi_ddiv+0x19c>
    7214:	0003      	movs	r3, r0
    7216:	465a      	mov	r2, fp
    7218:	3b28      	subs	r3, #40	; 0x28
    721a:	409a      	lsls	r2, r3
    721c:	2300      	movs	r3, #0
    721e:	4691      	mov	r9, r2
    7220:	4698      	mov	r8, r3
    7222:	e657      	b.n	6ed4 <__aeabi_ddiv+0xfc>
    7224:	4658      	mov	r0, fp
    7226:	f000 ff0d 	bl	8044 <__clzsi2>
    722a:	3020      	adds	r0, #32
    722c:	e640      	b.n	6eb0 <__aeabi_ddiv+0xd8>
    722e:	0003      	movs	r3, r0
    7230:	4652      	mov	r2, sl
    7232:	3b28      	subs	r3, #40	; 0x28
    7234:	409a      	lsls	r2, r3
    7236:	2100      	movs	r1, #0
    7238:	4693      	mov	fp, r2
    723a:	e677      	b.n	6f2c <__aeabi_ddiv+0x154>
    723c:	f000 ff02 	bl	8044 <__clzsi2>
    7240:	3020      	adds	r0, #32
    7242:	e65f      	b.n	6f04 <__aeabi_ddiv+0x12c>
    7244:	4588      	cmp	r8, r1
    7246:	d200      	bcs.n	724a <__aeabi_ddiv+0x472>
    7248:	e6c7      	b.n	6fda <__aeabi_ddiv+0x202>
    724a:	464b      	mov	r3, r9
    724c:	07de      	lsls	r6, r3, #31
    724e:	085d      	lsrs	r5, r3, #1
    7250:	4643      	mov	r3, r8
    7252:	085b      	lsrs	r3, r3, #1
    7254:	431e      	orrs	r6, r3
    7256:	4643      	mov	r3, r8
    7258:	07db      	lsls	r3, r3, #31
    725a:	469a      	mov	sl, r3
    725c:	e6c2      	b.n	6fe4 <__aeabi_ddiv+0x20c>
    725e:	2500      	movs	r5, #0
    7260:	4592      	cmp	sl, r2
    7262:	d300      	bcc.n	7266 <__aeabi_ddiv+0x48e>
    7264:	e733      	b.n	70ce <__aeabi_ddiv+0x2f6>
    7266:	9e03      	ldr	r6, [sp, #12]
    7268:	4659      	mov	r1, fp
    726a:	46b4      	mov	ip, r6
    726c:	44e2      	add	sl, ip
    726e:	45b2      	cmp	sl, r6
    7270:	41ad      	sbcs	r5, r5
    7272:	426d      	negs	r5, r5
    7274:	4445      	add	r5, r8
    7276:	18eb      	adds	r3, r5, r3
    7278:	3901      	subs	r1, #1
    727a:	4598      	cmp	r8, r3
    727c:	d207      	bcs.n	728e <__aeabi_ddiv+0x4b6>
    727e:	4298      	cmp	r0, r3
    7280:	d900      	bls.n	7284 <__aeabi_ddiv+0x4ac>
    7282:	e07f      	b.n	7384 <__aeabi_ddiv+0x5ac>
    7284:	d100      	bne.n	7288 <__aeabi_ddiv+0x4b0>
    7286:	e0bc      	b.n	7402 <__aeabi_ddiv+0x62a>
    7288:	1a1d      	subs	r5, r3, r0
    728a:	468b      	mov	fp, r1
    728c:	e71f      	b.n	70ce <__aeabi_ddiv+0x2f6>
    728e:	4598      	cmp	r8, r3
    7290:	d1fa      	bne.n	7288 <__aeabi_ddiv+0x4b0>
    7292:	9d03      	ldr	r5, [sp, #12]
    7294:	4555      	cmp	r5, sl
    7296:	d9f2      	bls.n	727e <__aeabi_ddiv+0x4a6>
    7298:	4643      	mov	r3, r8
    729a:	468b      	mov	fp, r1
    729c:	1a1d      	subs	r5, r3, r0
    729e:	e716      	b.n	70ce <__aeabi_ddiv+0x2f6>
    72a0:	469b      	mov	fp, r3
    72a2:	e6ca      	b.n	703a <__aeabi_ddiv+0x262>
    72a4:	0015      	movs	r5, r2
    72a6:	e6e7      	b.n	7078 <__aeabi_ddiv+0x2a0>
    72a8:	465a      	mov	r2, fp
    72aa:	08c9      	lsrs	r1, r1, #3
    72ac:	0752      	lsls	r2, r2, #29
    72ae:	430a      	orrs	r2, r1
    72b0:	055b      	lsls	r3, r3, #21
    72b2:	4690      	mov	r8, r2
    72b4:	0d5c      	lsrs	r4, r3, #21
    72b6:	465a      	mov	r2, fp
    72b8:	2301      	movs	r3, #1
    72ba:	9902      	ldr	r1, [sp, #8]
    72bc:	0252      	lsls	r2, r2, #9
    72be:	4019      	ands	r1, r3
    72c0:	0b12      	lsrs	r2, r2, #12
    72c2:	468c      	mov	ip, r1
    72c4:	e656      	b.n	6f74 <__aeabi_ddiv+0x19c>
    72c6:	2b00      	cmp	r3, #0
    72c8:	d100      	bne.n	72cc <__aeabi_ddiv+0x4f4>
    72ca:	e76f      	b.n	71ac <__aeabi_ddiv+0x3d4>
    72cc:	4446      	add	r6, r8
    72ce:	1e4a      	subs	r2, r1, #1
    72d0:	45b0      	cmp	r8, r6
    72d2:	d929      	bls.n	7328 <__aeabi_ddiv+0x550>
    72d4:	0011      	movs	r1, r2
    72d6:	4286      	cmp	r6, r0
    72d8:	d000      	beq.n	72dc <__aeabi_ddiv+0x504>
    72da:	e765      	b.n	71a8 <__aeabi_ddiv+0x3d0>
    72dc:	9a03      	ldr	r2, [sp, #12]
    72de:	4293      	cmp	r3, r2
    72e0:	d000      	beq.n	72e4 <__aeabi_ddiv+0x50c>
    72e2:	e761      	b.n	71a8 <__aeabi_ddiv+0x3d0>
    72e4:	e762      	b.n	71ac <__aeabi_ddiv+0x3d4>
    72e6:	2101      	movs	r1, #1
    72e8:	4249      	negs	r1, r1
    72ea:	2001      	movs	r0, #1
    72ec:	1ac2      	subs	r2, r0, r3
    72ee:	2a38      	cmp	r2, #56	; 0x38
    72f0:	dd21      	ble.n	7336 <__aeabi_ddiv+0x55e>
    72f2:	9b02      	ldr	r3, [sp, #8]
    72f4:	4003      	ands	r3, r0
    72f6:	469c      	mov	ip, r3
    72f8:	e638      	b.n	6f6c <__aeabi_ddiv+0x194>
    72fa:	220f      	movs	r2, #15
    72fc:	400a      	ands	r2, r1
    72fe:	2a04      	cmp	r2, #4
    7300:	d100      	bne.n	7304 <__aeabi_ddiv+0x52c>
    7302:	e75b      	b.n	71bc <__aeabi_ddiv+0x3e4>
    7304:	000a      	movs	r2, r1
    7306:	1d11      	adds	r1, r2, #4
    7308:	4291      	cmp	r1, r2
    730a:	4192      	sbcs	r2, r2
    730c:	4252      	negs	r2, r2
    730e:	4493      	add	fp, r2
    7310:	e754      	b.n	71bc <__aeabi_ddiv+0x3e4>
    7312:	4b47      	ldr	r3, [pc, #284]	; (7430 <__aeabi_ddiv+0x658>)
    7314:	18e3      	adds	r3, r4, r3
    7316:	2b00      	cmp	r3, #0
    7318:	dde5      	ble.n	72e6 <__aeabi_ddiv+0x50e>
    731a:	2201      	movs	r2, #1
    731c:	4252      	negs	r2, r2
    731e:	e7f2      	b.n	7306 <__aeabi_ddiv+0x52e>
    7320:	001d      	movs	r5, r3
    7322:	e6fa      	b.n	711a <__aeabi_ddiv+0x342>
    7324:	469a      	mov	sl, r3
    7326:	e71c      	b.n	7162 <__aeabi_ddiv+0x38a>
    7328:	42b0      	cmp	r0, r6
    732a:	d839      	bhi.n	73a0 <__aeabi_ddiv+0x5c8>
    732c:	d06e      	beq.n	740c <__aeabi_ddiv+0x634>
    732e:	0011      	movs	r1, r2
    7330:	e73a      	b.n	71a8 <__aeabi_ddiv+0x3d0>
    7332:	9302      	str	r3, [sp, #8]
    7334:	e73a      	b.n	71ac <__aeabi_ddiv+0x3d4>
    7336:	2a1f      	cmp	r2, #31
    7338:	dc3c      	bgt.n	73b4 <__aeabi_ddiv+0x5dc>
    733a:	2320      	movs	r3, #32
    733c:	1a9b      	subs	r3, r3, r2
    733e:	000c      	movs	r4, r1
    7340:	4658      	mov	r0, fp
    7342:	4099      	lsls	r1, r3
    7344:	4098      	lsls	r0, r3
    7346:	1e4b      	subs	r3, r1, #1
    7348:	4199      	sbcs	r1, r3
    734a:	465b      	mov	r3, fp
    734c:	40d4      	lsrs	r4, r2
    734e:	40d3      	lsrs	r3, r2
    7350:	4320      	orrs	r0, r4
    7352:	4308      	orrs	r0, r1
    7354:	001a      	movs	r2, r3
    7356:	0743      	lsls	r3, r0, #29
    7358:	d009      	beq.n	736e <__aeabi_ddiv+0x596>
    735a:	230f      	movs	r3, #15
    735c:	4003      	ands	r3, r0
    735e:	2b04      	cmp	r3, #4
    7360:	d005      	beq.n	736e <__aeabi_ddiv+0x596>
    7362:	0001      	movs	r1, r0
    7364:	1d08      	adds	r0, r1, #4
    7366:	4288      	cmp	r0, r1
    7368:	419b      	sbcs	r3, r3
    736a:	425b      	negs	r3, r3
    736c:	18d2      	adds	r2, r2, r3
    736e:	0213      	lsls	r3, r2, #8
    7370:	d53a      	bpl.n	73e8 <__aeabi_ddiv+0x610>
    7372:	2301      	movs	r3, #1
    7374:	9a02      	ldr	r2, [sp, #8]
    7376:	2401      	movs	r4, #1
    7378:	401a      	ands	r2, r3
    737a:	2300      	movs	r3, #0
    737c:	4694      	mov	ip, r2
    737e:	4698      	mov	r8, r3
    7380:	2200      	movs	r2, #0
    7382:	e5f7      	b.n	6f74 <__aeabi_ddiv+0x19c>
    7384:	2102      	movs	r1, #2
    7386:	4249      	negs	r1, r1
    7388:	468c      	mov	ip, r1
    738a:	9d03      	ldr	r5, [sp, #12]
    738c:	44e3      	add	fp, ip
    738e:	46ac      	mov	ip, r5
    7390:	44e2      	add	sl, ip
    7392:	45aa      	cmp	sl, r5
    7394:	41ad      	sbcs	r5, r5
    7396:	426d      	negs	r5, r5
    7398:	4445      	add	r5, r8
    739a:	18ed      	adds	r5, r5, r3
    739c:	1a2d      	subs	r5, r5, r0
    739e:	e696      	b.n	70ce <__aeabi_ddiv+0x2f6>
    73a0:	1e8a      	subs	r2, r1, #2
    73a2:	9903      	ldr	r1, [sp, #12]
    73a4:	004d      	lsls	r5, r1, #1
    73a6:	428d      	cmp	r5, r1
    73a8:	4189      	sbcs	r1, r1
    73aa:	4249      	negs	r1, r1
    73ac:	4441      	add	r1, r8
    73ae:	1876      	adds	r6, r6, r1
    73b0:	9503      	str	r5, [sp, #12]
    73b2:	e78f      	b.n	72d4 <__aeabi_ddiv+0x4fc>
    73b4:	201f      	movs	r0, #31
    73b6:	4240      	negs	r0, r0
    73b8:	1ac3      	subs	r3, r0, r3
    73ba:	4658      	mov	r0, fp
    73bc:	40d8      	lsrs	r0, r3
    73be:	0003      	movs	r3, r0
    73c0:	2a20      	cmp	r2, #32
    73c2:	d028      	beq.n	7416 <__aeabi_ddiv+0x63e>
    73c4:	2040      	movs	r0, #64	; 0x40
    73c6:	465d      	mov	r5, fp
    73c8:	1a82      	subs	r2, r0, r2
    73ca:	4095      	lsls	r5, r2
    73cc:	4329      	orrs	r1, r5
    73ce:	1e4a      	subs	r2, r1, #1
    73d0:	4191      	sbcs	r1, r2
    73d2:	4319      	orrs	r1, r3
    73d4:	2307      	movs	r3, #7
    73d6:	2200      	movs	r2, #0
    73d8:	400b      	ands	r3, r1
    73da:	d009      	beq.n	73f0 <__aeabi_ddiv+0x618>
    73dc:	230f      	movs	r3, #15
    73de:	2200      	movs	r2, #0
    73e0:	400b      	ands	r3, r1
    73e2:	0008      	movs	r0, r1
    73e4:	2b04      	cmp	r3, #4
    73e6:	d1bd      	bne.n	7364 <__aeabi_ddiv+0x58c>
    73e8:	0001      	movs	r1, r0
    73ea:	0753      	lsls	r3, r2, #29
    73ec:	0252      	lsls	r2, r2, #9
    73ee:	0b12      	lsrs	r2, r2, #12
    73f0:	08c9      	lsrs	r1, r1, #3
    73f2:	4319      	orrs	r1, r3
    73f4:	2301      	movs	r3, #1
    73f6:	4688      	mov	r8, r1
    73f8:	9902      	ldr	r1, [sp, #8]
    73fa:	2400      	movs	r4, #0
    73fc:	4019      	ands	r1, r3
    73fe:	468c      	mov	ip, r1
    7400:	e5b8      	b.n	6f74 <__aeabi_ddiv+0x19c>
    7402:	4552      	cmp	r2, sl
    7404:	d8be      	bhi.n	7384 <__aeabi_ddiv+0x5ac>
    7406:	468b      	mov	fp, r1
    7408:	2500      	movs	r5, #0
    740a:	e660      	b.n	70ce <__aeabi_ddiv+0x2f6>
    740c:	9d03      	ldr	r5, [sp, #12]
    740e:	429d      	cmp	r5, r3
    7410:	d3c6      	bcc.n	73a0 <__aeabi_ddiv+0x5c8>
    7412:	0011      	movs	r1, r2
    7414:	e762      	b.n	72dc <__aeabi_ddiv+0x504>
    7416:	2500      	movs	r5, #0
    7418:	e7d8      	b.n	73cc <__aeabi_ddiv+0x5f4>
    741a:	2280      	movs	r2, #128	; 0x80
    741c:	465b      	mov	r3, fp
    741e:	0312      	lsls	r2, r2, #12
    7420:	431a      	orrs	r2, r3
    7422:	9b01      	ldr	r3, [sp, #4]
    7424:	0312      	lsls	r2, r2, #12
    7426:	0b12      	lsrs	r2, r2, #12
    7428:	469c      	mov	ip, r3
    742a:	4688      	mov	r8, r1
    742c:	4c03      	ldr	r4, [pc, #12]	; (743c <__aeabi_ddiv+0x664>)
    742e:	e5a1      	b.n	6f74 <__aeabi_ddiv+0x19c>
    7430:	000003ff 	.word	0x000003ff
    7434:	feffffff 	.word	0xfeffffff
    7438:	000007fe 	.word	0x000007fe
    743c:	000007ff 	.word	0x000007ff

00007440 <__aeabi_dmul>:
    7440:	b5f0      	push	{r4, r5, r6, r7, lr}
    7442:	4657      	mov	r7, sl
    7444:	4645      	mov	r5, r8
    7446:	46de      	mov	lr, fp
    7448:	464e      	mov	r6, r9
    744a:	b5e0      	push	{r5, r6, r7, lr}
    744c:	030c      	lsls	r4, r1, #12
    744e:	4698      	mov	r8, r3
    7450:	004e      	lsls	r6, r1, #1
    7452:	0b23      	lsrs	r3, r4, #12
    7454:	b087      	sub	sp, #28
    7456:	0007      	movs	r7, r0
    7458:	4692      	mov	sl, r2
    745a:	469b      	mov	fp, r3
    745c:	0d76      	lsrs	r6, r6, #21
    745e:	0fcd      	lsrs	r5, r1, #31
    7460:	2e00      	cmp	r6, #0
    7462:	d06b      	beq.n	753c <__aeabi_dmul+0xfc>
    7464:	4b6d      	ldr	r3, [pc, #436]	; (761c <__aeabi_dmul+0x1dc>)
    7466:	429e      	cmp	r6, r3
    7468:	d035      	beq.n	74d6 <__aeabi_dmul+0x96>
    746a:	2480      	movs	r4, #128	; 0x80
    746c:	465b      	mov	r3, fp
    746e:	0f42      	lsrs	r2, r0, #29
    7470:	0424      	lsls	r4, r4, #16
    7472:	00db      	lsls	r3, r3, #3
    7474:	4314      	orrs	r4, r2
    7476:	431c      	orrs	r4, r3
    7478:	00c3      	lsls	r3, r0, #3
    747a:	4699      	mov	r9, r3
    747c:	4b68      	ldr	r3, [pc, #416]	; (7620 <__aeabi_dmul+0x1e0>)
    747e:	46a3      	mov	fp, r4
    7480:	469c      	mov	ip, r3
    7482:	2300      	movs	r3, #0
    7484:	2700      	movs	r7, #0
    7486:	4466      	add	r6, ip
    7488:	9302      	str	r3, [sp, #8]
    748a:	4643      	mov	r3, r8
    748c:	031c      	lsls	r4, r3, #12
    748e:	005a      	lsls	r2, r3, #1
    7490:	0fdb      	lsrs	r3, r3, #31
    7492:	4650      	mov	r0, sl
    7494:	0b24      	lsrs	r4, r4, #12
    7496:	0d52      	lsrs	r2, r2, #21
    7498:	4698      	mov	r8, r3
    749a:	d100      	bne.n	749e <__aeabi_dmul+0x5e>
    749c:	e076      	b.n	758c <__aeabi_dmul+0x14c>
    749e:	4b5f      	ldr	r3, [pc, #380]	; (761c <__aeabi_dmul+0x1dc>)
    74a0:	429a      	cmp	r2, r3
    74a2:	d06d      	beq.n	7580 <__aeabi_dmul+0x140>
    74a4:	2380      	movs	r3, #128	; 0x80
    74a6:	0f41      	lsrs	r1, r0, #29
    74a8:	041b      	lsls	r3, r3, #16
    74aa:	430b      	orrs	r3, r1
    74ac:	495c      	ldr	r1, [pc, #368]	; (7620 <__aeabi_dmul+0x1e0>)
    74ae:	00e4      	lsls	r4, r4, #3
    74b0:	468c      	mov	ip, r1
    74b2:	431c      	orrs	r4, r3
    74b4:	00c3      	lsls	r3, r0, #3
    74b6:	2000      	movs	r0, #0
    74b8:	4462      	add	r2, ip
    74ba:	4641      	mov	r1, r8
    74bc:	18b6      	adds	r6, r6, r2
    74be:	4069      	eors	r1, r5
    74c0:	1c72      	adds	r2, r6, #1
    74c2:	9101      	str	r1, [sp, #4]
    74c4:	4694      	mov	ip, r2
    74c6:	4307      	orrs	r7, r0
    74c8:	2f0f      	cmp	r7, #15
    74ca:	d900      	bls.n	74ce <__aeabi_dmul+0x8e>
    74cc:	e0b0      	b.n	7630 <__aeabi_dmul+0x1f0>
    74ce:	4a55      	ldr	r2, [pc, #340]	; (7624 <__aeabi_dmul+0x1e4>)
    74d0:	00bf      	lsls	r7, r7, #2
    74d2:	59d2      	ldr	r2, [r2, r7]
    74d4:	4697      	mov	pc, r2
    74d6:	465b      	mov	r3, fp
    74d8:	4303      	orrs	r3, r0
    74da:	4699      	mov	r9, r3
    74dc:	d000      	beq.n	74e0 <__aeabi_dmul+0xa0>
    74de:	e087      	b.n	75f0 <__aeabi_dmul+0x1b0>
    74e0:	2300      	movs	r3, #0
    74e2:	469b      	mov	fp, r3
    74e4:	3302      	adds	r3, #2
    74e6:	2708      	movs	r7, #8
    74e8:	9302      	str	r3, [sp, #8]
    74ea:	e7ce      	b.n	748a <__aeabi_dmul+0x4a>
    74ec:	4642      	mov	r2, r8
    74ee:	9201      	str	r2, [sp, #4]
    74f0:	2802      	cmp	r0, #2
    74f2:	d067      	beq.n	75c4 <__aeabi_dmul+0x184>
    74f4:	2803      	cmp	r0, #3
    74f6:	d100      	bne.n	74fa <__aeabi_dmul+0xba>
    74f8:	e20e      	b.n	7918 <__aeabi_dmul+0x4d8>
    74fa:	2801      	cmp	r0, #1
    74fc:	d000      	beq.n	7500 <__aeabi_dmul+0xc0>
    74fe:	e162      	b.n	77c6 <__aeabi_dmul+0x386>
    7500:	2300      	movs	r3, #0
    7502:	2400      	movs	r4, #0
    7504:	2200      	movs	r2, #0
    7506:	4699      	mov	r9, r3
    7508:	9901      	ldr	r1, [sp, #4]
    750a:	4001      	ands	r1, r0
    750c:	b2cd      	uxtb	r5, r1
    750e:	2100      	movs	r1, #0
    7510:	0312      	lsls	r2, r2, #12
    7512:	0d0b      	lsrs	r3, r1, #20
    7514:	0b12      	lsrs	r2, r2, #12
    7516:	051b      	lsls	r3, r3, #20
    7518:	4313      	orrs	r3, r2
    751a:	4a43      	ldr	r2, [pc, #268]	; (7628 <__aeabi_dmul+0x1e8>)
    751c:	0524      	lsls	r4, r4, #20
    751e:	4013      	ands	r3, r2
    7520:	431c      	orrs	r4, r3
    7522:	0064      	lsls	r4, r4, #1
    7524:	07ed      	lsls	r5, r5, #31
    7526:	0864      	lsrs	r4, r4, #1
    7528:	432c      	orrs	r4, r5
    752a:	4648      	mov	r0, r9
    752c:	0021      	movs	r1, r4
    752e:	b007      	add	sp, #28
    7530:	bc3c      	pop	{r2, r3, r4, r5}
    7532:	4690      	mov	r8, r2
    7534:	4699      	mov	r9, r3
    7536:	46a2      	mov	sl, r4
    7538:	46ab      	mov	fp, r5
    753a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    753c:	4303      	orrs	r3, r0
    753e:	4699      	mov	r9, r3
    7540:	d04f      	beq.n	75e2 <__aeabi_dmul+0x1a2>
    7542:	465b      	mov	r3, fp
    7544:	2b00      	cmp	r3, #0
    7546:	d100      	bne.n	754a <__aeabi_dmul+0x10a>
    7548:	e189      	b.n	785e <__aeabi_dmul+0x41e>
    754a:	4658      	mov	r0, fp
    754c:	f000 fd7a 	bl	8044 <__clzsi2>
    7550:	0003      	movs	r3, r0
    7552:	3b0b      	subs	r3, #11
    7554:	2b1c      	cmp	r3, #28
    7556:	dd00      	ble.n	755a <__aeabi_dmul+0x11a>
    7558:	e17a      	b.n	7850 <__aeabi_dmul+0x410>
    755a:	221d      	movs	r2, #29
    755c:	1ad3      	subs	r3, r2, r3
    755e:	003a      	movs	r2, r7
    7560:	0001      	movs	r1, r0
    7562:	465c      	mov	r4, fp
    7564:	40da      	lsrs	r2, r3
    7566:	3908      	subs	r1, #8
    7568:	408c      	lsls	r4, r1
    756a:	0013      	movs	r3, r2
    756c:	408f      	lsls	r7, r1
    756e:	4323      	orrs	r3, r4
    7570:	469b      	mov	fp, r3
    7572:	46b9      	mov	r9, r7
    7574:	2300      	movs	r3, #0
    7576:	4e2d      	ldr	r6, [pc, #180]	; (762c <__aeabi_dmul+0x1ec>)
    7578:	2700      	movs	r7, #0
    757a:	1a36      	subs	r6, r6, r0
    757c:	9302      	str	r3, [sp, #8]
    757e:	e784      	b.n	748a <__aeabi_dmul+0x4a>
    7580:	4653      	mov	r3, sl
    7582:	4323      	orrs	r3, r4
    7584:	d12a      	bne.n	75dc <__aeabi_dmul+0x19c>
    7586:	2400      	movs	r4, #0
    7588:	2002      	movs	r0, #2
    758a:	e796      	b.n	74ba <__aeabi_dmul+0x7a>
    758c:	4653      	mov	r3, sl
    758e:	4323      	orrs	r3, r4
    7590:	d020      	beq.n	75d4 <__aeabi_dmul+0x194>
    7592:	2c00      	cmp	r4, #0
    7594:	d100      	bne.n	7598 <__aeabi_dmul+0x158>
    7596:	e157      	b.n	7848 <__aeabi_dmul+0x408>
    7598:	0020      	movs	r0, r4
    759a:	f000 fd53 	bl	8044 <__clzsi2>
    759e:	0003      	movs	r3, r0
    75a0:	3b0b      	subs	r3, #11
    75a2:	2b1c      	cmp	r3, #28
    75a4:	dd00      	ble.n	75a8 <__aeabi_dmul+0x168>
    75a6:	e149      	b.n	783c <__aeabi_dmul+0x3fc>
    75a8:	211d      	movs	r1, #29
    75aa:	1acb      	subs	r3, r1, r3
    75ac:	4651      	mov	r1, sl
    75ae:	0002      	movs	r2, r0
    75b0:	40d9      	lsrs	r1, r3
    75b2:	4653      	mov	r3, sl
    75b4:	3a08      	subs	r2, #8
    75b6:	4094      	lsls	r4, r2
    75b8:	4093      	lsls	r3, r2
    75ba:	430c      	orrs	r4, r1
    75bc:	4a1b      	ldr	r2, [pc, #108]	; (762c <__aeabi_dmul+0x1ec>)
    75be:	1a12      	subs	r2, r2, r0
    75c0:	2000      	movs	r0, #0
    75c2:	e77a      	b.n	74ba <__aeabi_dmul+0x7a>
    75c4:	2501      	movs	r5, #1
    75c6:	9b01      	ldr	r3, [sp, #4]
    75c8:	4c14      	ldr	r4, [pc, #80]	; (761c <__aeabi_dmul+0x1dc>)
    75ca:	401d      	ands	r5, r3
    75cc:	2300      	movs	r3, #0
    75ce:	2200      	movs	r2, #0
    75d0:	4699      	mov	r9, r3
    75d2:	e79c      	b.n	750e <__aeabi_dmul+0xce>
    75d4:	2400      	movs	r4, #0
    75d6:	2200      	movs	r2, #0
    75d8:	2001      	movs	r0, #1
    75da:	e76e      	b.n	74ba <__aeabi_dmul+0x7a>
    75dc:	4653      	mov	r3, sl
    75de:	2003      	movs	r0, #3
    75e0:	e76b      	b.n	74ba <__aeabi_dmul+0x7a>
    75e2:	2300      	movs	r3, #0
    75e4:	469b      	mov	fp, r3
    75e6:	3301      	adds	r3, #1
    75e8:	2704      	movs	r7, #4
    75ea:	2600      	movs	r6, #0
    75ec:	9302      	str	r3, [sp, #8]
    75ee:	e74c      	b.n	748a <__aeabi_dmul+0x4a>
    75f0:	2303      	movs	r3, #3
    75f2:	4681      	mov	r9, r0
    75f4:	270c      	movs	r7, #12
    75f6:	9302      	str	r3, [sp, #8]
    75f8:	e747      	b.n	748a <__aeabi_dmul+0x4a>
    75fa:	2280      	movs	r2, #128	; 0x80
    75fc:	2300      	movs	r3, #0
    75fe:	2500      	movs	r5, #0
    7600:	0312      	lsls	r2, r2, #12
    7602:	4699      	mov	r9, r3
    7604:	4c05      	ldr	r4, [pc, #20]	; (761c <__aeabi_dmul+0x1dc>)
    7606:	e782      	b.n	750e <__aeabi_dmul+0xce>
    7608:	465c      	mov	r4, fp
    760a:	464b      	mov	r3, r9
    760c:	9802      	ldr	r0, [sp, #8]
    760e:	e76f      	b.n	74f0 <__aeabi_dmul+0xb0>
    7610:	465c      	mov	r4, fp
    7612:	464b      	mov	r3, r9
    7614:	9501      	str	r5, [sp, #4]
    7616:	9802      	ldr	r0, [sp, #8]
    7618:	e76a      	b.n	74f0 <__aeabi_dmul+0xb0>
    761a:	46c0      	nop			; (mov r8, r8)
    761c:	000007ff 	.word	0x000007ff
    7620:	fffffc01 	.word	0xfffffc01
    7624:	0000a148 	.word	0x0000a148
    7628:	800fffff 	.word	0x800fffff
    762c:	fffffc0d 	.word	0xfffffc0d
    7630:	464a      	mov	r2, r9
    7632:	4649      	mov	r1, r9
    7634:	0c17      	lsrs	r7, r2, #16
    7636:	0c1a      	lsrs	r2, r3, #16
    7638:	041b      	lsls	r3, r3, #16
    763a:	0c1b      	lsrs	r3, r3, #16
    763c:	0408      	lsls	r0, r1, #16
    763e:	0019      	movs	r1, r3
    7640:	0c00      	lsrs	r0, r0, #16
    7642:	4341      	muls	r1, r0
    7644:	0015      	movs	r5, r2
    7646:	4688      	mov	r8, r1
    7648:	0019      	movs	r1, r3
    764a:	437d      	muls	r5, r7
    764c:	4379      	muls	r1, r7
    764e:	9503      	str	r5, [sp, #12]
    7650:	4689      	mov	r9, r1
    7652:	0029      	movs	r1, r5
    7654:	0015      	movs	r5, r2
    7656:	4345      	muls	r5, r0
    7658:	444d      	add	r5, r9
    765a:	9502      	str	r5, [sp, #8]
    765c:	4645      	mov	r5, r8
    765e:	0c2d      	lsrs	r5, r5, #16
    7660:	46aa      	mov	sl, r5
    7662:	9d02      	ldr	r5, [sp, #8]
    7664:	4455      	add	r5, sl
    7666:	45a9      	cmp	r9, r5
    7668:	d906      	bls.n	7678 <__aeabi_dmul+0x238>
    766a:	468a      	mov	sl, r1
    766c:	2180      	movs	r1, #128	; 0x80
    766e:	0249      	lsls	r1, r1, #9
    7670:	4689      	mov	r9, r1
    7672:	44ca      	add	sl, r9
    7674:	4651      	mov	r1, sl
    7676:	9103      	str	r1, [sp, #12]
    7678:	0c29      	lsrs	r1, r5, #16
    767a:	9104      	str	r1, [sp, #16]
    767c:	4641      	mov	r1, r8
    767e:	0409      	lsls	r1, r1, #16
    7680:	042d      	lsls	r5, r5, #16
    7682:	0c09      	lsrs	r1, r1, #16
    7684:	4688      	mov	r8, r1
    7686:	0029      	movs	r1, r5
    7688:	0c25      	lsrs	r5, r4, #16
    768a:	0424      	lsls	r4, r4, #16
    768c:	4441      	add	r1, r8
    768e:	0c24      	lsrs	r4, r4, #16
    7690:	9105      	str	r1, [sp, #20]
    7692:	0021      	movs	r1, r4
    7694:	4341      	muls	r1, r0
    7696:	4688      	mov	r8, r1
    7698:	0021      	movs	r1, r4
    769a:	4379      	muls	r1, r7
    769c:	468a      	mov	sl, r1
    769e:	4368      	muls	r0, r5
    76a0:	4641      	mov	r1, r8
    76a2:	4450      	add	r0, sl
    76a4:	4681      	mov	r9, r0
    76a6:	0c08      	lsrs	r0, r1, #16
    76a8:	4448      	add	r0, r9
    76aa:	436f      	muls	r7, r5
    76ac:	4582      	cmp	sl, r0
    76ae:	d903      	bls.n	76b8 <__aeabi_dmul+0x278>
    76b0:	2180      	movs	r1, #128	; 0x80
    76b2:	0249      	lsls	r1, r1, #9
    76b4:	4689      	mov	r9, r1
    76b6:	444f      	add	r7, r9
    76b8:	0c01      	lsrs	r1, r0, #16
    76ba:	4689      	mov	r9, r1
    76bc:	0039      	movs	r1, r7
    76be:	4449      	add	r1, r9
    76c0:	9102      	str	r1, [sp, #8]
    76c2:	4641      	mov	r1, r8
    76c4:	040f      	lsls	r7, r1, #16
    76c6:	9904      	ldr	r1, [sp, #16]
    76c8:	0c3f      	lsrs	r7, r7, #16
    76ca:	4688      	mov	r8, r1
    76cc:	0400      	lsls	r0, r0, #16
    76ce:	19c0      	adds	r0, r0, r7
    76d0:	4480      	add	r8, r0
    76d2:	4641      	mov	r1, r8
    76d4:	9104      	str	r1, [sp, #16]
    76d6:	4659      	mov	r1, fp
    76d8:	0c0f      	lsrs	r7, r1, #16
    76da:	0409      	lsls	r1, r1, #16
    76dc:	0c09      	lsrs	r1, r1, #16
    76de:	4688      	mov	r8, r1
    76e0:	4359      	muls	r1, r3
    76e2:	468a      	mov	sl, r1
    76e4:	0039      	movs	r1, r7
    76e6:	4351      	muls	r1, r2
    76e8:	4689      	mov	r9, r1
    76ea:	4641      	mov	r1, r8
    76ec:	434a      	muls	r2, r1
    76ee:	4651      	mov	r1, sl
    76f0:	0c09      	lsrs	r1, r1, #16
    76f2:	468b      	mov	fp, r1
    76f4:	437b      	muls	r3, r7
    76f6:	18d2      	adds	r2, r2, r3
    76f8:	445a      	add	r2, fp
    76fa:	4293      	cmp	r3, r2
    76fc:	d903      	bls.n	7706 <__aeabi_dmul+0x2c6>
    76fe:	2380      	movs	r3, #128	; 0x80
    7700:	025b      	lsls	r3, r3, #9
    7702:	469b      	mov	fp, r3
    7704:	44d9      	add	r9, fp
    7706:	4651      	mov	r1, sl
    7708:	0409      	lsls	r1, r1, #16
    770a:	0c09      	lsrs	r1, r1, #16
    770c:	468a      	mov	sl, r1
    770e:	4641      	mov	r1, r8
    7710:	4361      	muls	r1, r4
    7712:	437c      	muls	r4, r7
    7714:	0c13      	lsrs	r3, r2, #16
    7716:	0412      	lsls	r2, r2, #16
    7718:	444b      	add	r3, r9
    771a:	4452      	add	r2, sl
    771c:	46a1      	mov	r9, r4
    771e:	468a      	mov	sl, r1
    7720:	003c      	movs	r4, r7
    7722:	4641      	mov	r1, r8
    7724:	436c      	muls	r4, r5
    7726:	434d      	muls	r5, r1
    7728:	4651      	mov	r1, sl
    772a:	444d      	add	r5, r9
    772c:	0c0f      	lsrs	r7, r1, #16
    772e:	197d      	adds	r5, r7, r5
    7730:	45a9      	cmp	r9, r5
    7732:	d903      	bls.n	773c <__aeabi_dmul+0x2fc>
    7734:	2180      	movs	r1, #128	; 0x80
    7736:	0249      	lsls	r1, r1, #9
    7738:	4688      	mov	r8, r1
    773a:	4444      	add	r4, r8
    773c:	9f04      	ldr	r7, [sp, #16]
    773e:	9903      	ldr	r1, [sp, #12]
    7740:	46b8      	mov	r8, r7
    7742:	4441      	add	r1, r8
    7744:	468b      	mov	fp, r1
    7746:	4583      	cmp	fp, r0
    7748:	4180      	sbcs	r0, r0
    774a:	4241      	negs	r1, r0
    774c:	4688      	mov	r8, r1
    774e:	4651      	mov	r1, sl
    7750:	0408      	lsls	r0, r1, #16
    7752:	042f      	lsls	r7, r5, #16
    7754:	0c00      	lsrs	r0, r0, #16
    7756:	183f      	adds	r7, r7, r0
    7758:	4658      	mov	r0, fp
    775a:	9902      	ldr	r1, [sp, #8]
    775c:	1810      	adds	r0, r2, r0
    775e:	4689      	mov	r9, r1
    7760:	4290      	cmp	r0, r2
    7762:	4192      	sbcs	r2, r2
    7764:	444f      	add	r7, r9
    7766:	46ba      	mov	sl, r7
    7768:	4252      	negs	r2, r2
    776a:	4699      	mov	r9, r3
    776c:	4693      	mov	fp, r2
    776e:	44c2      	add	sl, r8
    7770:	44d1      	add	r9, sl
    7772:	44cb      	add	fp, r9
    7774:	428f      	cmp	r7, r1
    7776:	41bf      	sbcs	r7, r7
    7778:	45c2      	cmp	sl, r8
    777a:	4189      	sbcs	r1, r1
    777c:	4599      	cmp	r9, r3
    777e:	419b      	sbcs	r3, r3
    7780:	4593      	cmp	fp, r2
    7782:	4192      	sbcs	r2, r2
    7784:	427f      	negs	r7, r7
    7786:	4249      	negs	r1, r1
    7788:	0c2d      	lsrs	r5, r5, #16
    778a:	4252      	negs	r2, r2
    778c:	430f      	orrs	r7, r1
    778e:	425b      	negs	r3, r3
    7790:	4313      	orrs	r3, r2
    7792:	197f      	adds	r7, r7, r5
    7794:	18ff      	adds	r7, r7, r3
    7796:	465b      	mov	r3, fp
    7798:	193c      	adds	r4, r7, r4
    779a:	0ddb      	lsrs	r3, r3, #23
    779c:	9a05      	ldr	r2, [sp, #20]
    779e:	0264      	lsls	r4, r4, #9
    77a0:	431c      	orrs	r4, r3
    77a2:	0243      	lsls	r3, r0, #9
    77a4:	4313      	orrs	r3, r2
    77a6:	1e5d      	subs	r5, r3, #1
    77a8:	41ab      	sbcs	r3, r5
    77aa:	465a      	mov	r2, fp
    77ac:	0dc0      	lsrs	r0, r0, #23
    77ae:	4303      	orrs	r3, r0
    77b0:	0252      	lsls	r2, r2, #9
    77b2:	4313      	orrs	r3, r2
    77b4:	01e2      	lsls	r2, r4, #7
    77b6:	d556      	bpl.n	7866 <__aeabi_dmul+0x426>
    77b8:	2001      	movs	r0, #1
    77ba:	085a      	lsrs	r2, r3, #1
    77bc:	4003      	ands	r3, r0
    77be:	4313      	orrs	r3, r2
    77c0:	07e2      	lsls	r2, r4, #31
    77c2:	4313      	orrs	r3, r2
    77c4:	0864      	lsrs	r4, r4, #1
    77c6:	485a      	ldr	r0, [pc, #360]	; (7930 <__aeabi_dmul+0x4f0>)
    77c8:	4460      	add	r0, ip
    77ca:	2800      	cmp	r0, #0
    77cc:	dd4d      	ble.n	786a <__aeabi_dmul+0x42a>
    77ce:	075a      	lsls	r2, r3, #29
    77d0:	d009      	beq.n	77e6 <__aeabi_dmul+0x3a6>
    77d2:	220f      	movs	r2, #15
    77d4:	401a      	ands	r2, r3
    77d6:	2a04      	cmp	r2, #4
    77d8:	d005      	beq.n	77e6 <__aeabi_dmul+0x3a6>
    77da:	1d1a      	adds	r2, r3, #4
    77dc:	429a      	cmp	r2, r3
    77de:	419b      	sbcs	r3, r3
    77e0:	425b      	negs	r3, r3
    77e2:	18e4      	adds	r4, r4, r3
    77e4:	0013      	movs	r3, r2
    77e6:	01e2      	lsls	r2, r4, #7
    77e8:	d504      	bpl.n	77f4 <__aeabi_dmul+0x3b4>
    77ea:	2080      	movs	r0, #128	; 0x80
    77ec:	4a51      	ldr	r2, [pc, #324]	; (7934 <__aeabi_dmul+0x4f4>)
    77ee:	00c0      	lsls	r0, r0, #3
    77f0:	4014      	ands	r4, r2
    77f2:	4460      	add	r0, ip
    77f4:	4a50      	ldr	r2, [pc, #320]	; (7938 <__aeabi_dmul+0x4f8>)
    77f6:	4290      	cmp	r0, r2
    77f8:	dd00      	ble.n	77fc <__aeabi_dmul+0x3bc>
    77fa:	e6e3      	b.n	75c4 <__aeabi_dmul+0x184>
    77fc:	2501      	movs	r5, #1
    77fe:	08db      	lsrs	r3, r3, #3
    7800:	0762      	lsls	r2, r4, #29
    7802:	431a      	orrs	r2, r3
    7804:	0264      	lsls	r4, r4, #9
    7806:	9b01      	ldr	r3, [sp, #4]
    7808:	4691      	mov	r9, r2
    780a:	0b22      	lsrs	r2, r4, #12
    780c:	0544      	lsls	r4, r0, #21
    780e:	0d64      	lsrs	r4, r4, #21
    7810:	401d      	ands	r5, r3
    7812:	e67c      	b.n	750e <__aeabi_dmul+0xce>
    7814:	2280      	movs	r2, #128	; 0x80
    7816:	4659      	mov	r1, fp
    7818:	0312      	lsls	r2, r2, #12
    781a:	4211      	tst	r1, r2
    781c:	d008      	beq.n	7830 <__aeabi_dmul+0x3f0>
    781e:	4214      	tst	r4, r2
    7820:	d106      	bne.n	7830 <__aeabi_dmul+0x3f0>
    7822:	4322      	orrs	r2, r4
    7824:	0312      	lsls	r2, r2, #12
    7826:	0b12      	lsrs	r2, r2, #12
    7828:	4645      	mov	r5, r8
    782a:	4699      	mov	r9, r3
    782c:	4c43      	ldr	r4, [pc, #268]	; (793c <__aeabi_dmul+0x4fc>)
    782e:	e66e      	b.n	750e <__aeabi_dmul+0xce>
    7830:	465b      	mov	r3, fp
    7832:	431a      	orrs	r2, r3
    7834:	0312      	lsls	r2, r2, #12
    7836:	0b12      	lsrs	r2, r2, #12
    7838:	4c40      	ldr	r4, [pc, #256]	; (793c <__aeabi_dmul+0x4fc>)
    783a:	e668      	b.n	750e <__aeabi_dmul+0xce>
    783c:	0003      	movs	r3, r0
    783e:	4654      	mov	r4, sl
    7840:	3b28      	subs	r3, #40	; 0x28
    7842:	409c      	lsls	r4, r3
    7844:	2300      	movs	r3, #0
    7846:	e6b9      	b.n	75bc <__aeabi_dmul+0x17c>
    7848:	f000 fbfc 	bl	8044 <__clzsi2>
    784c:	3020      	adds	r0, #32
    784e:	e6a6      	b.n	759e <__aeabi_dmul+0x15e>
    7850:	0003      	movs	r3, r0
    7852:	3b28      	subs	r3, #40	; 0x28
    7854:	409f      	lsls	r7, r3
    7856:	2300      	movs	r3, #0
    7858:	46bb      	mov	fp, r7
    785a:	4699      	mov	r9, r3
    785c:	e68a      	b.n	7574 <__aeabi_dmul+0x134>
    785e:	f000 fbf1 	bl	8044 <__clzsi2>
    7862:	3020      	adds	r0, #32
    7864:	e674      	b.n	7550 <__aeabi_dmul+0x110>
    7866:	46b4      	mov	ip, r6
    7868:	e7ad      	b.n	77c6 <__aeabi_dmul+0x386>
    786a:	2501      	movs	r5, #1
    786c:	1a2a      	subs	r2, r5, r0
    786e:	2a38      	cmp	r2, #56	; 0x38
    7870:	dd06      	ble.n	7880 <__aeabi_dmul+0x440>
    7872:	9b01      	ldr	r3, [sp, #4]
    7874:	2400      	movs	r4, #0
    7876:	401d      	ands	r5, r3
    7878:	2300      	movs	r3, #0
    787a:	2200      	movs	r2, #0
    787c:	4699      	mov	r9, r3
    787e:	e646      	b.n	750e <__aeabi_dmul+0xce>
    7880:	2a1f      	cmp	r2, #31
    7882:	dc21      	bgt.n	78c8 <__aeabi_dmul+0x488>
    7884:	2520      	movs	r5, #32
    7886:	0020      	movs	r0, r4
    7888:	1aad      	subs	r5, r5, r2
    788a:	001e      	movs	r6, r3
    788c:	40ab      	lsls	r3, r5
    788e:	40a8      	lsls	r0, r5
    7890:	40d6      	lsrs	r6, r2
    7892:	1e5d      	subs	r5, r3, #1
    7894:	41ab      	sbcs	r3, r5
    7896:	4330      	orrs	r0, r6
    7898:	4318      	orrs	r0, r3
    789a:	40d4      	lsrs	r4, r2
    789c:	0743      	lsls	r3, r0, #29
    789e:	d009      	beq.n	78b4 <__aeabi_dmul+0x474>
    78a0:	230f      	movs	r3, #15
    78a2:	4003      	ands	r3, r0
    78a4:	2b04      	cmp	r3, #4
    78a6:	d005      	beq.n	78b4 <__aeabi_dmul+0x474>
    78a8:	0003      	movs	r3, r0
    78aa:	1d18      	adds	r0, r3, #4
    78ac:	4298      	cmp	r0, r3
    78ae:	419b      	sbcs	r3, r3
    78b0:	425b      	negs	r3, r3
    78b2:	18e4      	adds	r4, r4, r3
    78b4:	0223      	lsls	r3, r4, #8
    78b6:	d521      	bpl.n	78fc <__aeabi_dmul+0x4bc>
    78b8:	2501      	movs	r5, #1
    78ba:	9b01      	ldr	r3, [sp, #4]
    78bc:	2401      	movs	r4, #1
    78be:	401d      	ands	r5, r3
    78c0:	2300      	movs	r3, #0
    78c2:	2200      	movs	r2, #0
    78c4:	4699      	mov	r9, r3
    78c6:	e622      	b.n	750e <__aeabi_dmul+0xce>
    78c8:	251f      	movs	r5, #31
    78ca:	0021      	movs	r1, r4
    78cc:	426d      	negs	r5, r5
    78ce:	1a28      	subs	r0, r5, r0
    78d0:	40c1      	lsrs	r1, r0
    78d2:	0008      	movs	r0, r1
    78d4:	2a20      	cmp	r2, #32
    78d6:	d01d      	beq.n	7914 <__aeabi_dmul+0x4d4>
    78d8:	355f      	adds	r5, #95	; 0x5f
    78da:	1aaa      	subs	r2, r5, r2
    78dc:	4094      	lsls	r4, r2
    78de:	4323      	orrs	r3, r4
    78e0:	1e5c      	subs	r4, r3, #1
    78e2:	41a3      	sbcs	r3, r4
    78e4:	2507      	movs	r5, #7
    78e6:	4303      	orrs	r3, r0
    78e8:	401d      	ands	r5, r3
    78ea:	2200      	movs	r2, #0
    78ec:	2d00      	cmp	r5, #0
    78ee:	d009      	beq.n	7904 <__aeabi_dmul+0x4c4>
    78f0:	220f      	movs	r2, #15
    78f2:	2400      	movs	r4, #0
    78f4:	401a      	ands	r2, r3
    78f6:	0018      	movs	r0, r3
    78f8:	2a04      	cmp	r2, #4
    78fa:	d1d6      	bne.n	78aa <__aeabi_dmul+0x46a>
    78fc:	0003      	movs	r3, r0
    78fe:	0765      	lsls	r5, r4, #29
    7900:	0264      	lsls	r4, r4, #9
    7902:	0b22      	lsrs	r2, r4, #12
    7904:	08db      	lsrs	r3, r3, #3
    7906:	432b      	orrs	r3, r5
    7908:	2501      	movs	r5, #1
    790a:	4699      	mov	r9, r3
    790c:	9b01      	ldr	r3, [sp, #4]
    790e:	2400      	movs	r4, #0
    7910:	401d      	ands	r5, r3
    7912:	e5fc      	b.n	750e <__aeabi_dmul+0xce>
    7914:	2400      	movs	r4, #0
    7916:	e7e2      	b.n	78de <__aeabi_dmul+0x49e>
    7918:	2280      	movs	r2, #128	; 0x80
    791a:	2501      	movs	r5, #1
    791c:	0312      	lsls	r2, r2, #12
    791e:	4322      	orrs	r2, r4
    7920:	9901      	ldr	r1, [sp, #4]
    7922:	0312      	lsls	r2, r2, #12
    7924:	0b12      	lsrs	r2, r2, #12
    7926:	400d      	ands	r5, r1
    7928:	4699      	mov	r9, r3
    792a:	4c04      	ldr	r4, [pc, #16]	; (793c <__aeabi_dmul+0x4fc>)
    792c:	e5ef      	b.n	750e <__aeabi_dmul+0xce>
    792e:	46c0      	nop			; (mov r8, r8)
    7930:	000003ff 	.word	0x000003ff
    7934:	feffffff 	.word	0xfeffffff
    7938:	000007fe 	.word	0x000007fe
    793c:	000007ff 	.word	0x000007ff

00007940 <__aeabi_dsub>:
    7940:	b5f0      	push	{r4, r5, r6, r7, lr}
    7942:	4646      	mov	r6, r8
    7944:	46d6      	mov	lr, sl
    7946:	464f      	mov	r7, r9
    7948:	030c      	lsls	r4, r1, #12
    794a:	b5c0      	push	{r6, r7, lr}
    794c:	0fcd      	lsrs	r5, r1, #31
    794e:	004e      	lsls	r6, r1, #1
    7950:	0a61      	lsrs	r1, r4, #9
    7952:	0f44      	lsrs	r4, r0, #29
    7954:	430c      	orrs	r4, r1
    7956:	00c1      	lsls	r1, r0, #3
    7958:	0058      	lsls	r0, r3, #1
    795a:	0d40      	lsrs	r0, r0, #21
    795c:	4684      	mov	ip, r0
    795e:	468a      	mov	sl, r1
    7960:	000f      	movs	r7, r1
    7962:	0319      	lsls	r1, r3, #12
    7964:	0f50      	lsrs	r0, r2, #29
    7966:	0a49      	lsrs	r1, r1, #9
    7968:	4301      	orrs	r1, r0
    796a:	48c6      	ldr	r0, [pc, #792]	; (7c84 <__aeabi_dsub+0x344>)
    796c:	0d76      	lsrs	r6, r6, #21
    796e:	46a8      	mov	r8, r5
    7970:	0fdb      	lsrs	r3, r3, #31
    7972:	00d2      	lsls	r2, r2, #3
    7974:	4584      	cmp	ip, r0
    7976:	d100      	bne.n	797a <__aeabi_dsub+0x3a>
    7978:	e0d8      	b.n	7b2c <__aeabi_dsub+0x1ec>
    797a:	2001      	movs	r0, #1
    797c:	4043      	eors	r3, r0
    797e:	42ab      	cmp	r3, r5
    7980:	d100      	bne.n	7984 <__aeabi_dsub+0x44>
    7982:	e0a6      	b.n	7ad2 <__aeabi_dsub+0x192>
    7984:	4660      	mov	r0, ip
    7986:	1a35      	subs	r5, r6, r0
    7988:	2d00      	cmp	r5, #0
    798a:	dc00      	bgt.n	798e <__aeabi_dsub+0x4e>
    798c:	e105      	b.n	7b9a <__aeabi_dsub+0x25a>
    798e:	2800      	cmp	r0, #0
    7990:	d110      	bne.n	79b4 <__aeabi_dsub+0x74>
    7992:	000b      	movs	r3, r1
    7994:	4313      	orrs	r3, r2
    7996:	d100      	bne.n	799a <__aeabi_dsub+0x5a>
    7998:	e0d7      	b.n	7b4a <__aeabi_dsub+0x20a>
    799a:	1e6b      	subs	r3, r5, #1
    799c:	2b00      	cmp	r3, #0
    799e:	d000      	beq.n	79a2 <__aeabi_dsub+0x62>
    79a0:	e14b      	b.n	7c3a <__aeabi_dsub+0x2fa>
    79a2:	4653      	mov	r3, sl
    79a4:	1a9f      	subs	r7, r3, r2
    79a6:	45ba      	cmp	sl, r7
    79a8:	4180      	sbcs	r0, r0
    79aa:	1a64      	subs	r4, r4, r1
    79ac:	4240      	negs	r0, r0
    79ae:	1a24      	subs	r4, r4, r0
    79b0:	2601      	movs	r6, #1
    79b2:	e01e      	b.n	79f2 <__aeabi_dsub+0xb2>
    79b4:	4bb3      	ldr	r3, [pc, #716]	; (7c84 <__aeabi_dsub+0x344>)
    79b6:	429e      	cmp	r6, r3
    79b8:	d048      	beq.n	7a4c <__aeabi_dsub+0x10c>
    79ba:	2380      	movs	r3, #128	; 0x80
    79bc:	041b      	lsls	r3, r3, #16
    79be:	4319      	orrs	r1, r3
    79c0:	2d38      	cmp	r5, #56	; 0x38
    79c2:	dd00      	ble.n	79c6 <__aeabi_dsub+0x86>
    79c4:	e119      	b.n	7bfa <__aeabi_dsub+0x2ba>
    79c6:	2d1f      	cmp	r5, #31
    79c8:	dd00      	ble.n	79cc <__aeabi_dsub+0x8c>
    79ca:	e14c      	b.n	7c66 <__aeabi_dsub+0x326>
    79cc:	2320      	movs	r3, #32
    79ce:	000f      	movs	r7, r1
    79d0:	1b5b      	subs	r3, r3, r5
    79d2:	0010      	movs	r0, r2
    79d4:	409a      	lsls	r2, r3
    79d6:	409f      	lsls	r7, r3
    79d8:	40e8      	lsrs	r0, r5
    79da:	1e53      	subs	r3, r2, #1
    79dc:	419a      	sbcs	r2, r3
    79de:	40e9      	lsrs	r1, r5
    79e0:	4307      	orrs	r7, r0
    79e2:	4317      	orrs	r7, r2
    79e4:	4653      	mov	r3, sl
    79e6:	1bdf      	subs	r7, r3, r7
    79e8:	1a61      	subs	r1, r4, r1
    79ea:	45ba      	cmp	sl, r7
    79ec:	41a4      	sbcs	r4, r4
    79ee:	4264      	negs	r4, r4
    79f0:	1b0c      	subs	r4, r1, r4
    79f2:	0223      	lsls	r3, r4, #8
    79f4:	d400      	bmi.n	79f8 <__aeabi_dsub+0xb8>
    79f6:	e0c5      	b.n	7b84 <__aeabi_dsub+0x244>
    79f8:	0264      	lsls	r4, r4, #9
    79fa:	0a65      	lsrs	r5, r4, #9
    79fc:	2d00      	cmp	r5, #0
    79fe:	d100      	bne.n	7a02 <__aeabi_dsub+0xc2>
    7a00:	e0f6      	b.n	7bf0 <__aeabi_dsub+0x2b0>
    7a02:	0028      	movs	r0, r5
    7a04:	f000 fb1e 	bl	8044 <__clzsi2>
    7a08:	0003      	movs	r3, r0
    7a0a:	3b08      	subs	r3, #8
    7a0c:	2b1f      	cmp	r3, #31
    7a0e:	dd00      	ble.n	7a12 <__aeabi_dsub+0xd2>
    7a10:	e0e9      	b.n	7be6 <__aeabi_dsub+0x2a6>
    7a12:	2220      	movs	r2, #32
    7a14:	003c      	movs	r4, r7
    7a16:	1ad2      	subs	r2, r2, r3
    7a18:	409d      	lsls	r5, r3
    7a1a:	40d4      	lsrs	r4, r2
    7a1c:	409f      	lsls	r7, r3
    7a1e:	4325      	orrs	r5, r4
    7a20:	429e      	cmp	r6, r3
    7a22:	dd00      	ble.n	7a26 <__aeabi_dsub+0xe6>
    7a24:	e0db      	b.n	7bde <__aeabi_dsub+0x29e>
    7a26:	1b9e      	subs	r6, r3, r6
    7a28:	1c73      	adds	r3, r6, #1
    7a2a:	2b1f      	cmp	r3, #31
    7a2c:	dd00      	ble.n	7a30 <__aeabi_dsub+0xf0>
    7a2e:	e10a      	b.n	7c46 <__aeabi_dsub+0x306>
    7a30:	2220      	movs	r2, #32
    7a32:	0038      	movs	r0, r7
    7a34:	1ad2      	subs	r2, r2, r3
    7a36:	0029      	movs	r1, r5
    7a38:	4097      	lsls	r7, r2
    7a3a:	002c      	movs	r4, r5
    7a3c:	4091      	lsls	r1, r2
    7a3e:	40d8      	lsrs	r0, r3
    7a40:	1e7a      	subs	r2, r7, #1
    7a42:	4197      	sbcs	r7, r2
    7a44:	40dc      	lsrs	r4, r3
    7a46:	2600      	movs	r6, #0
    7a48:	4301      	orrs	r1, r0
    7a4a:	430f      	orrs	r7, r1
    7a4c:	077b      	lsls	r3, r7, #29
    7a4e:	d009      	beq.n	7a64 <__aeabi_dsub+0x124>
    7a50:	230f      	movs	r3, #15
    7a52:	403b      	ands	r3, r7
    7a54:	2b04      	cmp	r3, #4
    7a56:	d005      	beq.n	7a64 <__aeabi_dsub+0x124>
    7a58:	1d3b      	adds	r3, r7, #4
    7a5a:	42bb      	cmp	r3, r7
    7a5c:	41bf      	sbcs	r7, r7
    7a5e:	427f      	negs	r7, r7
    7a60:	19e4      	adds	r4, r4, r7
    7a62:	001f      	movs	r7, r3
    7a64:	0223      	lsls	r3, r4, #8
    7a66:	d525      	bpl.n	7ab4 <__aeabi_dsub+0x174>
    7a68:	4b86      	ldr	r3, [pc, #536]	; (7c84 <__aeabi_dsub+0x344>)
    7a6a:	3601      	adds	r6, #1
    7a6c:	429e      	cmp	r6, r3
    7a6e:	d100      	bne.n	7a72 <__aeabi_dsub+0x132>
    7a70:	e0af      	b.n	7bd2 <__aeabi_dsub+0x292>
    7a72:	4b85      	ldr	r3, [pc, #532]	; (7c88 <__aeabi_dsub+0x348>)
    7a74:	2501      	movs	r5, #1
    7a76:	401c      	ands	r4, r3
    7a78:	4643      	mov	r3, r8
    7a7a:	0762      	lsls	r2, r4, #29
    7a7c:	08ff      	lsrs	r7, r7, #3
    7a7e:	0264      	lsls	r4, r4, #9
    7a80:	0576      	lsls	r6, r6, #21
    7a82:	4317      	orrs	r7, r2
    7a84:	0b24      	lsrs	r4, r4, #12
    7a86:	0d76      	lsrs	r6, r6, #21
    7a88:	401d      	ands	r5, r3
    7a8a:	2100      	movs	r1, #0
    7a8c:	0324      	lsls	r4, r4, #12
    7a8e:	0b23      	lsrs	r3, r4, #12
    7a90:	0d0c      	lsrs	r4, r1, #20
    7a92:	4a7e      	ldr	r2, [pc, #504]	; (7c8c <__aeabi_dsub+0x34c>)
    7a94:	0524      	lsls	r4, r4, #20
    7a96:	431c      	orrs	r4, r3
    7a98:	4014      	ands	r4, r2
    7a9a:	0533      	lsls	r3, r6, #20
    7a9c:	4323      	orrs	r3, r4
    7a9e:	005b      	lsls	r3, r3, #1
    7aa0:	07ed      	lsls	r5, r5, #31
    7aa2:	085b      	lsrs	r3, r3, #1
    7aa4:	432b      	orrs	r3, r5
    7aa6:	0038      	movs	r0, r7
    7aa8:	0019      	movs	r1, r3
    7aaa:	bc1c      	pop	{r2, r3, r4}
    7aac:	4690      	mov	r8, r2
    7aae:	4699      	mov	r9, r3
    7ab0:	46a2      	mov	sl, r4
    7ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ab4:	2501      	movs	r5, #1
    7ab6:	4643      	mov	r3, r8
    7ab8:	0762      	lsls	r2, r4, #29
    7aba:	08ff      	lsrs	r7, r7, #3
    7abc:	4317      	orrs	r7, r2
    7abe:	08e4      	lsrs	r4, r4, #3
    7ac0:	401d      	ands	r5, r3
    7ac2:	4b70      	ldr	r3, [pc, #448]	; (7c84 <__aeabi_dsub+0x344>)
    7ac4:	429e      	cmp	r6, r3
    7ac6:	d036      	beq.n	7b36 <__aeabi_dsub+0x1f6>
    7ac8:	0324      	lsls	r4, r4, #12
    7aca:	0576      	lsls	r6, r6, #21
    7acc:	0b24      	lsrs	r4, r4, #12
    7ace:	0d76      	lsrs	r6, r6, #21
    7ad0:	e7db      	b.n	7a8a <__aeabi_dsub+0x14a>
    7ad2:	4663      	mov	r3, ip
    7ad4:	1af3      	subs	r3, r6, r3
    7ad6:	2b00      	cmp	r3, #0
    7ad8:	dc00      	bgt.n	7adc <__aeabi_dsub+0x19c>
    7ada:	e094      	b.n	7c06 <__aeabi_dsub+0x2c6>
    7adc:	4660      	mov	r0, ip
    7ade:	2800      	cmp	r0, #0
    7ae0:	d035      	beq.n	7b4e <__aeabi_dsub+0x20e>
    7ae2:	4868      	ldr	r0, [pc, #416]	; (7c84 <__aeabi_dsub+0x344>)
    7ae4:	4286      	cmp	r6, r0
    7ae6:	d0b1      	beq.n	7a4c <__aeabi_dsub+0x10c>
    7ae8:	2780      	movs	r7, #128	; 0x80
    7aea:	043f      	lsls	r7, r7, #16
    7aec:	4339      	orrs	r1, r7
    7aee:	2b38      	cmp	r3, #56	; 0x38
    7af0:	dc00      	bgt.n	7af4 <__aeabi_dsub+0x1b4>
    7af2:	e0fd      	b.n	7cf0 <__aeabi_dsub+0x3b0>
    7af4:	430a      	orrs	r2, r1
    7af6:	0017      	movs	r7, r2
    7af8:	2100      	movs	r1, #0
    7afa:	1e7a      	subs	r2, r7, #1
    7afc:	4197      	sbcs	r7, r2
    7afe:	4457      	add	r7, sl
    7b00:	4557      	cmp	r7, sl
    7b02:	4180      	sbcs	r0, r0
    7b04:	1909      	adds	r1, r1, r4
    7b06:	4244      	negs	r4, r0
    7b08:	190c      	adds	r4, r1, r4
    7b0a:	0223      	lsls	r3, r4, #8
    7b0c:	d53a      	bpl.n	7b84 <__aeabi_dsub+0x244>
    7b0e:	4b5d      	ldr	r3, [pc, #372]	; (7c84 <__aeabi_dsub+0x344>)
    7b10:	3601      	adds	r6, #1
    7b12:	429e      	cmp	r6, r3
    7b14:	d100      	bne.n	7b18 <__aeabi_dsub+0x1d8>
    7b16:	e14b      	b.n	7db0 <__aeabi_dsub+0x470>
    7b18:	2201      	movs	r2, #1
    7b1a:	4b5b      	ldr	r3, [pc, #364]	; (7c88 <__aeabi_dsub+0x348>)
    7b1c:	401c      	ands	r4, r3
    7b1e:	087b      	lsrs	r3, r7, #1
    7b20:	4017      	ands	r7, r2
    7b22:	431f      	orrs	r7, r3
    7b24:	07e2      	lsls	r2, r4, #31
    7b26:	4317      	orrs	r7, r2
    7b28:	0864      	lsrs	r4, r4, #1
    7b2a:	e78f      	b.n	7a4c <__aeabi_dsub+0x10c>
    7b2c:	0008      	movs	r0, r1
    7b2e:	4310      	orrs	r0, r2
    7b30:	d000      	beq.n	7b34 <__aeabi_dsub+0x1f4>
    7b32:	e724      	b.n	797e <__aeabi_dsub+0x3e>
    7b34:	e721      	b.n	797a <__aeabi_dsub+0x3a>
    7b36:	0023      	movs	r3, r4
    7b38:	433b      	orrs	r3, r7
    7b3a:	d100      	bne.n	7b3e <__aeabi_dsub+0x1fe>
    7b3c:	e1b9      	b.n	7eb2 <__aeabi_dsub+0x572>
    7b3e:	2280      	movs	r2, #128	; 0x80
    7b40:	0312      	lsls	r2, r2, #12
    7b42:	4314      	orrs	r4, r2
    7b44:	0324      	lsls	r4, r4, #12
    7b46:	0b24      	lsrs	r4, r4, #12
    7b48:	e79f      	b.n	7a8a <__aeabi_dsub+0x14a>
    7b4a:	002e      	movs	r6, r5
    7b4c:	e77e      	b.n	7a4c <__aeabi_dsub+0x10c>
    7b4e:	0008      	movs	r0, r1
    7b50:	4310      	orrs	r0, r2
    7b52:	d100      	bne.n	7b56 <__aeabi_dsub+0x216>
    7b54:	e0ca      	b.n	7cec <__aeabi_dsub+0x3ac>
    7b56:	1e58      	subs	r0, r3, #1
    7b58:	4684      	mov	ip, r0
    7b5a:	2800      	cmp	r0, #0
    7b5c:	d000      	beq.n	7b60 <__aeabi_dsub+0x220>
    7b5e:	e0e7      	b.n	7d30 <__aeabi_dsub+0x3f0>
    7b60:	4452      	add	r2, sl
    7b62:	4552      	cmp	r2, sl
    7b64:	4180      	sbcs	r0, r0
    7b66:	1864      	adds	r4, r4, r1
    7b68:	4240      	negs	r0, r0
    7b6a:	1824      	adds	r4, r4, r0
    7b6c:	0017      	movs	r7, r2
    7b6e:	2601      	movs	r6, #1
    7b70:	0223      	lsls	r3, r4, #8
    7b72:	d507      	bpl.n	7b84 <__aeabi_dsub+0x244>
    7b74:	2602      	movs	r6, #2
    7b76:	e7cf      	b.n	7b18 <__aeabi_dsub+0x1d8>
    7b78:	4664      	mov	r4, ip
    7b7a:	432c      	orrs	r4, r5
    7b7c:	d100      	bne.n	7b80 <__aeabi_dsub+0x240>
    7b7e:	e1b3      	b.n	7ee8 <__aeabi_dsub+0x5a8>
    7b80:	002c      	movs	r4, r5
    7b82:	4667      	mov	r7, ip
    7b84:	077b      	lsls	r3, r7, #29
    7b86:	d000      	beq.n	7b8a <__aeabi_dsub+0x24a>
    7b88:	e762      	b.n	7a50 <__aeabi_dsub+0x110>
    7b8a:	0763      	lsls	r3, r4, #29
    7b8c:	08ff      	lsrs	r7, r7, #3
    7b8e:	431f      	orrs	r7, r3
    7b90:	2501      	movs	r5, #1
    7b92:	4643      	mov	r3, r8
    7b94:	08e4      	lsrs	r4, r4, #3
    7b96:	401d      	ands	r5, r3
    7b98:	e793      	b.n	7ac2 <__aeabi_dsub+0x182>
    7b9a:	2d00      	cmp	r5, #0
    7b9c:	d178      	bne.n	7c90 <__aeabi_dsub+0x350>
    7b9e:	1c75      	adds	r5, r6, #1
    7ba0:	056d      	lsls	r5, r5, #21
    7ba2:	0d6d      	lsrs	r5, r5, #21
    7ba4:	2d01      	cmp	r5, #1
    7ba6:	dc00      	bgt.n	7baa <__aeabi_dsub+0x26a>
    7ba8:	e0f2      	b.n	7d90 <__aeabi_dsub+0x450>
    7baa:	4650      	mov	r0, sl
    7bac:	1a80      	subs	r0, r0, r2
    7bae:	4582      	cmp	sl, r0
    7bb0:	41bf      	sbcs	r7, r7
    7bb2:	1a65      	subs	r5, r4, r1
    7bb4:	427f      	negs	r7, r7
    7bb6:	1bed      	subs	r5, r5, r7
    7bb8:	4684      	mov	ip, r0
    7bba:	0228      	lsls	r0, r5, #8
    7bbc:	d400      	bmi.n	7bc0 <__aeabi_dsub+0x280>
    7bbe:	e08c      	b.n	7cda <__aeabi_dsub+0x39a>
    7bc0:	4650      	mov	r0, sl
    7bc2:	1a17      	subs	r7, r2, r0
    7bc4:	42ba      	cmp	r2, r7
    7bc6:	4192      	sbcs	r2, r2
    7bc8:	1b0c      	subs	r4, r1, r4
    7bca:	4255      	negs	r5, r2
    7bcc:	1b65      	subs	r5, r4, r5
    7bce:	4698      	mov	r8, r3
    7bd0:	e714      	b.n	79fc <__aeabi_dsub+0xbc>
    7bd2:	2501      	movs	r5, #1
    7bd4:	4643      	mov	r3, r8
    7bd6:	2400      	movs	r4, #0
    7bd8:	401d      	ands	r5, r3
    7bda:	2700      	movs	r7, #0
    7bdc:	e755      	b.n	7a8a <__aeabi_dsub+0x14a>
    7bde:	4c2a      	ldr	r4, [pc, #168]	; (7c88 <__aeabi_dsub+0x348>)
    7be0:	1af6      	subs	r6, r6, r3
    7be2:	402c      	ands	r4, r5
    7be4:	e732      	b.n	7a4c <__aeabi_dsub+0x10c>
    7be6:	003d      	movs	r5, r7
    7be8:	3828      	subs	r0, #40	; 0x28
    7bea:	4085      	lsls	r5, r0
    7bec:	2700      	movs	r7, #0
    7bee:	e717      	b.n	7a20 <__aeabi_dsub+0xe0>
    7bf0:	0038      	movs	r0, r7
    7bf2:	f000 fa27 	bl	8044 <__clzsi2>
    7bf6:	3020      	adds	r0, #32
    7bf8:	e706      	b.n	7a08 <__aeabi_dsub+0xc8>
    7bfa:	430a      	orrs	r2, r1
    7bfc:	0017      	movs	r7, r2
    7bfe:	2100      	movs	r1, #0
    7c00:	1e7a      	subs	r2, r7, #1
    7c02:	4197      	sbcs	r7, r2
    7c04:	e6ee      	b.n	79e4 <__aeabi_dsub+0xa4>
    7c06:	2b00      	cmp	r3, #0
    7c08:	d000      	beq.n	7c0c <__aeabi_dsub+0x2cc>
    7c0a:	e0e5      	b.n	7dd8 <__aeabi_dsub+0x498>
    7c0c:	1c73      	adds	r3, r6, #1
    7c0e:	469c      	mov	ip, r3
    7c10:	055b      	lsls	r3, r3, #21
    7c12:	0d5b      	lsrs	r3, r3, #21
    7c14:	2b01      	cmp	r3, #1
    7c16:	dc00      	bgt.n	7c1a <__aeabi_dsub+0x2da>
    7c18:	e09f      	b.n	7d5a <__aeabi_dsub+0x41a>
    7c1a:	4b1a      	ldr	r3, [pc, #104]	; (7c84 <__aeabi_dsub+0x344>)
    7c1c:	459c      	cmp	ip, r3
    7c1e:	d100      	bne.n	7c22 <__aeabi_dsub+0x2e2>
    7c20:	e0c5      	b.n	7dae <__aeabi_dsub+0x46e>
    7c22:	4452      	add	r2, sl
    7c24:	4552      	cmp	r2, sl
    7c26:	4180      	sbcs	r0, r0
    7c28:	1864      	adds	r4, r4, r1
    7c2a:	4240      	negs	r0, r0
    7c2c:	1824      	adds	r4, r4, r0
    7c2e:	07e7      	lsls	r7, r4, #31
    7c30:	0852      	lsrs	r2, r2, #1
    7c32:	4317      	orrs	r7, r2
    7c34:	0864      	lsrs	r4, r4, #1
    7c36:	4666      	mov	r6, ip
    7c38:	e708      	b.n	7a4c <__aeabi_dsub+0x10c>
    7c3a:	4812      	ldr	r0, [pc, #72]	; (7c84 <__aeabi_dsub+0x344>)
    7c3c:	4285      	cmp	r5, r0
    7c3e:	d100      	bne.n	7c42 <__aeabi_dsub+0x302>
    7c40:	e085      	b.n	7d4e <__aeabi_dsub+0x40e>
    7c42:	001d      	movs	r5, r3
    7c44:	e6bc      	b.n	79c0 <__aeabi_dsub+0x80>
    7c46:	0029      	movs	r1, r5
    7c48:	3e1f      	subs	r6, #31
    7c4a:	40f1      	lsrs	r1, r6
    7c4c:	2b20      	cmp	r3, #32
    7c4e:	d100      	bne.n	7c52 <__aeabi_dsub+0x312>
    7c50:	e07f      	b.n	7d52 <__aeabi_dsub+0x412>
    7c52:	2240      	movs	r2, #64	; 0x40
    7c54:	1ad3      	subs	r3, r2, r3
    7c56:	409d      	lsls	r5, r3
    7c58:	432f      	orrs	r7, r5
    7c5a:	1e7d      	subs	r5, r7, #1
    7c5c:	41af      	sbcs	r7, r5
    7c5e:	2400      	movs	r4, #0
    7c60:	430f      	orrs	r7, r1
    7c62:	2600      	movs	r6, #0
    7c64:	e78e      	b.n	7b84 <__aeabi_dsub+0x244>
    7c66:	002b      	movs	r3, r5
    7c68:	000f      	movs	r7, r1
    7c6a:	3b20      	subs	r3, #32
    7c6c:	40df      	lsrs	r7, r3
    7c6e:	2d20      	cmp	r5, #32
    7c70:	d071      	beq.n	7d56 <__aeabi_dsub+0x416>
    7c72:	2340      	movs	r3, #64	; 0x40
    7c74:	1b5d      	subs	r5, r3, r5
    7c76:	40a9      	lsls	r1, r5
    7c78:	430a      	orrs	r2, r1
    7c7a:	1e51      	subs	r1, r2, #1
    7c7c:	418a      	sbcs	r2, r1
    7c7e:	2100      	movs	r1, #0
    7c80:	4317      	orrs	r7, r2
    7c82:	e6af      	b.n	79e4 <__aeabi_dsub+0xa4>
    7c84:	000007ff 	.word	0x000007ff
    7c88:	ff7fffff 	.word	0xff7fffff
    7c8c:	800fffff 	.word	0x800fffff
    7c90:	2e00      	cmp	r6, #0
    7c92:	d03e      	beq.n	7d12 <__aeabi_dsub+0x3d2>
    7c94:	4eb3      	ldr	r6, [pc, #716]	; (7f64 <__aeabi_dsub+0x624>)
    7c96:	45b4      	cmp	ip, r6
    7c98:	d045      	beq.n	7d26 <__aeabi_dsub+0x3e6>
    7c9a:	2680      	movs	r6, #128	; 0x80
    7c9c:	0436      	lsls	r6, r6, #16
    7c9e:	426d      	negs	r5, r5
    7ca0:	4334      	orrs	r4, r6
    7ca2:	2d38      	cmp	r5, #56	; 0x38
    7ca4:	dd00      	ble.n	7ca8 <__aeabi_dsub+0x368>
    7ca6:	e0a8      	b.n	7dfa <__aeabi_dsub+0x4ba>
    7ca8:	2d1f      	cmp	r5, #31
    7caa:	dd00      	ble.n	7cae <__aeabi_dsub+0x36e>
    7cac:	e11f      	b.n	7eee <__aeabi_dsub+0x5ae>
    7cae:	2620      	movs	r6, #32
    7cb0:	0027      	movs	r7, r4
    7cb2:	4650      	mov	r0, sl
    7cb4:	1b76      	subs	r6, r6, r5
    7cb6:	40b7      	lsls	r7, r6
    7cb8:	40e8      	lsrs	r0, r5
    7cba:	4307      	orrs	r7, r0
    7cbc:	4650      	mov	r0, sl
    7cbe:	40b0      	lsls	r0, r6
    7cc0:	1e46      	subs	r6, r0, #1
    7cc2:	41b0      	sbcs	r0, r6
    7cc4:	40ec      	lsrs	r4, r5
    7cc6:	4338      	orrs	r0, r7
    7cc8:	1a17      	subs	r7, r2, r0
    7cca:	42ba      	cmp	r2, r7
    7ccc:	4192      	sbcs	r2, r2
    7cce:	1b0c      	subs	r4, r1, r4
    7cd0:	4252      	negs	r2, r2
    7cd2:	1aa4      	subs	r4, r4, r2
    7cd4:	4666      	mov	r6, ip
    7cd6:	4698      	mov	r8, r3
    7cd8:	e68b      	b.n	79f2 <__aeabi_dsub+0xb2>
    7cda:	4664      	mov	r4, ip
    7cdc:	4667      	mov	r7, ip
    7cde:	432c      	orrs	r4, r5
    7ce0:	d000      	beq.n	7ce4 <__aeabi_dsub+0x3a4>
    7ce2:	e68b      	b.n	79fc <__aeabi_dsub+0xbc>
    7ce4:	2500      	movs	r5, #0
    7ce6:	2600      	movs	r6, #0
    7ce8:	2700      	movs	r7, #0
    7cea:	e6ea      	b.n	7ac2 <__aeabi_dsub+0x182>
    7cec:	001e      	movs	r6, r3
    7cee:	e6ad      	b.n	7a4c <__aeabi_dsub+0x10c>
    7cf0:	2b1f      	cmp	r3, #31
    7cf2:	dc60      	bgt.n	7db6 <__aeabi_dsub+0x476>
    7cf4:	2720      	movs	r7, #32
    7cf6:	1af8      	subs	r0, r7, r3
    7cf8:	000f      	movs	r7, r1
    7cfa:	4684      	mov	ip, r0
    7cfc:	4087      	lsls	r7, r0
    7cfe:	0010      	movs	r0, r2
    7d00:	40d8      	lsrs	r0, r3
    7d02:	4307      	orrs	r7, r0
    7d04:	4660      	mov	r0, ip
    7d06:	4082      	lsls	r2, r0
    7d08:	1e50      	subs	r0, r2, #1
    7d0a:	4182      	sbcs	r2, r0
    7d0c:	40d9      	lsrs	r1, r3
    7d0e:	4317      	orrs	r7, r2
    7d10:	e6f5      	b.n	7afe <__aeabi_dsub+0x1be>
    7d12:	0026      	movs	r6, r4
    7d14:	4650      	mov	r0, sl
    7d16:	4306      	orrs	r6, r0
    7d18:	d005      	beq.n	7d26 <__aeabi_dsub+0x3e6>
    7d1a:	43ed      	mvns	r5, r5
    7d1c:	2d00      	cmp	r5, #0
    7d1e:	d0d3      	beq.n	7cc8 <__aeabi_dsub+0x388>
    7d20:	4e90      	ldr	r6, [pc, #576]	; (7f64 <__aeabi_dsub+0x624>)
    7d22:	45b4      	cmp	ip, r6
    7d24:	d1bd      	bne.n	7ca2 <__aeabi_dsub+0x362>
    7d26:	000c      	movs	r4, r1
    7d28:	0017      	movs	r7, r2
    7d2a:	4666      	mov	r6, ip
    7d2c:	4698      	mov	r8, r3
    7d2e:	e68d      	b.n	7a4c <__aeabi_dsub+0x10c>
    7d30:	488c      	ldr	r0, [pc, #560]	; (7f64 <__aeabi_dsub+0x624>)
    7d32:	4283      	cmp	r3, r0
    7d34:	d00b      	beq.n	7d4e <__aeabi_dsub+0x40e>
    7d36:	4663      	mov	r3, ip
    7d38:	e6d9      	b.n	7aee <__aeabi_dsub+0x1ae>
    7d3a:	2d00      	cmp	r5, #0
    7d3c:	d000      	beq.n	7d40 <__aeabi_dsub+0x400>
    7d3e:	e096      	b.n	7e6e <__aeabi_dsub+0x52e>
    7d40:	0008      	movs	r0, r1
    7d42:	4310      	orrs	r0, r2
    7d44:	d100      	bne.n	7d48 <__aeabi_dsub+0x408>
    7d46:	e0e2      	b.n	7f0e <__aeabi_dsub+0x5ce>
    7d48:	000c      	movs	r4, r1
    7d4a:	0017      	movs	r7, r2
    7d4c:	4698      	mov	r8, r3
    7d4e:	4e85      	ldr	r6, [pc, #532]	; (7f64 <__aeabi_dsub+0x624>)
    7d50:	e67c      	b.n	7a4c <__aeabi_dsub+0x10c>
    7d52:	2500      	movs	r5, #0
    7d54:	e780      	b.n	7c58 <__aeabi_dsub+0x318>
    7d56:	2100      	movs	r1, #0
    7d58:	e78e      	b.n	7c78 <__aeabi_dsub+0x338>
    7d5a:	0023      	movs	r3, r4
    7d5c:	4650      	mov	r0, sl
    7d5e:	4303      	orrs	r3, r0
    7d60:	2e00      	cmp	r6, #0
    7d62:	d000      	beq.n	7d66 <__aeabi_dsub+0x426>
    7d64:	e0a8      	b.n	7eb8 <__aeabi_dsub+0x578>
    7d66:	2b00      	cmp	r3, #0
    7d68:	d100      	bne.n	7d6c <__aeabi_dsub+0x42c>
    7d6a:	e0de      	b.n	7f2a <__aeabi_dsub+0x5ea>
    7d6c:	000b      	movs	r3, r1
    7d6e:	4313      	orrs	r3, r2
    7d70:	d100      	bne.n	7d74 <__aeabi_dsub+0x434>
    7d72:	e66b      	b.n	7a4c <__aeabi_dsub+0x10c>
    7d74:	4452      	add	r2, sl
    7d76:	4552      	cmp	r2, sl
    7d78:	4180      	sbcs	r0, r0
    7d7a:	1864      	adds	r4, r4, r1
    7d7c:	4240      	negs	r0, r0
    7d7e:	1824      	adds	r4, r4, r0
    7d80:	0017      	movs	r7, r2
    7d82:	0223      	lsls	r3, r4, #8
    7d84:	d400      	bmi.n	7d88 <__aeabi_dsub+0x448>
    7d86:	e6fd      	b.n	7b84 <__aeabi_dsub+0x244>
    7d88:	4b77      	ldr	r3, [pc, #476]	; (7f68 <__aeabi_dsub+0x628>)
    7d8a:	4666      	mov	r6, ip
    7d8c:	401c      	ands	r4, r3
    7d8e:	e65d      	b.n	7a4c <__aeabi_dsub+0x10c>
    7d90:	0025      	movs	r5, r4
    7d92:	4650      	mov	r0, sl
    7d94:	4305      	orrs	r5, r0
    7d96:	2e00      	cmp	r6, #0
    7d98:	d1cf      	bne.n	7d3a <__aeabi_dsub+0x3fa>
    7d9a:	2d00      	cmp	r5, #0
    7d9c:	d14f      	bne.n	7e3e <__aeabi_dsub+0x4fe>
    7d9e:	000c      	movs	r4, r1
    7da0:	4314      	orrs	r4, r2
    7da2:	d100      	bne.n	7da6 <__aeabi_dsub+0x466>
    7da4:	e0a0      	b.n	7ee8 <__aeabi_dsub+0x5a8>
    7da6:	000c      	movs	r4, r1
    7da8:	0017      	movs	r7, r2
    7daa:	4698      	mov	r8, r3
    7dac:	e64e      	b.n	7a4c <__aeabi_dsub+0x10c>
    7dae:	4666      	mov	r6, ip
    7db0:	2400      	movs	r4, #0
    7db2:	2700      	movs	r7, #0
    7db4:	e685      	b.n	7ac2 <__aeabi_dsub+0x182>
    7db6:	001f      	movs	r7, r3
    7db8:	0008      	movs	r0, r1
    7dba:	3f20      	subs	r7, #32
    7dbc:	40f8      	lsrs	r0, r7
    7dbe:	0007      	movs	r7, r0
    7dc0:	2b20      	cmp	r3, #32
    7dc2:	d100      	bne.n	7dc6 <__aeabi_dsub+0x486>
    7dc4:	e08e      	b.n	7ee4 <__aeabi_dsub+0x5a4>
    7dc6:	2040      	movs	r0, #64	; 0x40
    7dc8:	1ac3      	subs	r3, r0, r3
    7dca:	4099      	lsls	r1, r3
    7dcc:	430a      	orrs	r2, r1
    7dce:	1e51      	subs	r1, r2, #1
    7dd0:	418a      	sbcs	r2, r1
    7dd2:	2100      	movs	r1, #0
    7dd4:	4317      	orrs	r7, r2
    7dd6:	e692      	b.n	7afe <__aeabi_dsub+0x1be>
    7dd8:	2e00      	cmp	r6, #0
    7dda:	d114      	bne.n	7e06 <__aeabi_dsub+0x4c6>
    7ddc:	0026      	movs	r6, r4
    7dde:	4650      	mov	r0, sl
    7de0:	4306      	orrs	r6, r0
    7de2:	d062      	beq.n	7eaa <__aeabi_dsub+0x56a>
    7de4:	43db      	mvns	r3, r3
    7de6:	2b00      	cmp	r3, #0
    7de8:	d15c      	bne.n	7ea4 <__aeabi_dsub+0x564>
    7dea:	1887      	adds	r7, r0, r2
    7dec:	4297      	cmp	r7, r2
    7dee:	4192      	sbcs	r2, r2
    7df0:	1864      	adds	r4, r4, r1
    7df2:	4252      	negs	r2, r2
    7df4:	18a4      	adds	r4, r4, r2
    7df6:	4666      	mov	r6, ip
    7df8:	e687      	b.n	7b0a <__aeabi_dsub+0x1ca>
    7dfa:	4650      	mov	r0, sl
    7dfc:	4320      	orrs	r0, r4
    7dfe:	1e44      	subs	r4, r0, #1
    7e00:	41a0      	sbcs	r0, r4
    7e02:	2400      	movs	r4, #0
    7e04:	e760      	b.n	7cc8 <__aeabi_dsub+0x388>
    7e06:	4e57      	ldr	r6, [pc, #348]	; (7f64 <__aeabi_dsub+0x624>)
    7e08:	45b4      	cmp	ip, r6
    7e0a:	d04e      	beq.n	7eaa <__aeabi_dsub+0x56a>
    7e0c:	2680      	movs	r6, #128	; 0x80
    7e0e:	0436      	lsls	r6, r6, #16
    7e10:	425b      	negs	r3, r3
    7e12:	4334      	orrs	r4, r6
    7e14:	2b38      	cmp	r3, #56	; 0x38
    7e16:	dd00      	ble.n	7e1a <__aeabi_dsub+0x4da>
    7e18:	e07f      	b.n	7f1a <__aeabi_dsub+0x5da>
    7e1a:	2b1f      	cmp	r3, #31
    7e1c:	dd00      	ble.n	7e20 <__aeabi_dsub+0x4e0>
    7e1e:	e08b      	b.n	7f38 <__aeabi_dsub+0x5f8>
    7e20:	2620      	movs	r6, #32
    7e22:	0027      	movs	r7, r4
    7e24:	4650      	mov	r0, sl
    7e26:	1af6      	subs	r6, r6, r3
    7e28:	40b7      	lsls	r7, r6
    7e2a:	40d8      	lsrs	r0, r3
    7e2c:	4307      	orrs	r7, r0
    7e2e:	4650      	mov	r0, sl
    7e30:	40b0      	lsls	r0, r6
    7e32:	1e46      	subs	r6, r0, #1
    7e34:	41b0      	sbcs	r0, r6
    7e36:	4307      	orrs	r7, r0
    7e38:	40dc      	lsrs	r4, r3
    7e3a:	18bf      	adds	r7, r7, r2
    7e3c:	e7d6      	b.n	7dec <__aeabi_dsub+0x4ac>
    7e3e:	000d      	movs	r5, r1
    7e40:	4315      	orrs	r5, r2
    7e42:	d100      	bne.n	7e46 <__aeabi_dsub+0x506>
    7e44:	e602      	b.n	7a4c <__aeabi_dsub+0x10c>
    7e46:	4650      	mov	r0, sl
    7e48:	1a80      	subs	r0, r0, r2
    7e4a:	4582      	cmp	sl, r0
    7e4c:	41bf      	sbcs	r7, r7
    7e4e:	1a65      	subs	r5, r4, r1
    7e50:	427f      	negs	r7, r7
    7e52:	1bed      	subs	r5, r5, r7
    7e54:	4684      	mov	ip, r0
    7e56:	0228      	lsls	r0, r5, #8
    7e58:	d400      	bmi.n	7e5c <__aeabi_dsub+0x51c>
    7e5a:	e68d      	b.n	7b78 <__aeabi_dsub+0x238>
    7e5c:	4650      	mov	r0, sl
    7e5e:	1a17      	subs	r7, r2, r0
    7e60:	42ba      	cmp	r2, r7
    7e62:	4192      	sbcs	r2, r2
    7e64:	1b0c      	subs	r4, r1, r4
    7e66:	4252      	negs	r2, r2
    7e68:	1aa4      	subs	r4, r4, r2
    7e6a:	4698      	mov	r8, r3
    7e6c:	e5ee      	b.n	7a4c <__aeabi_dsub+0x10c>
    7e6e:	000d      	movs	r5, r1
    7e70:	4315      	orrs	r5, r2
    7e72:	d100      	bne.n	7e76 <__aeabi_dsub+0x536>
    7e74:	e76b      	b.n	7d4e <__aeabi_dsub+0x40e>
    7e76:	4650      	mov	r0, sl
    7e78:	0767      	lsls	r7, r4, #29
    7e7a:	08c0      	lsrs	r0, r0, #3
    7e7c:	4307      	orrs	r7, r0
    7e7e:	2080      	movs	r0, #128	; 0x80
    7e80:	08e4      	lsrs	r4, r4, #3
    7e82:	0300      	lsls	r0, r0, #12
    7e84:	4204      	tst	r4, r0
    7e86:	d007      	beq.n	7e98 <__aeabi_dsub+0x558>
    7e88:	08cd      	lsrs	r5, r1, #3
    7e8a:	4205      	tst	r5, r0
    7e8c:	d104      	bne.n	7e98 <__aeabi_dsub+0x558>
    7e8e:	002c      	movs	r4, r5
    7e90:	4698      	mov	r8, r3
    7e92:	08d7      	lsrs	r7, r2, #3
    7e94:	0749      	lsls	r1, r1, #29
    7e96:	430f      	orrs	r7, r1
    7e98:	0f7b      	lsrs	r3, r7, #29
    7e9a:	00e4      	lsls	r4, r4, #3
    7e9c:	431c      	orrs	r4, r3
    7e9e:	00ff      	lsls	r7, r7, #3
    7ea0:	4e30      	ldr	r6, [pc, #192]	; (7f64 <__aeabi_dsub+0x624>)
    7ea2:	e5d3      	b.n	7a4c <__aeabi_dsub+0x10c>
    7ea4:	4e2f      	ldr	r6, [pc, #188]	; (7f64 <__aeabi_dsub+0x624>)
    7ea6:	45b4      	cmp	ip, r6
    7ea8:	d1b4      	bne.n	7e14 <__aeabi_dsub+0x4d4>
    7eaa:	000c      	movs	r4, r1
    7eac:	0017      	movs	r7, r2
    7eae:	4666      	mov	r6, ip
    7eb0:	e5cc      	b.n	7a4c <__aeabi_dsub+0x10c>
    7eb2:	2700      	movs	r7, #0
    7eb4:	2400      	movs	r4, #0
    7eb6:	e5e8      	b.n	7a8a <__aeabi_dsub+0x14a>
    7eb8:	2b00      	cmp	r3, #0
    7eba:	d039      	beq.n	7f30 <__aeabi_dsub+0x5f0>
    7ebc:	000b      	movs	r3, r1
    7ebe:	4313      	orrs	r3, r2
    7ec0:	d100      	bne.n	7ec4 <__aeabi_dsub+0x584>
    7ec2:	e744      	b.n	7d4e <__aeabi_dsub+0x40e>
    7ec4:	08c0      	lsrs	r0, r0, #3
    7ec6:	0767      	lsls	r7, r4, #29
    7ec8:	4307      	orrs	r7, r0
    7eca:	2080      	movs	r0, #128	; 0x80
    7ecc:	08e4      	lsrs	r4, r4, #3
    7ece:	0300      	lsls	r0, r0, #12
    7ed0:	4204      	tst	r4, r0
    7ed2:	d0e1      	beq.n	7e98 <__aeabi_dsub+0x558>
    7ed4:	08cb      	lsrs	r3, r1, #3
    7ed6:	4203      	tst	r3, r0
    7ed8:	d1de      	bne.n	7e98 <__aeabi_dsub+0x558>
    7eda:	08d7      	lsrs	r7, r2, #3
    7edc:	0749      	lsls	r1, r1, #29
    7ede:	430f      	orrs	r7, r1
    7ee0:	001c      	movs	r4, r3
    7ee2:	e7d9      	b.n	7e98 <__aeabi_dsub+0x558>
    7ee4:	2100      	movs	r1, #0
    7ee6:	e771      	b.n	7dcc <__aeabi_dsub+0x48c>
    7ee8:	2500      	movs	r5, #0
    7eea:	2700      	movs	r7, #0
    7eec:	e5e9      	b.n	7ac2 <__aeabi_dsub+0x182>
    7eee:	002e      	movs	r6, r5
    7ef0:	0027      	movs	r7, r4
    7ef2:	3e20      	subs	r6, #32
    7ef4:	40f7      	lsrs	r7, r6
    7ef6:	2d20      	cmp	r5, #32
    7ef8:	d02f      	beq.n	7f5a <__aeabi_dsub+0x61a>
    7efa:	2640      	movs	r6, #64	; 0x40
    7efc:	1b75      	subs	r5, r6, r5
    7efe:	40ac      	lsls	r4, r5
    7f00:	4650      	mov	r0, sl
    7f02:	4320      	orrs	r0, r4
    7f04:	1e44      	subs	r4, r0, #1
    7f06:	41a0      	sbcs	r0, r4
    7f08:	2400      	movs	r4, #0
    7f0a:	4338      	orrs	r0, r7
    7f0c:	e6dc      	b.n	7cc8 <__aeabi_dsub+0x388>
    7f0e:	2480      	movs	r4, #128	; 0x80
    7f10:	2500      	movs	r5, #0
    7f12:	0324      	lsls	r4, r4, #12
    7f14:	4e13      	ldr	r6, [pc, #76]	; (7f64 <__aeabi_dsub+0x624>)
    7f16:	2700      	movs	r7, #0
    7f18:	e5d3      	b.n	7ac2 <__aeabi_dsub+0x182>
    7f1a:	4650      	mov	r0, sl
    7f1c:	4320      	orrs	r0, r4
    7f1e:	0007      	movs	r7, r0
    7f20:	1e78      	subs	r0, r7, #1
    7f22:	4187      	sbcs	r7, r0
    7f24:	2400      	movs	r4, #0
    7f26:	18bf      	adds	r7, r7, r2
    7f28:	e760      	b.n	7dec <__aeabi_dsub+0x4ac>
    7f2a:	000c      	movs	r4, r1
    7f2c:	0017      	movs	r7, r2
    7f2e:	e58d      	b.n	7a4c <__aeabi_dsub+0x10c>
    7f30:	000c      	movs	r4, r1
    7f32:	0017      	movs	r7, r2
    7f34:	4e0b      	ldr	r6, [pc, #44]	; (7f64 <__aeabi_dsub+0x624>)
    7f36:	e589      	b.n	7a4c <__aeabi_dsub+0x10c>
    7f38:	001e      	movs	r6, r3
    7f3a:	0027      	movs	r7, r4
    7f3c:	3e20      	subs	r6, #32
    7f3e:	40f7      	lsrs	r7, r6
    7f40:	2b20      	cmp	r3, #32
    7f42:	d00c      	beq.n	7f5e <__aeabi_dsub+0x61e>
    7f44:	2640      	movs	r6, #64	; 0x40
    7f46:	1af3      	subs	r3, r6, r3
    7f48:	409c      	lsls	r4, r3
    7f4a:	4650      	mov	r0, sl
    7f4c:	4320      	orrs	r0, r4
    7f4e:	1e44      	subs	r4, r0, #1
    7f50:	41a0      	sbcs	r0, r4
    7f52:	4307      	orrs	r7, r0
    7f54:	2400      	movs	r4, #0
    7f56:	18bf      	adds	r7, r7, r2
    7f58:	e748      	b.n	7dec <__aeabi_dsub+0x4ac>
    7f5a:	2400      	movs	r4, #0
    7f5c:	e7d0      	b.n	7f00 <__aeabi_dsub+0x5c0>
    7f5e:	2400      	movs	r4, #0
    7f60:	e7f3      	b.n	7f4a <__aeabi_dsub+0x60a>
    7f62:	46c0      	nop			; (mov r8, r8)
    7f64:	000007ff 	.word	0x000007ff
    7f68:	ff7fffff 	.word	0xff7fffff

00007f6c <__aeabi_d2iz>:
    7f6c:	b530      	push	{r4, r5, lr}
    7f6e:	4d13      	ldr	r5, [pc, #76]	; (7fbc <__aeabi_d2iz+0x50>)
    7f70:	030a      	lsls	r2, r1, #12
    7f72:	004b      	lsls	r3, r1, #1
    7f74:	0b12      	lsrs	r2, r2, #12
    7f76:	0d5b      	lsrs	r3, r3, #21
    7f78:	0fc9      	lsrs	r1, r1, #31
    7f7a:	2400      	movs	r4, #0
    7f7c:	42ab      	cmp	r3, r5
    7f7e:	dd10      	ble.n	7fa2 <__aeabi_d2iz+0x36>
    7f80:	4c0f      	ldr	r4, [pc, #60]	; (7fc0 <__aeabi_d2iz+0x54>)
    7f82:	42a3      	cmp	r3, r4
    7f84:	dc0f      	bgt.n	7fa6 <__aeabi_d2iz+0x3a>
    7f86:	2480      	movs	r4, #128	; 0x80
    7f88:	4d0e      	ldr	r5, [pc, #56]	; (7fc4 <__aeabi_d2iz+0x58>)
    7f8a:	0364      	lsls	r4, r4, #13
    7f8c:	4322      	orrs	r2, r4
    7f8e:	1aed      	subs	r5, r5, r3
    7f90:	2d1f      	cmp	r5, #31
    7f92:	dd0b      	ble.n	7fac <__aeabi_d2iz+0x40>
    7f94:	480c      	ldr	r0, [pc, #48]	; (7fc8 <__aeabi_d2iz+0x5c>)
    7f96:	1ac3      	subs	r3, r0, r3
    7f98:	40da      	lsrs	r2, r3
    7f9a:	4254      	negs	r4, r2
    7f9c:	2900      	cmp	r1, #0
    7f9e:	d100      	bne.n	7fa2 <__aeabi_d2iz+0x36>
    7fa0:	0014      	movs	r4, r2
    7fa2:	0020      	movs	r0, r4
    7fa4:	bd30      	pop	{r4, r5, pc}
    7fa6:	4b09      	ldr	r3, [pc, #36]	; (7fcc <__aeabi_d2iz+0x60>)
    7fa8:	18cc      	adds	r4, r1, r3
    7faa:	e7fa      	b.n	7fa2 <__aeabi_d2iz+0x36>
    7fac:	4c08      	ldr	r4, [pc, #32]	; (7fd0 <__aeabi_d2iz+0x64>)
    7fae:	40e8      	lsrs	r0, r5
    7fb0:	46a4      	mov	ip, r4
    7fb2:	4463      	add	r3, ip
    7fb4:	409a      	lsls	r2, r3
    7fb6:	4302      	orrs	r2, r0
    7fb8:	e7ef      	b.n	7f9a <__aeabi_d2iz+0x2e>
    7fba:	46c0      	nop			; (mov r8, r8)
    7fbc:	000003fe 	.word	0x000003fe
    7fc0:	0000041d 	.word	0x0000041d
    7fc4:	00000433 	.word	0x00000433
    7fc8:	00000413 	.word	0x00000413
    7fcc:	7fffffff 	.word	0x7fffffff
    7fd0:	fffffbed 	.word	0xfffffbed

00007fd4 <__aeabi_ui2d>:
    7fd4:	b510      	push	{r4, lr}
    7fd6:	1e04      	subs	r4, r0, #0
    7fd8:	d028      	beq.n	802c <__aeabi_ui2d+0x58>
    7fda:	f000 f833 	bl	8044 <__clzsi2>
    7fde:	4b15      	ldr	r3, [pc, #84]	; (8034 <__aeabi_ui2d+0x60>)
    7fe0:	4a15      	ldr	r2, [pc, #84]	; (8038 <__aeabi_ui2d+0x64>)
    7fe2:	1a1b      	subs	r3, r3, r0
    7fe4:	1ad2      	subs	r2, r2, r3
    7fe6:	2a1f      	cmp	r2, #31
    7fe8:	dd15      	ble.n	8016 <__aeabi_ui2d+0x42>
    7fea:	4a14      	ldr	r2, [pc, #80]	; (803c <__aeabi_ui2d+0x68>)
    7fec:	1ad2      	subs	r2, r2, r3
    7fee:	4094      	lsls	r4, r2
    7ff0:	2200      	movs	r2, #0
    7ff2:	0324      	lsls	r4, r4, #12
    7ff4:	055b      	lsls	r3, r3, #21
    7ff6:	0b24      	lsrs	r4, r4, #12
    7ff8:	0d5b      	lsrs	r3, r3, #21
    7ffa:	2100      	movs	r1, #0
    7ffc:	0010      	movs	r0, r2
    7ffe:	0324      	lsls	r4, r4, #12
    8000:	0d0a      	lsrs	r2, r1, #20
    8002:	0b24      	lsrs	r4, r4, #12
    8004:	0512      	lsls	r2, r2, #20
    8006:	4322      	orrs	r2, r4
    8008:	4c0d      	ldr	r4, [pc, #52]	; (8040 <__aeabi_ui2d+0x6c>)
    800a:	051b      	lsls	r3, r3, #20
    800c:	4022      	ands	r2, r4
    800e:	4313      	orrs	r3, r2
    8010:	005b      	lsls	r3, r3, #1
    8012:	0859      	lsrs	r1, r3, #1
    8014:	bd10      	pop	{r4, pc}
    8016:	0021      	movs	r1, r4
    8018:	4091      	lsls	r1, r2
    801a:	000a      	movs	r2, r1
    801c:	210b      	movs	r1, #11
    801e:	1a08      	subs	r0, r1, r0
    8020:	40c4      	lsrs	r4, r0
    8022:	055b      	lsls	r3, r3, #21
    8024:	0324      	lsls	r4, r4, #12
    8026:	0b24      	lsrs	r4, r4, #12
    8028:	0d5b      	lsrs	r3, r3, #21
    802a:	e7e6      	b.n	7ffa <__aeabi_ui2d+0x26>
    802c:	2300      	movs	r3, #0
    802e:	2400      	movs	r4, #0
    8030:	2200      	movs	r2, #0
    8032:	e7e2      	b.n	7ffa <__aeabi_ui2d+0x26>
    8034:	0000041e 	.word	0x0000041e
    8038:	00000433 	.word	0x00000433
    803c:	00000413 	.word	0x00000413
    8040:	800fffff 	.word	0x800fffff

00008044 <__clzsi2>:
    8044:	211c      	movs	r1, #28
    8046:	2301      	movs	r3, #1
    8048:	041b      	lsls	r3, r3, #16
    804a:	4298      	cmp	r0, r3
    804c:	d301      	bcc.n	8052 <__clzsi2+0xe>
    804e:	0c00      	lsrs	r0, r0, #16
    8050:	3910      	subs	r1, #16
    8052:	0a1b      	lsrs	r3, r3, #8
    8054:	4298      	cmp	r0, r3
    8056:	d301      	bcc.n	805c <__clzsi2+0x18>
    8058:	0a00      	lsrs	r0, r0, #8
    805a:	3908      	subs	r1, #8
    805c:	091b      	lsrs	r3, r3, #4
    805e:	4298      	cmp	r0, r3
    8060:	d301      	bcc.n	8066 <__clzsi2+0x22>
    8062:	0900      	lsrs	r0, r0, #4
    8064:	3904      	subs	r1, #4
    8066:	a202      	add	r2, pc, #8	; (adr r2, 8070 <__clzsi2+0x2c>)
    8068:	5c10      	ldrb	r0, [r2, r0]
    806a:	1840      	adds	r0, r0, r1
    806c:	4770      	bx	lr
    806e:	46c0      	nop			; (mov r8, r8)
    8070:	02020304 	.word	0x02020304
    8074:	01010101 	.word	0x01010101
	...

00008080 <__libc_init_array>:
    8080:	b570      	push	{r4, r5, r6, lr}
    8082:	2600      	movs	r6, #0
    8084:	4d0c      	ldr	r5, [pc, #48]	; (80b8 <__libc_init_array+0x38>)
    8086:	4c0d      	ldr	r4, [pc, #52]	; (80bc <__libc_init_array+0x3c>)
    8088:	1b64      	subs	r4, r4, r5
    808a:	10a4      	asrs	r4, r4, #2
    808c:	42a6      	cmp	r6, r4
    808e:	d109      	bne.n	80a4 <__libc_init_array+0x24>
    8090:	2600      	movs	r6, #0
    8092:	f002 f8c5 	bl	a220 <_init>
    8096:	4d0a      	ldr	r5, [pc, #40]	; (80c0 <__libc_init_array+0x40>)
    8098:	4c0a      	ldr	r4, [pc, #40]	; (80c4 <__libc_init_array+0x44>)
    809a:	1b64      	subs	r4, r4, r5
    809c:	10a4      	asrs	r4, r4, #2
    809e:	42a6      	cmp	r6, r4
    80a0:	d105      	bne.n	80ae <__libc_init_array+0x2e>
    80a2:	bd70      	pop	{r4, r5, r6, pc}
    80a4:	00b3      	lsls	r3, r6, #2
    80a6:	58eb      	ldr	r3, [r5, r3]
    80a8:	4798      	blx	r3
    80aa:	3601      	adds	r6, #1
    80ac:	e7ee      	b.n	808c <__libc_init_array+0xc>
    80ae:	00b3      	lsls	r3, r6, #2
    80b0:	58eb      	ldr	r3, [r5, r3]
    80b2:	4798      	blx	r3
    80b4:	3601      	adds	r6, #1
    80b6:	e7f2      	b.n	809e <__libc_init_array+0x1e>
    80b8:	0000a22c 	.word	0x0000a22c
    80bc:	0000a22c 	.word	0x0000a22c
    80c0:	0000a22c 	.word	0x0000a22c
    80c4:	0000a230 	.word	0x0000a230

000080c8 <memcpy>:
    80c8:	2300      	movs	r3, #0
    80ca:	b510      	push	{r4, lr}
    80cc:	429a      	cmp	r2, r3
    80ce:	d100      	bne.n	80d2 <memcpy+0xa>
    80d0:	bd10      	pop	{r4, pc}
    80d2:	5ccc      	ldrb	r4, [r1, r3]
    80d4:	54c4      	strb	r4, [r0, r3]
    80d6:	3301      	adds	r3, #1
    80d8:	e7f8      	b.n	80cc <memcpy+0x4>

000080da <memset>:
    80da:	0003      	movs	r3, r0
    80dc:	1882      	adds	r2, r0, r2
    80de:	4293      	cmp	r3, r2
    80e0:	d100      	bne.n	80e4 <memset+0xa>
    80e2:	4770      	bx	lr
    80e4:	7019      	strb	r1, [r3, #0]
    80e6:	3301      	adds	r3, #1
    80e8:	e7f9      	b.n	80de <memset+0x4>
	...

000080ec <iprintf>:
    80ec:	b40f      	push	{r0, r1, r2, r3}
    80ee:	4b0b      	ldr	r3, [pc, #44]	; (811c <iprintf+0x30>)
    80f0:	b513      	push	{r0, r1, r4, lr}
    80f2:	681c      	ldr	r4, [r3, #0]
    80f4:	2c00      	cmp	r4, #0
    80f6:	d005      	beq.n	8104 <iprintf+0x18>
    80f8:	69a3      	ldr	r3, [r4, #24]
    80fa:	2b00      	cmp	r3, #0
    80fc:	d102      	bne.n	8104 <iprintf+0x18>
    80fe:	0020      	movs	r0, r4
    8100:	f000 fb14 	bl	872c <__sinit>
    8104:	ab05      	add	r3, sp, #20
    8106:	9a04      	ldr	r2, [sp, #16]
    8108:	68a1      	ldr	r1, [r4, #8]
    810a:	0020      	movs	r0, r4
    810c:	9301      	str	r3, [sp, #4]
    810e:	f000 fe4f 	bl	8db0 <_vfiprintf_r>
    8112:	bc16      	pop	{r1, r2, r4}
    8114:	bc08      	pop	{r3}
    8116:	b004      	add	sp, #16
    8118:	4718      	bx	r3
    811a:	46c0      	nop			; (mov r8, r8)
    811c:	20000030 	.word	0x20000030

00008120 <_puts_r>:
    8120:	b570      	push	{r4, r5, r6, lr}
    8122:	0005      	movs	r5, r0
    8124:	000e      	movs	r6, r1
    8126:	2800      	cmp	r0, #0
    8128:	d004      	beq.n	8134 <_puts_r+0x14>
    812a:	6983      	ldr	r3, [r0, #24]
    812c:	2b00      	cmp	r3, #0
    812e:	d101      	bne.n	8134 <_puts_r+0x14>
    8130:	f000 fafc 	bl	872c <__sinit>
    8134:	69ab      	ldr	r3, [r5, #24]
    8136:	68ac      	ldr	r4, [r5, #8]
    8138:	2b00      	cmp	r3, #0
    813a:	d102      	bne.n	8142 <_puts_r+0x22>
    813c:	0028      	movs	r0, r5
    813e:	f000 faf5 	bl	872c <__sinit>
    8142:	4b24      	ldr	r3, [pc, #144]	; (81d4 <_puts_r+0xb4>)
    8144:	429c      	cmp	r4, r3
    8146:	d10f      	bne.n	8168 <_puts_r+0x48>
    8148:	686c      	ldr	r4, [r5, #4]
    814a:	89a3      	ldrh	r3, [r4, #12]
    814c:	071b      	lsls	r3, r3, #28
    814e:	d502      	bpl.n	8156 <_puts_r+0x36>
    8150:	6923      	ldr	r3, [r4, #16]
    8152:	2b00      	cmp	r3, #0
    8154:	d120      	bne.n	8198 <_puts_r+0x78>
    8156:	0021      	movs	r1, r4
    8158:	0028      	movs	r0, r5
    815a:	f000 f979 	bl	8450 <__swsetup_r>
    815e:	2800      	cmp	r0, #0
    8160:	d01a      	beq.n	8198 <_puts_r+0x78>
    8162:	2001      	movs	r0, #1
    8164:	4240      	negs	r0, r0
    8166:	bd70      	pop	{r4, r5, r6, pc}
    8168:	4b1b      	ldr	r3, [pc, #108]	; (81d8 <_puts_r+0xb8>)
    816a:	429c      	cmp	r4, r3
    816c:	d101      	bne.n	8172 <_puts_r+0x52>
    816e:	68ac      	ldr	r4, [r5, #8]
    8170:	e7eb      	b.n	814a <_puts_r+0x2a>
    8172:	4b1a      	ldr	r3, [pc, #104]	; (81dc <_puts_r+0xbc>)
    8174:	429c      	cmp	r4, r3
    8176:	d1e8      	bne.n	814a <_puts_r+0x2a>
    8178:	68ec      	ldr	r4, [r5, #12]
    817a:	e7e6      	b.n	814a <_puts_r+0x2a>
    817c:	3b01      	subs	r3, #1
    817e:	3601      	adds	r6, #1
    8180:	60a3      	str	r3, [r4, #8]
    8182:	2b00      	cmp	r3, #0
    8184:	da04      	bge.n	8190 <_puts_r+0x70>
    8186:	69a2      	ldr	r2, [r4, #24]
    8188:	4293      	cmp	r3, r2
    818a:	db16      	blt.n	81ba <_puts_r+0x9a>
    818c:	290a      	cmp	r1, #10
    818e:	d014      	beq.n	81ba <_puts_r+0x9a>
    8190:	6823      	ldr	r3, [r4, #0]
    8192:	1c5a      	adds	r2, r3, #1
    8194:	6022      	str	r2, [r4, #0]
    8196:	7019      	strb	r1, [r3, #0]
    8198:	7831      	ldrb	r1, [r6, #0]
    819a:	68a3      	ldr	r3, [r4, #8]
    819c:	2900      	cmp	r1, #0
    819e:	d1ed      	bne.n	817c <_puts_r+0x5c>
    81a0:	3b01      	subs	r3, #1
    81a2:	60a3      	str	r3, [r4, #8]
    81a4:	2b00      	cmp	r3, #0
    81a6:	da0f      	bge.n	81c8 <_puts_r+0xa8>
    81a8:	0022      	movs	r2, r4
    81aa:	310a      	adds	r1, #10
    81ac:	0028      	movs	r0, r5
    81ae:	f000 f8f9 	bl	83a4 <__swbuf_r>
    81b2:	1c43      	adds	r3, r0, #1
    81b4:	d0d5      	beq.n	8162 <_puts_r+0x42>
    81b6:	200a      	movs	r0, #10
    81b8:	e7d5      	b.n	8166 <_puts_r+0x46>
    81ba:	0022      	movs	r2, r4
    81bc:	0028      	movs	r0, r5
    81be:	f000 f8f1 	bl	83a4 <__swbuf_r>
    81c2:	1c43      	adds	r3, r0, #1
    81c4:	d1e8      	bne.n	8198 <_puts_r+0x78>
    81c6:	e7cc      	b.n	8162 <_puts_r+0x42>
    81c8:	200a      	movs	r0, #10
    81ca:	6823      	ldr	r3, [r4, #0]
    81cc:	1c5a      	adds	r2, r3, #1
    81ce:	6022      	str	r2, [r4, #0]
    81d0:	7018      	strb	r0, [r3, #0]
    81d2:	e7c8      	b.n	8166 <_puts_r+0x46>
    81d4:	0000a1ac 	.word	0x0000a1ac
    81d8:	0000a1cc 	.word	0x0000a1cc
    81dc:	0000a18c 	.word	0x0000a18c

000081e0 <puts>:
    81e0:	b510      	push	{r4, lr}
    81e2:	4b03      	ldr	r3, [pc, #12]	; (81f0 <puts+0x10>)
    81e4:	0001      	movs	r1, r0
    81e6:	6818      	ldr	r0, [r3, #0]
    81e8:	f7ff ff9a 	bl	8120 <_puts_r>
    81ec:	bd10      	pop	{r4, pc}
    81ee:	46c0      	nop			; (mov r8, r8)
    81f0:	20000030 	.word	0x20000030

000081f4 <setbuf>:
    81f4:	424a      	negs	r2, r1
    81f6:	414a      	adcs	r2, r1
    81f8:	2380      	movs	r3, #128	; 0x80
    81fa:	b510      	push	{r4, lr}
    81fc:	0052      	lsls	r2, r2, #1
    81fe:	00db      	lsls	r3, r3, #3
    8200:	f000 f802 	bl	8208 <setvbuf>
    8204:	bd10      	pop	{r4, pc}
	...

00008208 <setvbuf>:
    8208:	b5f0      	push	{r4, r5, r6, r7, lr}
    820a:	001d      	movs	r5, r3
    820c:	4b4f      	ldr	r3, [pc, #316]	; (834c <setvbuf+0x144>)
    820e:	b085      	sub	sp, #20
    8210:	681e      	ldr	r6, [r3, #0]
    8212:	0004      	movs	r4, r0
    8214:	000f      	movs	r7, r1
    8216:	9200      	str	r2, [sp, #0]
    8218:	2e00      	cmp	r6, #0
    821a:	d005      	beq.n	8228 <setvbuf+0x20>
    821c:	69b3      	ldr	r3, [r6, #24]
    821e:	2b00      	cmp	r3, #0
    8220:	d102      	bne.n	8228 <setvbuf+0x20>
    8222:	0030      	movs	r0, r6
    8224:	f000 fa82 	bl	872c <__sinit>
    8228:	4b49      	ldr	r3, [pc, #292]	; (8350 <setvbuf+0x148>)
    822a:	429c      	cmp	r4, r3
    822c:	d150      	bne.n	82d0 <setvbuf+0xc8>
    822e:	6874      	ldr	r4, [r6, #4]
    8230:	9b00      	ldr	r3, [sp, #0]
    8232:	2b02      	cmp	r3, #2
    8234:	d005      	beq.n	8242 <setvbuf+0x3a>
    8236:	2b01      	cmp	r3, #1
    8238:	d900      	bls.n	823c <setvbuf+0x34>
    823a:	e084      	b.n	8346 <setvbuf+0x13e>
    823c:	2d00      	cmp	r5, #0
    823e:	da00      	bge.n	8242 <setvbuf+0x3a>
    8240:	e081      	b.n	8346 <setvbuf+0x13e>
    8242:	0021      	movs	r1, r4
    8244:	0030      	movs	r0, r6
    8246:	f000 fa03 	bl	8650 <_fflush_r>
    824a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    824c:	2900      	cmp	r1, #0
    824e:	d008      	beq.n	8262 <setvbuf+0x5a>
    8250:	0023      	movs	r3, r4
    8252:	3344      	adds	r3, #68	; 0x44
    8254:	4299      	cmp	r1, r3
    8256:	d002      	beq.n	825e <setvbuf+0x56>
    8258:	0030      	movs	r0, r6
    825a:	f000 fb73 	bl	8944 <_free_r>
    825e:	2300      	movs	r3, #0
    8260:	6363      	str	r3, [r4, #52]	; 0x34
    8262:	2300      	movs	r3, #0
    8264:	61a3      	str	r3, [r4, #24]
    8266:	6063      	str	r3, [r4, #4]
    8268:	89a3      	ldrh	r3, [r4, #12]
    826a:	061b      	lsls	r3, r3, #24
    826c:	d503      	bpl.n	8276 <setvbuf+0x6e>
    826e:	6921      	ldr	r1, [r4, #16]
    8270:	0030      	movs	r0, r6
    8272:	f000 fb67 	bl	8944 <_free_r>
    8276:	89a3      	ldrh	r3, [r4, #12]
    8278:	4a36      	ldr	r2, [pc, #216]	; (8354 <setvbuf+0x14c>)
    827a:	4013      	ands	r3, r2
    827c:	81a3      	strh	r3, [r4, #12]
    827e:	9b00      	ldr	r3, [sp, #0]
    8280:	2b02      	cmp	r3, #2
    8282:	d05a      	beq.n	833a <setvbuf+0x132>
    8284:	ab03      	add	r3, sp, #12
    8286:	aa02      	add	r2, sp, #8
    8288:	0021      	movs	r1, r4
    828a:	0030      	movs	r0, r6
    828c:	f000 fae4 	bl	8858 <__swhatbuf_r>
    8290:	89a3      	ldrh	r3, [r4, #12]
    8292:	4318      	orrs	r0, r3
    8294:	81a0      	strh	r0, [r4, #12]
    8296:	2d00      	cmp	r5, #0
    8298:	d124      	bne.n	82e4 <setvbuf+0xdc>
    829a:	9d02      	ldr	r5, [sp, #8]
    829c:	0028      	movs	r0, r5
    829e:	f000 fb47 	bl	8930 <malloc>
    82a2:	9501      	str	r5, [sp, #4]
    82a4:	1e07      	subs	r7, r0, #0
    82a6:	d142      	bne.n	832e <setvbuf+0x126>
    82a8:	9b02      	ldr	r3, [sp, #8]
    82aa:	9301      	str	r3, [sp, #4]
    82ac:	42ab      	cmp	r3, r5
    82ae:	d139      	bne.n	8324 <setvbuf+0x11c>
    82b0:	2001      	movs	r0, #1
    82b2:	4240      	negs	r0, r0
    82b4:	2302      	movs	r3, #2
    82b6:	89a2      	ldrh	r2, [r4, #12]
    82b8:	4313      	orrs	r3, r2
    82ba:	81a3      	strh	r3, [r4, #12]
    82bc:	2300      	movs	r3, #0
    82be:	60a3      	str	r3, [r4, #8]
    82c0:	0023      	movs	r3, r4
    82c2:	3347      	adds	r3, #71	; 0x47
    82c4:	6023      	str	r3, [r4, #0]
    82c6:	6123      	str	r3, [r4, #16]
    82c8:	2301      	movs	r3, #1
    82ca:	6163      	str	r3, [r4, #20]
    82cc:	b005      	add	sp, #20
    82ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82d0:	4b21      	ldr	r3, [pc, #132]	; (8358 <setvbuf+0x150>)
    82d2:	429c      	cmp	r4, r3
    82d4:	d101      	bne.n	82da <setvbuf+0xd2>
    82d6:	68b4      	ldr	r4, [r6, #8]
    82d8:	e7aa      	b.n	8230 <setvbuf+0x28>
    82da:	4b20      	ldr	r3, [pc, #128]	; (835c <setvbuf+0x154>)
    82dc:	429c      	cmp	r4, r3
    82de:	d1a7      	bne.n	8230 <setvbuf+0x28>
    82e0:	68f4      	ldr	r4, [r6, #12]
    82e2:	e7a5      	b.n	8230 <setvbuf+0x28>
    82e4:	2f00      	cmp	r7, #0
    82e6:	d0d9      	beq.n	829c <setvbuf+0x94>
    82e8:	69b3      	ldr	r3, [r6, #24]
    82ea:	2b00      	cmp	r3, #0
    82ec:	d102      	bne.n	82f4 <setvbuf+0xec>
    82ee:	0030      	movs	r0, r6
    82f0:	f000 fa1c 	bl	872c <__sinit>
    82f4:	9b00      	ldr	r3, [sp, #0]
    82f6:	2b01      	cmp	r3, #1
    82f8:	d103      	bne.n	8302 <setvbuf+0xfa>
    82fa:	89a3      	ldrh	r3, [r4, #12]
    82fc:	9a00      	ldr	r2, [sp, #0]
    82fe:	431a      	orrs	r2, r3
    8300:	81a2      	strh	r2, [r4, #12]
    8302:	2008      	movs	r0, #8
    8304:	89a3      	ldrh	r3, [r4, #12]
    8306:	6027      	str	r7, [r4, #0]
    8308:	6127      	str	r7, [r4, #16]
    830a:	6165      	str	r5, [r4, #20]
    830c:	4018      	ands	r0, r3
    830e:	d018      	beq.n	8342 <setvbuf+0x13a>
    8310:	2001      	movs	r0, #1
    8312:	4018      	ands	r0, r3
    8314:	2300      	movs	r3, #0
    8316:	4298      	cmp	r0, r3
    8318:	d011      	beq.n	833e <setvbuf+0x136>
    831a:	426d      	negs	r5, r5
    831c:	60a3      	str	r3, [r4, #8]
    831e:	61a5      	str	r5, [r4, #24]
    8320:	0018      	movs	r0, r3
    8322:	e7d3      	b.n	82cc <setvbuf+0xc4>
    8324:	9801      	ldr	r0, [sp, #4]
    8326:	f000 fb03 	bl	8930 <malloc>
    832a:	1e07      	subs	r7, r0, #0
    832c:	d0c0      	beq.n	82b0 <setvbuf+0xa8>
    832e:	2380      	movs	r3, #128	; 0x80
    8330:	89a2      	ldrh	r2, [r4, #12]
    8332:	9d01      	ldr	r5, [sp, #4]
    8334:	4313      	orrs	r3, r2
    8336:	81a3      	strh	r3, [r4, #12]
    8338:	e7d6      	b.n	82e8 <setvbuf+0xe0>
    833a:	2000      	movs	r0, #0
    833c:	e7ba      	b.n	82b4 <setvbuf+0xac>
    833e:	60a5      	str	r5, [r4, #8]
    8340:	e7c4      	b.n	82cc <setvbuf+0xc4>
    8342:	60a0      	str	r0, [r4, #8]
    8344:	e7c2      	b.n	82cc <setvbuf+0xc4>
    8346:	2001      	movs	r0, #1
    8348:	4240      	negs	r0, r0
    834a:	e7bf      	b.n	82cc <setvbuf+0xc4>
    834c:	20000030 	.word	0x20000030
    8350:	0000a1ac 	.word	0x0000a1ac
    8354:	fffff35c 	.word	0xfffff35c
    8358:	0000a1cc 	.word	0x0000a1cc
    835c:	0000a18c 	.word	0x0000a18c

00008360 <siprintf>:
    8360:	b40e      	push	{r1, r2, r3}
    8362:	b510      	push	{r4, lr}
    8364:	b09d      	sub	sp, #116	; 0x74
    8366:	a902      	add	r1, sp, #8
    8368:	9002      	str	r0, [sp, #8]
    836a:	6108      	str	r0, [r1, #16]
    836c:	480b      	ldr	r0, [pc, #44]	; (839c <siprintf+0x3c>)
    836e:	2482      	movs	r4, #130	; 0x82
    8370:	6088      	str	r0, [r1, #8]
    8372:	6148      	str	r0, [r1, #20]
    8374:	2001      	movs	r0, #1
    8376:	4240      	negs	r0, r0
    8378:	ab1f      	add	r3, sp, #124	; 0x7c
    837a:	81c8      	strh	r0, [r1, #14]
    837c:	4808      	ldr	r0, [pc, #32]	; (83a0 <siprintf+0x40>)
    837e:	cb04      	ldmia	r3!, {r2}
    8380:	00a4      	lsls	r4, r4, #2
    8382:	6800      	ldr	r0, [r0, #0]
    8384:	9301      	str	r3, [sp, #4]
    8386:	818c      	strh	r4, [r1, #12]
    8388:	f000 fbe6 	bl	8b58 <_svfiprintf_r>
    838c:	2300      	movs	r3, #0
    838e:	9a02      	ldr	r2, [sp, #8]
    8390:	7013      	strb	r3, [r2, #0]
    8392:	b01d      	add	sp, #116	; 0x74
    8394:	bc10      	pop	{r4}
    8396:	bc08      	pop	{r3}
    8398:	b003      	add	sp, #12
    839a:	4718      	bx	r3
    839c:	7fffffff 	.word	0x7fffffff
    83a0:	20000030 	.word	0x20000030

000083a4 <__swbuf_r>:
    83a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83a6:	0005      	movs	r5, r0
    83a8:	000e      	movs	r6, r1
    83aa:	0014      	movs	r4, r2
    83ac:	2800      	cmp	r0, #0
    83ae:	d004      	beq.n	83ba <__swbuf_r+0x16>
    83b0:	6983      	ldr	r3, [r0, #24]
    83b2:	2b00      	cmp	r3, #0
    83b4:	d101      	bne.n	83ba <__swbuf_r+0x16>
    83b6:	f000 f9b9 	bl	872c <__sinit>
    83ba:	4b22      	ldr	r3, [pc, #136]	; (8444 <__swbuf_r+0xa0>)
    83bc:	429c      	cmp	r4, r3
    83be:	d12d      	bne.n	841c <__swbuf_r+0x78>
    83c0:	686c      	ldr	r4, [r5, #4]
    83c2:	69a3      	ldr	r3, [r4, #24]
    83c4:	60a3      	str	r3, [r4, #8]
    83c6:	89a3      	ldrh	r3, [r4, #12]
    83c8:	071b      	lsls	r3, r3, #28
    83ca:	d531      	bpl.n	8430 <__swbuf_r+0x8c>
    83cc:	6923      	ldr	r3, [r4, #16]
    83ce:	2b00      	cmp	r3, #0
    83d0:	d02e      	beq.n	8430 <__swbuf_r+0x8c>
    83d2:	6823      	ldr	r3, [r4, #0]
    83d4:	6922      	ldr	r2, [r4, #16]
    83d6:	b2f7      	uxtb	r7, r6
    83d8:	1a98      	subs	r0, r3, r2
    83da:	6963      	ldr	r3, [r4, #20]
    83dc:	b2f6      	uxtb	r6, r6
    83de:	4298      	cmp	r0, r3
    83e0:	db05      	blt.n	83ee <__swbuf_r+0x4a>
    83e2:	0021      	movs	r1, r4
    83e4:	0028      	movs	r0, r5
    83e6:	f000 f933 	bl	8650 <_fflush_r>
    83ea:	2800      	cmp	r0, #0
    83ec:	d126      	bne.n	843c <__swbuf_r+0x98>
    83ee:	68a3      	ldr	r3, [r4, #8]
    83f0:	3001      	adds	r0, #1
    83f2:	3b01      	subs	r3, #1
    83f4:	60a3      	str	r3, [r4, #8]
    83f6:	6823      	ldr	r3, [r4, #0]
    83f8:	1c5a      	adds	r2, r3, #1
    83fa:	6022      	str	r2, [r4, #0]
    83fc:	701f      	strb	r7, [r3, #0]
    83fe:	6963      	ldr	r3, [r4, #20]
    8400:	4298      	cmp	r0, r3
    8402:	d004      	beq.n	840e <__swbuf_r+0x6a>
    8404:	89a3      	ldrh	r3, [r4, #12]
    8406:	07db      	lsls	r3, r3, #31
    8408:	d51a      	bpl.n	8440 <__swbuf_r+0x9c>
    840a:	2e0a      	cmp	r6, #10
    840c:	d118      	bne.n	8440 <__swbuf_r+0x9c>
    840e:	0021      	movs	r1, r4
    8410:	0028      	movs	r0, r5
    8412:	f000 f91d 	bl	8650 <_fflush_r>
    8416:	2800      	cmp	r0, #0
    8418:	d012      	beq.n	8440 <__swbuf_r+0x9c>
    841a:	e00f      	b.n	843c <__swbuf_r+0x98>
    841c:	4b0a      	ldr	r3, [pc, #40]	; (8448 <__swbuf_r+0xa4>)
    841e:	429c      	cmp	r4, r3
    8420:	d101      	bne.n	8426 <__swbuf_r+0x82>
    8422:	68ac      	ldr	r4, [r5, #8]
    8424:	e7cd      	b.n	83c2 <__swbuf_r+0x1e>
    8426:	4b09      	ldr	r3, [pc, #36]	; (844c <__swbuf_r+0xa8>)
    8428:	429c      	cmp	r4, r3
    842a:	d1ca      	bne.n	83c2 <__swbuf_r+0x1e>
    842c:	68ec      	ldr	r4, [r5, #12]
    842e:	e7c8      	b.n	83c2 <__swbuf_r+0x1e>
    8430:	0021      	movs	r1, r4
    8432:	0028      	movs	r0, r5
    8434:	f000 f80c 	bl	8450 <__swsetup_r>
    8438:	2800      	cmp	r0, #0
    843a:	d0ca      	beq.n	83d2 <__swbuf_r+0x2e>
    843c:	2601      	movs	r6, #1
    843e:	4276      	negs	r6, r6
    8440:	0030      	movs	r0, r6
    8442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8444:	0000a1ac 	.word	0x0000a1ac
    8448:	0000a1cc 	.word	0x0000a1cc
    844c:	0000a18c 	.word	0x0000a18c

00008450 <__swsetup_r>:
    8450:	4b36      	ldr	r3, [pc, #216]	; (852c <__swsetup_r+0xdc>)
    8452:	b570      	push	{r4, r5, r6, lr}
    8454:	681d      	ldr	r5, [r3, #0]
    8456:	0006      	movs	r6, r0
    8458:	000c      	movs	r4, r1
    845a:	2d00      	cmp	r5, #0
    845c:	d005      	beq.n	846a <__swsetup_r+0x1a>
    845e:	69ab      	ldr	r3, [r5, #24]
    8460:	2b00      	cmp	r3, #0
    8462:	d102      	bne.n	846a <__swsetup_r+0x1a>
    8464:	0028      	movs	r0, r5
    8466:	f000 f961 	bl	872c <__sinit>
    846a:	4b31      	ldr	r3, [pc, #196]	; (8530 <__swsetup_r+0xe0>)
    846c:	429c      	cmp	r4, r3
    846e:	d10f      	bne.n	8490 <__swsetup_r+0x40>
    8470:	686c      	ldr	r4, [r5, #4]
    8472:	230c      	movs	r3, #12
    8474:	5ee2      	ldrsh	r2, [r4, r3]
    8476:	b293      	uxth	r3, r2
    8478:	0719      	lsls	r1, r3, #28
    847a:	d42d      	bmi.n	84d8 <__swsetup_r+0x88>
    847c:	06d9      	lsls	r1, r3, #27
    847e:	d411      	bmi.n	84a4 <__swsetup_r+0x54>
    8480:	2309      	movs	r3, #9
    8482:	2001      	movs	r0, #1
    8484:	6033      	str	r3, [r6, #0]
    8486:	3337      	adds	r3, #55	; 0x37
    8488:	4313      	orrs	r3, r2
    848a:	81a3      	strh	r3, [r4, #12]
    848c:	4240      	negs	r0, r0
    848e:	bd70      	pop	{r4, r5, r6, pc}
    8490:	4b28      	ldr	r3, [pc, #160]	; (8534 <__swsetup_r+0xe4>)
    8492:	429c      	cmp	r4, r3
    8494:	d101      	bne.n	849a <__swsetup_r+0x4a>
    8496:	68ac      	ldr	r4, [r5, #8]
    8498:	e7eb      	b.n	8472 <__swsetup_r+0x22>
    849a:	4b27      	ldr	r3, [pc, #156]	; (8538 <__swsetup_r+0xe8>)
    849c:	429c      	cmp	r4, r3
    849e:	d1e8      	bne.n	8472 <__swsetup_r+0x22>
    84a0:	68ec      	ldr	r4, [r5, #12]
    84a2:	e7e6      	b.n	8472 <__swsetup_r+0x22>
    84a4:	075b      	lsls	r3, r3, #29
    84a6:	d513      	bpl.n	84d0 <__swsetup_r+0x80>
    84a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    84aa:	2900      	cmp	r1, #0
    84ac:	d008      	beq.n	84c0 <__swsetup_r+0x70>
    84ae:	0023      	movs	r3, r4
    84b0:	3344      	adds	r3, #68	; 0x44
    84b2:	4299      	cmp	r1, r3
    84b4:	d002      	beq.n	84bc <__swsetup_r+0x6c>
    84b6:	0030      	movs	r0, r6
    84b8:	f000 fa44 	bl	8944 <_free_r>
    84bc:	2300      	movs	r3, #0
    84be:	6363      	str	r3, [r4, #52]	; 0x34
    84c0:	2224      	movs	r2, #36	; 0x24
    84c2:	89a3      	ldrh	r3, [r4, #12]
    84c4:	4393      	bics	r3, r2
    84c6:	81a3      	strh	r3, [r4, #12]
    84c8:	2300      	movs	r3, #0
    84ca:	6063      	str	r3, [r4, #4]
    84cc:	6923      	ldr	r3, [r4, #16]
    84ce:	6023      	str	r3, [r4, #0]
    84d0:	2308      	movs	r3, #8
    84d2:	89a2      	ldrh	r2, [r4, #12]
    84d4:	4313      	orrs	r3, r2
    84d6:	81a3      	strh	r3, [r4, #12]
    84d8:	6923      	ldr	r3, [r4, #16]
    84da:	2b00      	cmp	r3, #0
    84dc:	d10b      	bne.n	84f6 <__swsetup_r+0xa6>
    84de:	21a0      	movs	r1, #160	; 0xa0
    84e0:	2280      	movs	r2, #128	; 0x80
    84e2:	89a3      	ldrh	r3, [r4, #12]
    84e4:	0089      	lsls	r1, r1, #2
    84e6:	0092      	lsls	r2, r2, #2
    84e8:	400b      	ands	r3, r1
    84ea:	4293      	cmp	r3, r2
    84ec:	d003      	beq.n	84f6 <__swsetup_r+0xa6>
    84ee:	0021      	movs	r1, r4
    84f0:	0030      	movs	r0, r6
    84f2:	f000 f9d9 	bl	88a8 <__smakebuf_r>
    84f6:	2301      	movs	r3, #1
    84f8:	89a2      	ldrh	r2, [r4, #12]
    84fa:	4013      	ands	r3, r2
    84fc:	d011      	beq.n	8522 <__swsetup_r+0xd2>
    84fe:	2300      	movs	r3, #0
    8500:	60a3      	str	r3, [r4, #8]
    8502:	6963      	ldr	r3, [r4, #20]
    8504:	425b      	negs	r3, r3
    8506:	61a3      	str	r3, [r4, #24]
    8508:	2000      	movs	r0, #0
    850a:	6923      	ldr	r3, [r4, #16]
    850c:	4283      	cmp	r3, r0
    850e:	d1be      	bne.n	848e <__swsetup_r+0x3e>
    8510:	230c      	movs	r3, #12
    8512:	5ee2      	ldrsh	r2, [r4, r3]
    8514:	0613      	lsls	r3, r2, #24
    8516:	d5ba      	bpl.n	848e <__swsetup_r+0x3e>
    8518:	2340      	movs	r3, #64	; 0x40
    851a:	4313      	orrs	r3, r2
    851c:	81a3      	strh	r3, [r4, #12]
    851e:	3801      	subs	r0, #1
    8520:	e7b5      	b.n	848e <__swsetup_r+0x3e>
    8522:	0792      	lsls	r2, r2, #30
    8524:	d400      	bmi.n	8528 <__swsetup_r+0xd8>
    8526:	6963      	ldr	r3, [r4, #20]
    8528:	60a3      	str	r3, [r4, #8]
    852a:	e7ed      	b.n	8508 <__swsetup_r+0xb8>
    852c:	20000030 	.word	0x20000030
    8530:	0000a1ac 	.word	0x0000a1ac
    8534:	0000a1cc 	.word	0x0000a1cc
    8538:	0000a18c 	.word	0x0000a18c

0000853c <__sflush_r>:
    853c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    853e:	898a      	ldrh	r2, [r1, #12]
    8540:	0005      	movs	r5, r0
    8542:	000c      	movs	r4, r1
    8544:	0713      	lsls	r3, r2, #28
    8546:	d460      	bmi.n	860a <__sflush_r+0xce>
    8548:	684b      	ldr	r3, [r1, #4]
    854a:	2b00      	cmp	r3, #0
    854c:	dc04      	bgt.n	8558 <__sflush_r+0x1c>
    854e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    8550:	2b00      	cmp	r3, #0
    8552:	dc01      	bgt.n	8558 <__sflush_r+0x1c>
    8554:	2000      	movs	r0, #0
    8556:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8558:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    855a:	2f00      	cmp	r7, #0
    855c:	d0fa      	beq.n	8554 <__sflush_r+0x18>
    855e:	2300      	movs	r3, #0
    8560:	682e      	ldr	r6, [r5, #0]
    8562:	602b      	str	r3, [r5, #0]
    8564:	2380      	movs	r3, #128	; 0x80
    8566:	015b      	lsls	r3, r3, #5
    8568:	401a      	ands	r2, r3
    856a:	d034      	beq.n	85d6 <__sflush_r+0x9a>
    856c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    856e:	89a3      	ldrh	r3, [r4, #12]
    8570:	075b      	lsls	r3, r3, #29
    8572:	d506      	bpl.n	8582 <__sflush_r+0x46>
    8574:	6863      	ldr	r3, [r4, #4]
    8576:	1ac0      	subs	r0, r0, r3
    8578:	6b63      	ldr	r3, [r4, #52]	; 0x34
    857a:	2b00      	cmp	r3, #0
    857c:	d001      	beq.n	8582 <__sflush_r+0x46>
    857e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8580:	1ac0      	subs	r0, r0, r3
    8582:	0002      	movs	r2, r0
    8584:	6a21      	ldr	r1, [r4, #32]
    8586:	2300      	movs	r3, #0
    8588:	0028      	movs	r0, r5
    858a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    858c:	47b8      	blx	r7
    858e:	89a1      	ldrh	r1, [r4, #12]
    8590:	1c43      	adds	r3, r0, #1
    8592:	d106      	bne.n	85a2 <__sflush_r+0x66>
    8594:	682b      	ldr	r3, [r5, #0]
    8596:	2b1d      	cmp	r3, #29
    8598:	d831      	bhi.n	85fe <__sflush_r+0xc2>
    859a:	4a2c      	ldr	r2, [pc, #176]	; (864c <__sflush_r+0x110>)
    859c:	40da      	lsrs	r2, r3
    859e:	07d3      	lsls	r3, r2, #31
    85a0:	d52d      	bpl.n	85fe <__sflush_r+0xc2>
    85a2:	2300      	movs	r3, #0
    85a4:	6063      	str	r3, [r4, #4]
    85a6:	6923      	ldr	r3, [r4, #16]
    85a8:	6023      	str	r3, [r4, #0]
    85aa:	04cb      	lsls	r3, r1, #19
    85ac:	d505      	bpl.n	85ba <__sflush_r+0x7e>
    85ae:	1c43      	adds	r3, r0, #1
    85b0:	d102      	bne.n	85b8 <__sflush_r+0x7c>
    85b2:	682b      	ldr	r3, [r5, #0]
    85b4:	2b00      	cmp	r3, #0
    85b6:	d100      	bne.n	85ba <__sflush_r+0x7e>
    85b8:	6560      	str	r0, [r4, #84]	; 0x54
    85ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    85bc:	602e      	str	r6, [r5, #0]
    85be:	2900      	cmp	r1, #0
    85c0:	d0c8      	beq.n	8554 <__sflush_r+0x18>
    85c2:	0023      	movs	r3, r4
    85c4:	3344      	adds	r3, #68	; 0x44
    85c6:	4299      	cmp	r1, r3
    85c8:	d002      	beq.n	85d0 <__sflush_r+0x94>
    85ca:	0028      	movs	r0, r5
    85cc:	f000 f9ba 	bl	8944 <_free_r>
    85d0:	2000      	movs	r0, #0
    85d2:	6360      	str	r0, [r4, #52]	; 0x34
    85d4:	e7bf      	b.n	8556 <__sflush_r+0x1a>
    85d6:	2301      	movs	r3, #1
    85d8:	6a21      	ldr	r1, [r4, #32]
    85da:	0028      	movs	r0, r5
    85dc:	47b8      	blx	r7
    85de:	1c43      	adds	r3, r0, #1
    85e0:	d1c5      	bne.n	856e <__sflush_r+0x32>
    85e2:	682b      	ldr	r3, [r5, #0]
    85e4:	2b00      	cmp	r3, #0
    85e6:	d0c2      	beq.n	856e <__sflush_r+0x32>
    85e8:	2b1d      	cmp	r3, #29
    85ea:	d001      	beq.n	85f0 <__sflush_r+0xb4>
    85ec:	2b16      	cmp	r3, #22
    85ee:	d101      	bne.n	85f4 <__sflush_r+0xb8>
    85f0:	602e      	str	r6, [r5, #0]
    85f2:	e7af      	b.n	8554 <__sflush_r+0x18>
    85f4:	2340      	movs	r3, #64	; 0x40
    85f6:	89a2      	ldrh	r2, [r4, #12]
    85f8:	4313      	orrs	r3, r2
    85fa:	81a3      	strh	r3, [r4, #12]
    85fc:	e7ab      	b.n	8556 <__sflush_r+0x1a>
    85fe:	2340      	movs	r3, #64	; 0x40
    8600:	430b      	orrs	r3, r1
    8602:	2001      	movs	r0, #1
    8604:	81a3      	strh	r3, [r4, #12]
    8606:	4240      	negs	r0, r0
    8608:	e7a5      	b.n	8556 <__sflush_r+0x1a>
    860a:	690f      	ldr	r7, [r1, #16]
    860c:	2f00      	cmp	r7, #0
    860e:	d0a1      	beq.n	8554 <__sflush_r+0x18>
    8610:	680b      	ldr	r3, [r1, #0]
    8612:	600f      	str	r7, [r1, #0]
    8614:	1bdb      	subs	r3, r3, r7
    8616:	9301      	str	r3, [sp, #4]
    8618:	2300      	movs	r3, #0
    861a:	0792      	lsls	r2, r2, #30
    861c:	d100      	bne.n	8620 <__sflush_r+0xe4>
    861e:	694b      	ldr	r3, [r1, #20]
    8620:	60a3      	str	r3, [r4, #8]
    8622:	9b01      	ldr	r3, [sp, #4]
    8624:	2b00      	cmp	r3, #0
    8626:	dc00      	bgt.n	862a <__sflush_r+0xee>
    8628:	e794      	b.n	8554 <__sflush_r+0x18>
    862a:	9b01      	ldr	r3, [sp, #4]
    862c:	003a      	movs	r2, r7
    862e:	6a21      	ldr	r1, [r4, #32]
    8630:	0028      	movs	r0, r5
    8632:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    8634:	47b0      	blx	r6
    8636:	2800      	cmp	r0, #0
    8638:	dc03      	bgt.n	8642 <__sflush_r+0x106>
    863a:	2340      	movs	r3, #64	; 0x40
    863c:	89a2      	ldrh	r2, [r4, #12]
    863e:	4313      	orrs	r3, r2
    8640:	e7df      	b.n	8602 <__sflush_r+0xc6>
    8642:	9b01      	ldr	r3, [sp, #4]
    8644:	183f      	adds	r7, r7, r0
    8646:	1a1b      	subs	r3, r3, r0
    8648:	9301      	str	r3, [sp, #4]
    864a:	e7ea      	b.n	8622 <__sflush_r+0xe6>
    864c:	20400001 	.word	0x20400001

00008650 <_fflush_r>:
    8650:	690b      	ldr	r3, [r1, #16]
    8652:	b570      	push	{r4, r5, r6, lr}
    8654:	0005      	movs	r5, r0
    8656:	000c      	movs	r4, r1
    8658:	2b00      	cmp	r3, #0
    865a:	d101      	bne.n	8660 <_fflush_r+0x10>
    865c:	2000      	movs	r0, #0
    865e:	bd70      	pop	{r4, r5, r6, pc}
    8660:	2800      	cmp	r0, #0
    8662:	d004      	beq.n	866e <_fflush_r+0x1e>
    8664:	6983      	ldr	r3, [r0, #24]
    8666:	2b00      	cmp	r3, #0
    8668:	d101      	bne.n	866e <_fflush_r+0x1e>
    866a:	f000 f85f 	bl	872c <__sinit>
    866e:	4b0b      	ldr	r3, [pc, #44]	; (869c <_fflush_r+0x4c>)
    8670:	429c      	cmp	r4, r3
    8672:	d109      	bne.n	8688 <_fflush_r+0x38>
    8674:	686c      	ldr	r4, [r5, #4]
    8676:	220c      	movs	r2, #12
    8678:	5ea3      	ldrsh	r3, [r4, r2]
    867a:	2b00      	cmp	r3, #0
    867c:	d0ee      	beq.n	865c <_fflush_r+0xc>
    867e:	0021      	movs	r1, r4
    8680:	0028      	movs	r0, r5
    8682:	f7ff ff5b 	bl	853c <__sflush_r>
    8686:	e7ea      	b.n	865e <_fflush_r+0xe>
    8688:	4b05      	ldr	r3, [pc, #20]	; (86a0 <_fflush_r+0x50>)
    868a:	429c      	cmp	r4, r3
    868c:	d101      	bne.n	8692 <_fflush_r+0x42>
    868e:	68ac      	ldr	r4, [r5, #8]
    8690:	e7f1      	b.n	8676 <_fflush_r+0x26>
    8692:	4b04      	ldr	r3, [pc, #16]	; (86a4 <_fflush_r+0x54>)
    8694:	429c      	cmp	r4, r3
    8696:	d1ee      	bne.n	8676 <_fflush_r+0x26>
    8698:	68ec      	ldr	r4, [r5, #12]
    869a:	e7ec      	b.n	8676 <_fflush_r+0x26>
    869c:	0000a1ac 	.word	0x0000a1ac
    86a0:	0000a1cc 	.word	0x0000a1cc
    86a4:	0000a18c 	.word	0x0000a18c

000086a8 <_cleanup_r>:
    86a8:	b510      	push	{r4, lr}
    86aa:	4902      	ldr	r1, [pc, #8]	; (86b4 <_cleanup_r+0xc>)
    86ac:	f000 f8b2 	bl	8814 <_fwalk_reent>
    86b0:	bd10      	pop	{r4, pc}
    86b2:	46c0      	nop			; (mov r8, r8)
    86b4:	00008651 	.word	0x00008651

000086b8 <std.isra.0>:
    86b8:	2300      	movs	r3, #0
    86ba:	b510      	push	{r4, lr}
    86bc:	0004      	movs	r4, r0
    86be:	6003      	str	r3, [r0, #0]
    86c0:	6043      	str	r3, [r0, #4]
    86c2:	6083      	str	r3, [r0, #8]
    86c4:	8181      	strh	r1, [r0, #12]
    86c6:	6643      	str	r3, [r0, #100]	; 0x64
    86c8:	81c2      	strh	r2, [r0, #14]
    86ca:	6103      	str	r3, [r0, #16]
    86cc:	6143      	str	r3, [r0, #20]
    86ce:	6183      	str	r3, [r0, #24]
    86d0:	0019      	movs	r1, r3
    86d2:	2208      	movs	r2, #8
    86d4:	305c      	adds	r0, #92	; 0x5c
    86d6:	f7ff fd00 	bl	80da <memset>
    86da:	4b05      	ldr	r3, [pc, #20]	; (86f0 <std.isra.0+0x38>)
    86dc:	6224      	str	r4, [r4, #32]
    86de:	6263      	str	r3, [r4, #36]	; 0x24
    86e0:	4b04      	ldr	r3, [pc, #16]	; (86f4 <std.isra.0+0x3c>)
    86e2:	62a3      	str	r3, [r4, #40]	; 0x28
    86e4:	4b04      	ldr	r3, [pc, #16]	; (86f8 <std.isra.0+0x40>)
    86e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    86e8:	4b04      	ldr	r3, [pc, #16]	; (86fc <std.isra.0+0x44>)
    86ea:	6323      	str	r3, [r4, #48]	; 0x30
    86ec:	bd10      	pop	{r4, pc}
    86ee:	46c0      	nop			; (mov r8, r8)
    86f0:	0000931d 	.word	0x0000931d
    86f4:	00009345 	.word	0x00009345
    86f8:	0000937d 	.word	0x0000937d
    86fc:	000093a9 	.word	0x000093a9

00008700 <__sfmoreglue>:
    8700:	b570      	push	{r4, r5, r6, lr}
    8702:	2568      	movs	r5, #104	; 0x68
    8704:	1e4a      	subs	r2, r1, #1
    8706:	4355      	muls	r5, r2
    8708:	000e      	movs	r6, r1
    870a:	0029      	movs	r1, r5
    870c:	3174      	adds	r1, #116	; 0x74
    870e:	f000 f963 	bl	89d8 <_malloc_r>
    8712:	1e04      	subs	r4, r0, #0
    8714:	d008      	beq.n	8728 <__sfmoreglue+0x28>
    8716:	2100      	movs	r1, #0
    8718:	002a      	movs	r2, r5
    871a:	6001      	str	r1, [r0, #0]
    871c:	6046      	str	r6, [r0, #4]
    871e:	300c      	adds	r0, #12
    8720:	60a0      	str	r0, [r4, #8]
    8722:	3268      	adds	r2, #104	; 0x68
    8724:	f7ff fcd9 	bl	80da <memset>
    8728:	0020      	movs	r0, r4
    872a:	bd70      	pop	{r4, r5, r6, pc}

0000872c <__sinit>:
    872c:	6983      	ldr	r3, [r0, #24]
    872e:	b513      	push	{r0, r1, r4, lr}
    8730:	0004      	movs	r4, r0
    8732:	2b00      	cmp	r3, #0
    8734:	d128      	bne.n	8788 <__sinit+0x5c>
    8736:	6483      	str	r3, [r0, #72]	; 0x48
    8738:	64c3      	str	r3, [r0, #76]	; 0x4c
    873a:	6503      	str	r3, [r0, #80]	; 0x50
    873c:	4b13      	ldr	r3, [pc, #76]	; (878c <__sinit+0x60>)
    873e:	4a14      	ldr	r2, [pc, #80]	; (8790 <__sinit+0x64>)
    8740:	681b      	ldr	r3, [r3, #0]
    8742:	6282      	str	r2, [r0, #40]	; 0x28
    8744:	9301      	str	r3, [sp, #4]
    8746:	4298      	cmp	r0, r3
    8748:	d101      	bne.n	874e <__sinit+0x22>
    874a:	2301      	movs	r3, #1
    874c:	6183      	str	r3, [r0, #24]
    874e:	0020      	movs	r0, r4
    8750:	f000 f820 	bl	8794 <__sfp>
    8754:	6060      	str	r0, [r4, #4]
    8756:	0020      	movs	r0, r4
    8758:	f000 f81c 	bl	8794 <__sfp>
    875c:	60a0      	str	r0, [r4, #8]
    875e:	0020      	movs	r0, r4
    8760:	f000 f818 	bl	8794 <__sfp>
    8764:	2200      	movs	r2, #0
    8766:	60e0      	str	r0, [r4, #12]
    8768:	2104      	movs	r1, #4
    876a:	6860      	ldr	r0, [r4, #4]
    876c:	f7ff ffa4 	bl	86b8 <std.isra.0>
    8770:	2201      	movs	r2, #1
    8772:	2109      	movs	r1, #9
    8774:	68a0      	ldr	r0, [r4, #8]
    8776:	f7ff ff9f 	bl	86b8 <std.isra.0>
    877a:	2202      	movs	r2, #2
    877c:	2112      	movs	r1, #18
    877e:	68e0      	ldr	r0, [r4, #12]
    8780:	f7ff ff9a 	bl	86b8 <std.isra.0>
    8784:	2301      	movs	r3, #1
    8786:	61a3      	str	r3, [r4, #24]
    8788:	bd13      	pop	{r0, r1, r4, pc}
    878a:	46c0      	nop			; (mov r8, r8)
    878c:	0000a188 	.word	0x0000a188
    8790:	000086a9 	.word	0x000086a9

00008794 <__sfp>:
    8794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8796:	4b1e      	ldr	r3, [pc, #120]	; (8810 <__sfp+0x7c>)
    8798:	0007      	movs	r7, r0
    879a:	681e      	ldr	r6, [r3, #0]
    879c:	69b3      	ldr	r3, [r6, #24]
    879e:	2b00      	cmp	r3, #0
    87a0:	d102      	bne.n	87a8 <__sfp+0x14>
    87a2:	0030      	movs	r0, r6
    87a4:	f7ff ffc2 	bl	872c <__sinit>
    87a8:	3648      	adds	r6, #72	; 0x48
    87aa:	68b4      	ldr	r4, [r6, #8]
    87ac:	6873      	ldr	r3, [r6, #4]
    87ae:	3b01      	subs	r3, #1
    87b0:	d504      	bpl.n	87bc <__sfp+0x28>
    87b2:	6833      	ldr	r3, [r6, #0]
    87b4:	2b00      	cmp	r3, #0
    87b6:	d007      	beq.n	87c8 <__sfp+0x34>
    87b8:	6836      	ldr	r6, [r6, #0]
    87ba:	e7f6      	b.n	87aa <__sfp+0x16>
    87bc:	220c      	movs	r2, #12
    87be:	5ea5      	ldrsh	r5, [r4, r2]
    87c0:	2d00      	cmp	r5, #0
    87c2:	d00d      	beq.n	87e0 <__sfp+0x4c>
    87c4:	3468      	adds	r4, #104	; 0x68
    87c6:	e7f2      	b.n	87ae <__sfp+0x1a>
    87c8:	2104      	movs	r1, #4
    87ca:	0038      	movs	r0, r7
    87cc:	f7ff ff98 	bl	8700 <__sfmoreglue>
    87d0:	6030      	str	r0, [r6, #0]
    87d2:	2800      	cmp	r0, #0
    87d4:	d1f0      	bne.n	87b8 <__sfp+0x24>
    87d6:	230c      	movs	r3, #12
    87d8:	0004      	movs	r4, r0
    87da:	603b      	str	r3, [r7, #0]
    87dc:	0020      	movs	r0, r4
    87de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    87e0:	2301      	movs	r3, #1
    87e2:	0020      	movs	r0, r4
    87e4:	425b      	negs	r3, r3
    87e6:	81e3      	strh	r3, [r4, #14]
    87e8:	3302      	adds	r3, #2
    87ea:	81a3      	strh	r3, [r4, #12]
    87ec:	6665      	str	r5, [r4, #100]	; 0x64
    87ee:	6025      	str	r5, [r4, #0]
    87f0:	60a5      	str	r5, [r4, #8]
    87f2:	6065      	str	r5, [r4, #4]
    87f4:	6125      	str	r5, [r4, #16]
    87f6:	6165      	str	r5, [r4, #20]
    87f8:	61a5      	str	r5, [r4, #24]
    87fa:	2208      	movs	r2, #8
    87fc:	0029      	movs	r1, r5
    87fe:	305c      	adds	r0, #92	; 0x5c
    8800:	f7ff fc6b 	bl	80da <memset>
    8804:	6365      	str	r5, [r4, #52]	; 0x34
    8806:	63a5      	str	r5, [r4, #56]	; 0x38
    8808:	64a5      	str	r5, [r4, #72]	; 0x48
    880a:	64e5      	str	r5, [r4, #76]	; 0x4c
    880c:	e7e6      	b.n	87dc <__sfp+0x48>
    880e:	46c0      	nop			; (mov r8, r8)
    8810:	0000a188 	.word	0x0000a188

00008814 <_fwalk_reent>:
    8814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8816:	0004      	movs	r4, r0
    8818:	0007      	movs	r7, r0
    881a:	2600      	movs	r6, #0
    881c:	9101      	str	r1, [sp, #4]
    881e:	3448      	adds	r4, #72	; 0x48
    8820:	2c00      	cmp	r4, #0
    8822:	d101      	bne.n	8828 <_fwalk_reent+0x14>
    8824:	0030      	movs	r0, r6
    8826:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8828:	6863      	ldr	r3, [r4, #4]
    882a:	68a5      	ldr	r5, [r4, #8]
    882c:	9300      	str	r3, [sp, #0]
    882e:	9b00      	ldr	r3, [sp, #0]
    8830:	3b01      	subs	r3, #1
    8832:	9300      	str	r3, [sp, #0]
    8834:	d501      	bpl.n	883a <_fwalk_reent+0x26>
    8836:	6824      	ldr	r4, [r4, #0]
    8838:	e7f2      	b.n	8820 <_fwalk_reent+0xc>
    883a:	89ab      	ldrh	r3, [r5, #12]
    883c:	2b01      	cmp	r3, #1
    883e:	d908      	bls.n	8852 <_fwalk_reent+0x3e>
    8840:	220e      	movs	r2, #14
    8842:	5eab      	ldrsh	r3, [r5, r2]
    8844:	3301      	adds	r3, #1
    8846:	d004      	beq.n	8852 <_fwalk_reent+0x3e>
    8848:	0029      	movs	r1, r5
    884a:	0038      	movs	r0, r7
    884c:	9b01      	ldr	r3, [sp, #4]
    884e:	4798      	blx	r3
    8850:	4306      	orrs	r6, r0
    8852:	3568      	adds	r5, #104	; 0x68
    8854:	e7eb      	b.n	882e <_fwalk_reent+0x1a>
	...

00008858 <__swhatbuf_r>:
    8858:	b570      	push	{r4, r5, r6, lr}
    885a:	000e      	movs	r6, r1
    885c:	001d      	movs	r5, r3
    885e:	230e      	movs	r3, #14
    8860:	5ec9      	ldrsh	r1, [r1, r3]
    8862:	b090      	sub	sp, #64	; 0x40
    8864:	0014      	movs	r4, r2
    8866:	2900      	cmp	r1, #0
    8868:	da07      	bge.n	887a <__swhatbuf_r+0x22>
    886a:	2300      	movs	r3, #0
    886c:	602b      	str	r3, [r5, #0]
    886e:	89b3      	ldrh	r3, [r6, #12]
    8870:	061b      	lsls	r3, r3, #24
    8872:	d411      	bmi.n	8898 <__swhatbuf_r+0x40>
    8874:	2380      	movs	r3, #128	; 0x80
    8876:	00db      	lsls	r3, r3, #3
    8878:	e00f      	b.n	889a <__swhatbuf_r+0x42>
    887a:	aa01      	add	r2, sp, #4
    887c:	f000 fdc0 	bl	9400 <_fstat_r>
    8880:	2800      	cmp	r0, #0
    8882:	dbf2      	blt.n	886a <__swhatbuf_r+0x12>
    8884:	22f0      	movs	r2, #240	; 0xf0
    8886:	9b02      	ldr	r3, [sp, #8]
    8888:	0212      	lsls	r2, r2, #8
    888a:	4013      	ands	r3, r2
    888c:	4a05      	ldr	r2, [pc, #20]	; (88a4 <__swhatbuf_r+0x4c>)
    888e:	189b      	adds	r3, r3, r2
    8890:	425a      	negs	r2, r3
    8892:	4153      	adcs	r3, r2
    8894:	602b      	str	r3, [r5, #0]
    8896:	e7ed      	b.n	8874 <__swhatbuf_r+0x1c>
    8898:	2340      	movs	r3, #64	; 0x40
    889a:	2000      	movs	r0, #0
    889c:	6023      	str	r3, [r4, #0]
    889e:	b010      	add	sp, #64	; 0x40
    88a0:	bd70      	pop	{r4, r5, r6, pc}
    88a2:	46c0      	nop			; (mov r8, r8)
    88a4:	ffffe000 	.word	0xffffe000

000088a8 <__smakebuf_r>:
    88a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    88aa:	2602      	movs	r6, #2
    88ac:	898b      	ldrh	r3, [r1, #12]
    88ae:	0005      	movs	r5, r0
    88b0:	000c      	movs	r4, r1
    88b2:	4233      	tst	r3, r6
    88b4:	d006      	beq.n	88c4 <__smakebuf_r+0x1c>
    88b6:	0023      	movs	r3, r4
    88b8:	3347      	adds	r3, #71	; 0x47
    88ba:	6023      	str	r3, [r4, #0]
    88bc:	6123      	str	r3, [r4, #16]
    88be:	2301      	movs	r3, #1
    88c0:	6163      	str	r3, [r4, #20]
    88c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    88c4:	ab01      	add	r3, sp, #4
    88c6:	466a      	mov	r2, sp
    88c8:	f7ff ffc6 	bl	8858 <__swhatbuf_r>
    88cc:	9900      	ldr	r1, [sp, #0]
    88ce:	0007      	movs	r7, r0
    88d0:	0028      	movs	r0, r5
    88d2:	f000 f881 	bl	89d8 <_malloc_r>
    88d6:	2800      	cmp	r0, #0
    88d8:	d108      	bne.n	88ec <__smakebuf_r+0x44>
    88da:	220c      	movs	r2, #12
    88dc:	5ea3      	ldrsh	r3, [r4, r2]
    88de:	059a      	lsls	r2, r3, #22
    88e0:	d4ef      	bmi.n	88c2 <__smakebuf_r+0x1a>
    88e2:	2203      	movs	r2, #3
    88e4:	4393      	bics	r3, r2
    88e6:	431e      	orrs	r6, r3
    88e8:	81a6      	strh	r6, [r4, #12]
    88ea:	e7e4      	b.n	88b6 <__smakebuf_r+0xe>
    88ec:	4b0f      	ldr	r3, [pc, #60]	; (892c <__smakebuf_r+0x84>)
    88ee:	62ab      	str	r3, [r5, #40]	; 0x28
    88f0:	2380      	movs	r3, #128	; 0x80
    88f2:	89a2      	ldrh	r2, [r4, #12]
    88f4:	6020      	str	r0, [r4, #0]
    88f6:	4313      	orrs	r3, r2
    88f8:	81a3      	strh	r3, [r4, #12]
    88fa:	9b00      	ldr	r3, [sp, #0]
    88fc:	6120      	str	r0, [r4, #16]
    88fe:	6163      	str	r3, [r4, #20]
    8900:	9b01      	ldr	r3, [sp, #4]
    8902:	2b00      	cmp	r3, #0
    8904:	d00d      	beq.n	8922 <__smakebuf_r+0x7a>
    8906:	230e      	movs	r3, #14
    8908:	5ee1      	ldrsh	r1, [r4, r3]
    890a:	0028      	movs	r0, r5
    890c:	f000 fd8a 	bl	9424 <_isatty_r>
    8910:	2800      	cmp	r0, #0
    8912:	d006      	beq.n	8922 <__smakebuf_r+0x7a>
    8914:	2203      	movs	r2, #3
    8916:	89a3      	ldrh	r3, [r4, #12]
    8918:	4393      	bics	r3, r2
    891a:	001a      	movs	r2, r3
    891c:	2301      	movs	r3, #1
    891e:	4313      	orrs	r3, r2
    8920:	81a3      	strh	r3, [r4, #12]
    8922:	89a0      	ldrh	r0, [r4, #12]
    8924:	4338      	orrs	r0, r7
    8926:	81a0      	strh	r0, [r4, #12]
    8928:	e7cb      	b.n	88c2 <__smakebuf_r+0x1a>
    892a:	46c0      	nop			; (mov r8, r8)
    892c:	000086a9 	.word	0x000086a9

00008930 <malloc>:
    8930:	b510      	push	{r4, lr}
    8932:	4b03      	ldr	r3, [pc, #12]	; (8940 <malloc+0x10>)
    8934:	0001      	movs	r1, r0
    8936:	6818      	ldr	r0, [r3, #0]
    8938:	f000 f84e 	bl	89d8 <_malloc_r>
    893c:	bd10      	pop	{r4, pc}
    893e:	46c0      	nop			; (mov r8, r8)
    8940:	20000030 	.word	0x20000030

00008944 <_free_r>:
    8944:	b570      	push	{r4, r5, r6, lr}
    8946:	0005      	movs	r5, r0
    8948:	2900      	cmp	r1, #0
    894a:	d010      	beq.n	896e <_free_r+0x2a>
    894c:	1f0c      	subs	r4, r1, #4
    894e:	6823      	ldr	r3, [r4, #0]
    8950:	2b00      	cmp	r3, #0
    8952:	da00      	bge.n	8956 <_free_r+0x12>
    8954:	18e4      	adds	r4, r4, r3
    8956:	0028      	movs	r0, r5
    8958:	f000 fda7 	bl	94aa <__malloc_lock>
    895c:	4a1d      	ldr	r2, [pc, #116]	; (89d4 <_free_r+0x90>)
    895e:	6813      	ldr	r3, [r2, #0]
    8960:	2b00      	cmp	r3, #0
    8962:	d105      	bne.n	8970 <_free_r+0x2c>
    8964:	6063      	str	r3, [r4, #4]
    8966:	6014      	str	r4, [r2, #0]
    8968:	0028      	movs	r0, r5
    896a:	f000 fd9f 	bl	94ac <__malloc_unlock>
    896e:	bd70      	pop	{r4, r5, r6, pc}
    8970:	42a3      	cmp	r3, r4
    8972:	d909      	bls.n	8988 <_free_r+0x44>
    8974:	6821      	ldr	r1, [r4, #0]
    8976:	1860      	adds	r0, r4, r1
    8978:	4283      	cmp	r3, r0
    897a:	d1f3      	bne.n	8964 <_free_r+0x20>
    897c:	6818      	ldr	r0, [r3, #0]
    897e:	685b      	ldr	r3, [r3, #4]
    8980:	1841      	adds	r1, r0, r1
    8982:	6021      	str	r1, [r4, #0]
    8984:	e7ee      	b.n	8964 <_free_r+0x20>
    8986:	0013      	movs	r3, r2
    8988:	685a      	ldr	r2, [r3, #4]
    898a:	2a00      	cmp	r2, #0
    898c:	d001      	beq.n	8992 <_free_r+0x4e>
    898e:	42a2      	cmp	r2, r4
    8990:	d9f9      	bls.n	8986 <_free_r+0x42>
    8992:	6819      	ldr	r1, [r3, #0]
    8994:	1858      	adds	r0, r3, r1
    8996:	42a0      	cmp	r0, r4
    8998:	d10b      	bne.n	89b2 <_free_r+0x6e>
    899a:	6820      	ldr	r0, [r4, #0]
    899c:	1809      	adds	r1, r1, r0
    899e:	1858      	adds	r0, r3, r1
    89a0:	6019      	str	r1, [r3, #0]
    89a2:	4282      	cmp	r2, r0
    89a4:	d1e0      	bne.n	8968 <_free_r+0x24>
    89a6:	6810      	ldr	r0, [r2, #0]
    89a8:	6852      	ldr	r2, [r2, #4]
    89aa:	1841      	adds	r1, r0, r1
    89ac:	6019      	str	r1, [r3, #0]
    89ae:	605a      	str	r2, [r3, #4]
    89b0:	e7da      	b.n	8968 <_free_r+0x24>
    89b2:	42a0      	cmp	r0, r4
    89b4:	d902      	bls.n	89bc <_free_r+0x78>
    89b6:	230c      	movs	r3, #12
    89b8:	602b      	str	r3, [r5, #0]
    89ba:	e7d5      	b.n	8968 <_free_r+0x24>
    89bc:	6821      	ldr	r1, [r4, #0]
    89be:	1860      	adds	r0, r4, r1
    89c0:	4282      	cmp	r2, r0
    89c2:	d103      	bne.n	89cc <_free_r+0x88>
    89c4:	6810      	ldr	r0, [r2, #0]
    89c6:	6852      	ldr	r2, [r2, #4]
    89c8:	1841      	adds	r1, r0, r1
    89ca:	6021      	str	r1, [r4, #0]
    89cc:	6062      	str	r2, [r4, #4]
    89ce:	605c      	str	r4, [r3, #4]
    89d0:	e7ca      	b.n	8968 <_free_r+0x24>
    89d2:	46c0      	nop			; (mov r8, r8)
    89d4:	20000b08 	.word	0x20000b08

000089d8 <_malloc_r>:
    89d8:	2303      	movs	r3, #3
    89da:	b570      	push	{r4, r5, r6, lr}
    89dc:	1ccd      	adds	r5, r1, #3
    89de:	439d      	bics	r5, r3
    89e0:	3508      	adds	r5, #8
    89e2:	0006      	movs	r6, r0
    89e4:	2d0c      	cmp	r5, #12
    89e6:	d21e      	bcs.n	8a26 <_malloc_r+0x4e>
    89e8:	250c      	movs	r5, #12
    89ea:	42a9      	cmp	r1, r5
    89ec:	d81d      	bhi.n	8a2a <_malloc_r+0x52>
    89ee:	0030      	movs	r0, r6
    89f0:	f000 fd5b 	bl	94aa <__malloc_lock>
    89f4:	4a25      	ldr	r2, [pc, #148]	; (8a8c <_malloc_r+0xb4>)
    89f6:	6814      	ldr	r4, [r2, #0]
    89f8:	0021      	movs	r1, r4
    89fa:	2900      	cmp	r1, #0
    89fc:	d119      	bne.n	8a32 <_malloc_r+0x5a>
    89fe:	4c24      	ldr	r4, [pc, #144]	; (8a90 <_malloc_r+0xb8>)
    8a00:	6823      	ldr	r3, [r4, #0]
    8a02:	2b00      	cmp	r3, #0
    8a04:	d103      	bne.n	8a0e <_malloc_r+0x36>
    8a06:	0030      	movs	r0, r6
    8a08:	f000 fc76 	bl	92f8 <_sbrk_r>
    8a0c:	6020      	str	r0, [r4, #0]
    8a0e:	0029      	movs	r1, r5
    8a10:	0030      	movs	r0, r6
    8a12:	f000 fc71 	bl	92f8 <_sbrk_r>
    8a16:	1c43      	adds	r3, r0, #1
    8a18:	d12c      	bne.n	8a74 <_malloc_r+0x9c>
    8a1a:	230c      	movs	r3, #12
    8a1c:	0030      	movs	r0, r6
    8a1e:	6033      	str	r3, [r6, #0]
    8a20:	f000 fd44 	bl	94ac <__malloc_unlock>
    8a24:	e003      	b.n	8a2e <_malloc_r+0x56>
    8a26:	2d00      	cmp	r5, #0
    8a28:	dadf      	bge.n	89ea <_malloc_r+0x12>
    8a2a:	230c      	movs	r3, #12
    8a2c:	6033      	str	r3, [r6, #0]
    8a2e:	2000      	movs	r0, #0
    8a30:	bd70      	pop	{r4, r5, r6, pc}
    8a32:	680b      	ldr	r3, [r1, #0]
    8a34:	1b5b      	subs	r3, r3, r5
    8a36:	d41a      	bmi.n	8a6e <_malloc_r+0x96>
    8a38:	2b0b      	cmp	r3, #11
    8a3a:	d903      	bls.n	8a44 <_malloc_r+0x6c>
    8a3c:	600b      	str	r3, [r1, #0]
    8a3e:	18cc      	adds	r4, r1, r3
    8a40:	6025      	str	r5, [r4, #0]
    8a42:	e003      	b.n	8a4c <_malloc_r+0x74>
    8a44:	428c      	cmp	r4, r1
    8a46:	d10e      	bne.n	8a66 <_malloc_r+0x8e>
    8a48:	6863      	ldr	r3, [r4, #4]
    8a4a:	6013      	str	r3, [r2, #0]
    8a4c:	0030      	movs	r0, r6
    8a4e:	f000 fd2d 	bl	94ac <__malloc_unlock>
    8a52:	0020      	movs	r0, r4
    8a54:	2207      	movs	r2, #7
    8a56:	300b      	adds	r0, #11
    8a58:	1d23      	adds	r3, r4, #4
    8a5a:	4390      	bics	r0, r2
    8a5c:	1ac3      	subs	r3, r0, r3
    8a5e:	d0e7      	beq.n	8a30 <_malloc_r+0x58>
    8a60:	425a      	negs	r2, r3
    8a62:	50e2      	str	r2, [r4, r3]
    8a64:	e7e4      	b.n	8a30 <_malloc_r+0x58>
    8a66:	684b      	ldr	r3, [r1, #4]
    8a68:	6063      	str	r3, [r4, #4]
    8a6a:	000c      	movs	r4, r1
    8a6c:	e7ee      	b.n	8a4c <_malloc_r+0x74>
    8a6e:	000c      	movs	r4, r1
    8a70:	6849      	ldr	r1, [r1, #4]
    8a72:	e7c2      	b.n	89fa <_malloc_r+0x22>
    8a74:	2303      	movs	r3, #3
    8a76:	1cc4      	adds	r4, r0, #3
    8a78:	439c      	bics	r4, r3
    8a7a:	42a0      	cmp	r0, r4
    8a7c:	d0e0      	beq.n	8a40 <_malloc_r+0x68>
    8a7e:	1a21      	subs	r1, r4, r0
    8a80:	0030      	movs	r0, r6
    8a82:	f000 fc39 	bl	92f8 <_sbrk_r>
    8a86:	1c43      	adds	r3, r0, #1
    8a88:	d1da      	bne.n	8a40 <_malloc_r+0x68>
    8a8a:	e7c6      	b.n	8a1a <_malloc_r+0x42>
    8a8c:	20000b08 	.word	0x20000b08
    8a90:	20000b0c 	.word	0x20000b0c

00008a94 <__ssputs_r>:
    8a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a96:	688e      	ldr	r6, [r1, #8]
    8a98:	b085      	sub	sp, #20
    8a9a:	0007      	movs	r7, r0
    8a9c:	000c      	movs	r4, r1
    8a9e:	9203      	str	r2, [sp, #12]
    8aa0:	9301      	str	r3, [sp, #4]
    8aa2:	429e      	cmp	r6, r3
    8aa4:	d839      	bhi.n	8b1a <__ssputs_r+0x86>
    8aa6:	2390      	movs	r3, #144	; 0x90
    8aa8:	898a      	ldrh	r2, [r1, #12]
    8aaa:	00db      	lsls	r3, r3, #3
    8aac:	421a      	tst	r2, r3
    8aae:	d034      	beq.n	8b1a <__ssputs_r+0x86>
    8ab0:	2503      	movs	r5, #3
    8ab2:	6909      	ldr	r1, [r1, #16]
    8ab4:	6823      	ldr	r3, [r4, #0]
    8ab6:	1a5b      	subs	r3, r3, r1
    8ab8:	9302      	str	r3, [sp, #8]
    8aba:	6963      	ldr	r3, [r4, #20]
    8abc:	9802      	ldr	r0, [sp, #8]
    8abe:	435d      	muls	r5, r3
    8ac0:	0feb      	lsrs	r3, r5, #31
    8ac2:	195d      	adds	r5, r3, r5
    8ac4:	9b01      	ldr	r3, [sp, #4]
    8ac6:	106d      	asrs	r5, r5, #1
    8ac8:	3301      	adds	r3, #1
    8aca:	181b      	adds	r3, r3, r0
    8acc:	42ab      	cmp	r3, r5
    8ace:	d900      	bls.n	8ad2 <__ssputs_r+0x3e>
    8ad0:	001d      	movs	r5, r3
    8ad2:	0553      	lsls	r3, r2, #21
    8ad4:	d532      	bpl.n	8b3c <__ssputs_r+0xa8>
    8ad6:	0029      	movs	r1, r5
    8ad8:	0038      	movs	r0, r7
    8ada:	f7ff ff7d 	bl	89d8 <_malloc_r>
    8ade:	1e06      	subs	r6, r0, #0
    8ae0:	d109      	bne.n	8af6 <__ssputs_r+0x62>
    8ae2:	230c      	movs	r3, #12
    8ae4:	603b      	str	r3, [r7, #0]
    8ae6:	2340      	movs	r3, #64	; 0x40
    8ae8:	2001      	movs	r0, #1
    8aea:	89a2      	ldrh	r2, [r4, #12]
    8aec:	4240      	negs	r0, r0
    8aee:	4313      	orrs	r3, r2
    8af0:	81a3      	strh	r3, [r4, #12]
    8af2:	b005      	add	sp, #20
    8af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8af6:	9a02      	ldr	r2, [sp, #8]
    8af8:	6921      	ldr	r1, [r4, #16]
    8afa:	f7ff fae5 	bl	80c8 <memcpy>
    8afe:	89a3      	ldrh	r3, [r4, #12]
    8b00:	4a14      	ldr	r2, [pc, #80]	; (8b54 <__ssputs_r+0xc0>)
    8b02:	401a      	ands	r2, r3
    8b04:	2380      	movs	r3, #128	; 0x80
    8b06:	4313      	orrs	r3, r2
    8b08:	81a3      	strh	r3, [r4, #12]
    8b0a:	9b02      	ldr	r3, [sp, #8]
    8b0c:	6126      	str	r6, [r4, #16]
    8b0e:	18f6      	adds	r6, r6, r3
    8b10:	6026      	str	r6, [r4, #0]
    8b12:	6165      	str	r5, [r4, #20]
    8b14:	9e01      	ldr	r6, [sp, #4]
    8b16:	1aed      	subs	r5, r5, r3
    8b18:	60a5      	str	r5, [r4, #8]
    8b1a:	9b01      	ldr	r3, [sp, #4]
    8b1c:	42b3      	cmp	r3, r6
    8b1e:	d200      	bcs.n	8b22 <__ssputs_r+0x8e>
    8b20:	001e      	movs	r6, r3
    8b22:	0032      	movs	r2, r6
    8b24:	9903      	ldr	r1, [sp, #12]
    8b26:	6820      	ldr	r0, [r4, #0]
    8b28:	f000 fcad 	bl	9486 <memmove>
    8b2c:	68a3      	ldr	r3, [r4, #8]
    8b2e:	2000      	movs	r0, #0
    8b30:	1b9b      	subs	r3, r3, r6
    8b32:	60a3      	str	r3, [r4, #8]
    8b34:	6823      	ldr	r3, [r4, #0]
    8b36:	199e      	adds	r6, r3, r6
    8b38:	6026      	str	r6, [r4, #0]
    8b3a:	e7da      	b.n	8af2 <__ssputs_r+0x5e>
    8b3c:	002a      	movs	r2, r5
    8b3e:	0038      	movs	r0, r7
    8b40:	f000 fcb5 	bl	94ae <_realloc_r>
    8b44:	1e06      	subs	r6, r0, #0
    8b46:	d1e0      	bne.n	8b0a <__ssputs_r+0x76>
    8b48:	6921      	ldr	r1, [r4, #16]
    8b4a:	0038      	movs	r0, r7
    8b4c:	f7ff fefa 	bl	8944 <_free_r>
    8b50:	e7c7      	b.n	8ae2 <__ssputs_r+0x4e>
    8b52:	46c0      	nop			; (mov r8, r8)
    8b54:	fffffb7f 	.word	0xfffffb7f

00008b58 <_svfiprintf_r>:
    8b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b5a:	b09f      	sub	sp, #124	; 0x7c
    8b5c:	9002      	str	r0, [sp, #8]
    8b5e:	9305      	str	r3, [sp, #20]
    8b60:	898b      	ldrh	r3, [r1, #12]
    8b62:	000f      	movs	r7, r1
    8b64:	0016      	movs	r6, r2
    8b66:	061b      	lsls	r3, r3, #24
    8b68:	d511      	bpl.n	8b8e <_svfiprintf_r+0x36>
    8b6a:	690b      	ldr	r3, [r1, #16]
    8b6c:	2b00      	cmp	r3, #0
    8b6e:	d10e      	bne.n	8b8e <_svfiprintf_r+0x36>
    8b70:	2140      	movs	r1, #64	; 0x40
    8b72:	f7ff ff31 	bl	89d8 <_malloc_r>
    8b76:	6038      	str	r0, [r7, #0]
    8b78:	6138      	str	r0, [r7, #16]
    8b7a:	2800      	cmp	r0, #0
    8b7c:	d105      	bne.n	8b8a <_svfiprintf_r+0x32>
    8b7e:	230c      	movs	r3, #12
    8b80:	9a02      	ldr	r2, [sp, #8]
    8b82:	3801      	subs	r0, #1
    8b84:	6013      	str	r3, [r2, #0]
    8b86:	b01f      	add	sp, #124	; 0x7c
    8b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b8a:	2340      	movs	r3, #64	; 0x40
    8b8c:	617b      	str	r3, [r7, #20]
    8b8e:	2300      	movs	r3, #0
    8b90:	ad06      	add	r5, sp, #24
    8b92:	616b      	str	r3, [r5, #20]
    8b94:	3320      	adds	r3, #32
    8b96:	766b      	strb	r3, [r5, #25]
    8b98:	3310      	adds	r3, #16
    8b9a:	76ab      	strb	r3, [r5, #26]
    8b9c:	0034      	movs	r4, r6
    8b9e:	7823      	ldrb	r3, [r4, #0]
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	d147      	bne.n	8c34 <_svfiprintf_r+0xdc>
    8ba4:	1ba3      	subs	r3, r4, r6
    8ba6:	9304      	str	r3, [sp, #16]
    8ba8:	d00d      	beq.n	8bc6 <_svfiprintf_r+0x6e>
    8baa:	1ba3      	subs	r3, r4, r6
    8bac:	0032      	movs	r2, r6
    8bae:	0039      	movs	r1, r7
    8bb0:	9802      	ldr	r0, [sp, #8]
    8bb2:	f7ff ff6f 	bl	8a94 <__ssputs_r>
    8bb6:	1c43      	adds	r3, r0, #1
    8bb8:	d100      	bne.n	8bbc <_svfiprintf_r+0x64>
    8bba:	e0b5      	b.n	8d28 <_svfiprintf_r+0x1d0>
    8bbc:	696a      	ldr	r2, [r5, #20]
    8bbe:	9b04      	ldr	r3, [sp, #16]
    8bc0:	4694      	mov	ip, r2
    8bc2:	4463      	add	r3, ip
    8bc4:	616b      	str	r3, [r5, #20]
    8bc6:	7823      	ldrb	r3, [r4, #0]
    8bc8:	2b00      	cmp	r3, #0
    8bca:	d100      	bne.n	8bce <_svfiprintf_r+0x76>
    8bcc:	e0ac      	b.n	8d28 <_svfiprintf_r+0x1d0>
    8bce:	2201      	movs	r2, #1
    8bd0:	2300      	movs	r3, #0
    8bd2:	4252      	negs	r2, r2
    8bd4:	606a      	str	r2, [r5, #4]
    8bd6:	a902      	add	r1, sp, #8
    8bd8:	3254      	adds	r2, #84	; 0x54
    8bda:	1852      	adds	r2, r2, r1
    8bdc:	3401      	adds	r4, #1
    8bde:	602b      	str	r3, [r5, #0]
    8be0:	60eb      	str	r3, [r5, #12]
    8be2:	60ab      	str	r3, [r5, #8]
    8be4:	7013      	strb	r3, [r2, #0]
    8be6:	65ab      	str	r3, [r5, #88]	; 0x58
    8be8:	4e58      	ldr	r6, [pc, #352]	; (8d4c <_svfiprintf_r+0x1f4>)
    8bea:	2205      	movs	r2, #5
    8bec:	7821      	ldrb	r1, [r4, #0]
    8bee:	0030      	movs	r0, r6
    8bf0:	f000 fc3e 	bl	9470 <memchr>
    8bf4:	1c62      	adds	r2, r4, #1
    8bf6:	2800      	cmp	r0, #0
    8bf8:	d120      	bne.n	8c3c <_svfiprintf_r+0xe4>
    8bfa:	6829      	ldr	r1, [r5, #0]
    8bfc:	06cb      	lsls	r3, r1, #27
    8bfe:	d504      	bpl.n	8c0a <_svfiprintf_r+0xb2>
    8c00:	2353      	movs	r3, #83	; 0x53
    8c02:	ae02      	add	r6, sp, #8
    8c04:	3020      	adds	r0, #32
    8c06:	199b      	adds	r3, r3, r6
    8c08:	7018      	strb	r0, [r3, #0]
    8c0a:	070b      	lsls	r3, r1, #28
    8c0c:	d504      	bpl.n	8c18 <_svfiprintf_r+0xc0>
    8c0e:	2353      	movs	r3, #83	; 0x53
    8c10:	202b      	movs	r0, #43	; 0x2b
    8c12:	ae02      	add	r6, sp, #8
    8c14:	199b      	adds	r3, r3, r6
    8c16:	7018      	strb	r0, [r3, #0]
    8c18:	7823      	ldrb	r3, [r4, #0]
    8c1a:	2b2a      	cmp	r3, #42	; 0x2a
    8c1c:	d016      	beq.n	8c4c <_svfiprintf_r+0xf4>
    8c1e:	2000      	movs	r0, #0
    8c20:	210a      	movs	r1, #10
    8c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c24:	7822      	ldrb	r2, [r4, #0]
    8c26:	3a30      	subs	r2, #48	; 0x30
    8c28:	2a09      	cmp	r2, #9
    8c2a:	d955      	bls.n	8cd8 <_svfiprintf_r+0x180>
    8c2c:	2800      	cmp	r0, #0
    8c2e:	d015      	beq.n	8c5c <_svfiprintf_r+0x104>
    8c30:	9309      	str	r3, [sp, #36]	; 0x24
    8c32:	e013      	b.n	8c5c <_svfiprintf_r+0x104>
    8c34:	2b25      	cmp	r3, #37	; 0x25
    8c36:	d0b5      	beq.n	8ba4 <_svfiprintf_r+0x4c>
    8c38:	3401      	adds	r4, #1
    8c3a:	e7b0      	b.n	8b9e <_svfiprintf_r+0x46>
    8c3c:	2301      	movs	r3, #1
    8c3e:	1b80      	subs	r0, r0, r6
    8c40:	4083      	lsls	r3, r0
    8c42:	6829      	ldr	r1, [r5, #0]
    8c44:	0014      	movs	r4, r2
    8c46:	430b      	orrs	r3, r1
    8c48:	602b      	str	r3, [r5, #0]
    8c4a:	e7cd      	b.n	8be8 <_svfiprintf_r+0x90>
    8c4c:	9b05      	ldr	r3, [sp, #20]
    8c4e:	1d18      	adds	r0, r3, #4
    8c50:	681b      	ldr	r3, [r3, #0]
    8c52:	9005      	str	r0, [sp, #20]
    8c54:	2b00      	cmp	r3, #0
    8c56:	db39      	blt.n	8ccc <_svfiprintf_r+0x174>
    8c58:	9309      	str	r3, [sp, #36]	; 0x24
    8c5a:	0014      	movs	r4, r2
    8c5c:	7823      	ldrb	r3, [r4, #0]
    8c5e:	2b2e      	cmp	r3, #46	; 0x2e
    8c60:	d10b      	bne.n	8c7a <_svfiprintf_r+0x122>
    8c62:	7863      	ldrb	r3, [r4, #1]
    8c64:	1c62      	adds	r2, r4, #1
    8c66:	2b2a      	cmp	r3, #42	; 0x2a
    8c68:	d13e      	bne.n	8ce8 <_svfiprintf_r+0x190>
    8c6a:	9b05      	ldr	r3, [sp, #20]
    8c6c:	3402      	adds	r4, #2
    8c6e:	1d1a      	adds	r2, r3, #4
    8c70:	681b      	ldr	r3, [r3, #0]
    8c72:	9205      	str	r2, [sp, #20]
    8c74:	2b00      	cmp	r3, #0
    8c76:	db34      	blt.n	8ce2 <_svfiprintf_r+0x18a>
    8c78:	9307      	str	r3, [sp, #28]
    8c7a:	4e35      	ldr	r6, [pc, #212]	; (8d50 <_svfiprintf_r+0x1f8>)
    8c7c:	7821      	ldrb	r1, [r4, #0]
    8c7e:	2203      	movs	r2, #3
    8c80:	0030      	movs	r0, r6
    8c82:	f000 fbf5 	bl	9470 <memchr>
    8c86:	2800      	cmp	r0, #0
    8c88:	d006      	beq.n	8c98 <_svfiprintf_r+0x140>
    8c8a:	2340      	movs	r3, #64	; 0x40
    8c8c:	1b80      	subs	r0, r0, r6
    8c8e:	4083      	lsls	r3, r0
    8c90:	682a      	ldr	r2, [r5, #0]
    8c92:	3401      	adds	r4, #1
    8c94:	4313      	orrs	r3, r2
    8c96:	602b      	str	r3, [r5, #0]
    8c98:	7821      	ldrb	r1, [r4, #0]
    8c9a:	2206      	movs	r2, #6
    8c9c:	482d      	ldr	r0, [pc, #180]	; (8d54 <_svfiprintf_r+0x1fc>)
    8c9e:	1c66      	adds	r6, r4, #1
    8ca0:	7629      	strb	r1, [r5, #24]
    8ca2:	f000 fbe5 	bl	9470 <memchr>
    8ca6:	2800      	cmp	r0, #0
    8ca8:	d046      	beq.n	8d38 <_svfiprintf_r+0x1e0>
    8caa:	4b2b      	ldr	r3, [pc, #172]	; (8d58 <_svfiprintf_r+0x200>)
    8cac:	2b00      	cmp	r3, #0
    8cae:	d12f      	bne.n	8d10 <_svfiprintf_r+0x1b8>
    8cb0:	6829      	ldr	r1, [r5, #0]
    8cb2:	9b05      	ldr	r3, [sp, #20]
    8cb4:	2207      	movs	r2, #7
    8cb6:	05c9      	lsls	r1, r1, #23
    8cb8:	d528      	bpl.n	8d0c <_svfiprintf_r+0x1b4>
    8cba:	189b      	adds	r3, r3, r2
    8cbc:	4393      	bics	r3, r2
    8cbe:	3308      	adds	r3, #8
    8cc0:	9305      	str	r3, [sp, #20]
    8cc2:	696b      	ldr	r3, [r5, #20]
    8cc4:	9a03      	ldr	r2, [sp, #12]
    8cc6:	189b      	adds	r3, r3, r2
    8cc8:	616b      	str	r3, [r5, #20]
    8cca:	e767      	b.n	8b9c <_svfiprintf_r+0x44>
    8ccc:	425b      	negs	r3, r3
    8cce:	60eb      	str	r3, [r5, #12]
    8cd0:	2302      	movs	r3, #2
    8cd2:	430b      	orrs	r3, r1
    8cd4:	602b      	str	r3, [r5, #0]
    8cd6:	e7c0      	b.n	8c5a <_svfiprintf_r+0x102>
    8cd8:	434b      	muls	r3, r1
    8cda:	3401      	adds	r4, #1
    8cdc:	189b      	adds	r3, r3, r2
    8cde:	2001      	movs	r0, #1
    8ce0:	e7a0      	b.n	8c24 <_svfiprintf_r+0xcc>
    8ce2:	2301      	movs	r3, #1
    8ce4:	425b      	negs	r3, r3
    8ce6:	e7c7      	b.n	8c78 <_svfiprintf_r+0x120>
    8ce8:	2300      	movs	r3, #0
    8cea:	0014      	movs	r4, r2
    8cec:	200a      	movs	r0, #10
    8cee:	001a      	movs	r2, r3
    8cf0:	606b      	str	r3, [r5, #4]
    8cf2:	7821      	ldrb	r1, [r4, #0]
    8cf4:	3930      	subs	r1, #48	; 0x30
    8cf6:	2909      	cmp	r1, #9
    8cf8:	d903      	bls.n	8d02 <_svfiprintf_r+0x1aa>
    8cfa:	2b00      	cmp	r3, #0
    8cfc:	d0bd      	beq.n	8c7a <_svfiprintf_r+0x122>
    8cfe:	9207      	str	r2, [sp, #28]
    8d00:	e7bb      	b.n	8c7a <_svfiprintf_r+0x122>
    8d02:	4342      	muls	r2, r0
    8d04:	3401      	adds	r4, #1
    8d06:	1852      	adds	r2, r2, r1
    8d08:	2301      	movs	r3, #1
    8d0a:	e7f2      	b.n	8cf2 <_svfiprintf_r+0x19a>
    8d0c:	3307      	adds	r3, #7
    8d0e:	e7d5      	b.n	8cbc <_svfiprintf_r+0x164>
    8d10:	ab05      	add	r3, sp, #20
    8d12:	9300      	str	r3, [sp, #0]
    8d14:	003a      	movs	r2, r7
    8d16:	4b11      	ldr	r3, [pc, #68]	; (8d5c <_svfiprintf_r+0x204>)
    8d18:	0029      	movs	r1, r5
    8d1a:	9802      	ldr	r0, [sp, #8]
    8d1c:	e000      	b.n	8d20 <_svfiprintf_r+0x1c8>
    8d1e:	bf00      	nop
    8d20:	9003      	str	r0, [sp, #12]
    8d22:	9b03      	ldr	r3, [sp, #12]
    8d24:	3301      	adds	r3, #1
    8d26:	d1cc      	bne.n	8cc2 <_svfiprintf_r+0x16a>
    8d28:	89bb      	ldrh	r3, [r7, #12]
    8d2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8d2c:	065b      	lsls	r3, r3, #25
    8d2e:	d400      	bmi.n	8d32 <_svfiprintf_r+0x1da>
    8d30:	e729      	b.n	8b86 <_svfiprintf_r+0x2e>
    8d32:	2001      	movs	r0, #1
    8d34:	4240      	negs	r0, r0
    8d36:	e726      	b.n	8b86 <_svfiprintf_r+0x2e>
    8d38:	ab05      	add	r3, sp, #20
    8d3a:	9300      	str	r3, [sp, #0]
    8d3c:	003a      	movs	r2, r7
    8d3e:	4b07      	ldr	r3, [pc, #28]	; (8d5c <_svfiprintf_r+0x204>)
    8d40:	0029      	movs	r1, r5
    8d42:	9802      	ldr	r0, [sp, #8]
    8d44:	f000 f9be 	bl	90c4 <_printf_i>
    8d48:	e7ea      	b.n	8d20 <_svfiprintf_r+0x1c8>
    8d4a:	46c0      	nop			; (mov r8, r8)
    8d4c:	0000a1ec 	.word	0x0000a1ec
    8d50:	0000a1f2 	.word	0x0000a1f2
    8d54:	0000a1f6 	.word	0x0000a1f6
    8d58:	00000000 	.word	0x00000000
    8d5c:	00008a95 	.word	0x00008a95

00008d60 <__sfputc_r>:
    8d60:	6893      	ldr	r3, [r2, #8]
    8d62:	b510      	push	{r4, lr}
    8d64:	3b01      	subs	r3, #1
    8d66:	6093      	str	r3, [r2, #8]
    8d68:	2b00      	cmp	r3, #0
    8d6a:	da05      	bge.n	8d78 <__sfputc_r+0x18>
    8d6c:	6994      	ldr	r4, [r2, #24]
    8d6e:	42a3      	cmp	r3, r4
    8d70:	db08      	blt.n	8d84 <__sfputc_r+0x24>
    8d72:	b2cb      	uxtb	r3, r1
    8d74:	2b0a      	cmp	r3, #10
    8d76:	d005      	beq.n	8d84 <__sfputc_r+0x24>
    8d78:	6813      	ldr	r3, [r2, #0]
    8d7a:	1c58      	adds	r0, r3, #1
    8d7c:	6010      	str	r0, [r2, #0]
    8d7e:	7019      	strb	r1, [r3, #0]
    8d80:	b2c8      	uxtb	r0, r1
    8d82:	bd10      	pop	{r4, pc}
    8d84:	f7ff fb0e 	bl	83a4 <__swbuf_r>
    8d88:	e7fb      	b.n	8d82 <__sfputc_r+0x22>

00008d8a <__sfputs_r>:
    8d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d8c:	0006      	movs	r6, r0
    8d8e:	000f      	movs	r7, r1
    8d90:	0014      	movs	r4, r2
    8d92:	18d5      	adds	r5, r2, r3
    8d94:	42ac      	cmp	r4, r5
    8d96:	d101      	bne.n	8d9c <__sfputs_r+0x12>
    8d98:	2000      	movs	r0, #0
    8d9a:	e007      	b.n	8dac <__sfputs_r+0x22>
    8d9c:	7821      	ldrb	r1, [r4, #0]
    8d9e:	003a      	movs	r2, r7
    8da0:	0030      	movs	r0, r6
    8da2:	f7ff ffdd 	bl	8d60 <__sfputc_r>
    8da6:	3401      	adds	r4, #1
    8da8:	1c43      	adds	r3, r0, #1
    8daa:	d1f3      	bne.n	8d94 <__sfputs_r+0xa>
    8dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008db0 <_vfiprintf_r>:
    8db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8db2:	b09f      	sub	sp, #124	; 0x7c
    8db4:	0006      	movs	r6, r0
    8db6:	000f      	movs	r7, r1
    8db8:	0014      	movs	r4, r2
    8dba:	9305      	str	r3, [sp, #20]
    8dbc:	2800      	cmp	r0, #0
    8dbe:	d004      	beq.n	8dca <_vfiprintf_r+0x1a>
    8dc0:	6983      	ldr	r3, [r0, #24]
    8dc2:	2b00      	cmp	r3, #0
    8dc4:	d101      	bne.n	8dca <_vfiprintf_r+0x1a>
    8dc6:	f7ff fcb1 	bl	872c <__sinit>
    8dca:	4b7f      	ldr	r3, [pc, #508]	; (8fc8 <_vfiprintf_r+0x218>)
    8dcc:	429f      	cmp	r7, r3
    8dce:	d15c      	bne.n	8e8a <_vfiprintf_r+0xda>
    8dd0:	6877      	ldr	r7, [r6, #4]
    8dd2:	89bb      	ldrh	r3, [r7, #12]
    8dd4:	071b      	lsls	r3, r3, #28
    8dd6:	d562      	bpl.n	8e9e <_vfiprintf_r+0xee>
    8dd8:	693b      	ldr	r3, [r7, #16]
    8dda:	2b00      	cmp	r3, #0
    8ddc:	d05f      	beq.n	8e9e <_vfiprintf_r+0xee>
    8dde:	2300      	movs	r3, #0
    8de0:	ad06      	add	r5, sp, #24
    8de2:	616b      	str	r3, [r5, #20]
    8de4:	3320      	adds	r3, #32
    8de6:	766b      	strb	r3, [r5, #25]
    8de8:	3310      	adds	r3, #16
    8dea:	76ab      	strb	r3, [r5, #26]
    8dec:	9402      	str	r4, [sp, #8]
    8dee:	9c02      	ldr	r4, [sp, #8]
    8df0:	7823      	ldrb	r3, [r4, #0]
    8df2:	2b00      	cmp	r3, #0
    8df4:	d15d      	bne.n	8eb2 <_vfiprintf_r+0x102>
    8df6:	9b02      	ldr	r3, [sp, #8]
    8df8:	1ae3      	subs	r3, r4, r3
    8dfa:	9304      	str	r3, [sp, #16]
    8dfc:	d00d      	beq.n	8e1a <_vfiprintf_r+0x6a>
    8dfe:	9b04      	ldr	r3, [sp, #16]
    8e00:	9a02      	ldr	r2, [sp, #8]
    8e02:	0039      	movs	r1, r7
    8e04:	0030      	movs	r0, r6
    8e06:	f7ff ffc0 	bl	8d8a <__sfputs_r>
    8e0a:	1c43      	adds	r3, r0, #1
    8e0c:	d100      	bne.n	8e10 <_vfiprintf_r+0x60>
    8e0e:	e0cc      	b.n	8faa <_vfiprintf_r+0x1fa>
    8e10:	696a      	ldr	r2, [r5, #20]
    8e12:	9b04      	ldr	r3, [sp, #16]
    8e14:	4694      	mov	ip, r2
    8e16:	4463      	add	r3, ip
    8e18:	616b      	str	r3, [r5, #20]
    8e1a:	7823      	ldrb	r3, [r4, #0]
    8e1c:	2b00      	cmp	r3, #0
    8e1e:	d100      	bne.n	8e22 <_vfiprintf_r+0x72>
    8e20:	e0c3      	b.n	8faa <_vfiprintf_r+0x1fa>
    8e22:	2201      	movs	r2, #1
    8e24:	2300      	movs	r3, #0
    8e26:	4252      	negs	r2, r2
    8e28:	606a      	str	r2, [r5, #4]
    8e2a:	a902      	add	r1, sp, #8
    8e2c:	3254      	adds	r2, #84	; 0x54
    8e2e:	1852      	adds	r2, r2, r1
    8e30:	3401      	adds	r4, #1
    8e32:	602b      	str	r3, [r5, #0]
    8e34:	60eb      	str	r3, [r5, #12]
    8e36:	60ab      	str	r3, [r5, #8]
    8e38:	7013      	strb	r3, [r2, #0]
    8e3a:	65ab      	str	r3, [r5, #88]	; 0x58
    8e3c:	7821      	ldrb	r1, [r4, #0]
    8e3e:	2205      	movs	r2, #5
    8e40:	4862      	ldr	r0, [pc, #392]	; (8fcc <_vfiprintf_r+0x21c>)
    8e42:	f000 fb15 	bl	9470 <memchr>
    8e46:	1c63      	adds	r3, r4, #1
    8e48:	469c      	mov	ip, r3
    8e4a:	2800      	cmp	r0, #0
    8e4c:	d135      	bne.n	8eba <_vfiprintf_r+0x10a>
    8e4e:	6829      	ldr	r1, [r5, #0]
    8e50:	06cb      	lsls	r3, r1, #27
    8e52:	d504      	bpl.n	8e5e <_vfiprintf_r+0xae>
    8e54:	2353      	movs	r3, #83	; 0x53
    8e56:	aa02      	add	r2, sp, #8
    8e58:	3020      	adds	r0, #32
    8e5a:	189b      	adds	r3, r3, r2
    8e5c:	7018      	strb	r0, [r3, #0]
    8e5e:	070b      	lsls	r3, r1, #28
    8e60:	d504      	bpl.n	8e6c <_vfiprintf_r+0xbc>
    8e62:	2353      	movs	r3, #83	; 0x53
    8e64:	202b      	movs	r0, #43	; 0x2b
    8e66:	aa02      	add	r2, sp, #8
    8e68:	189b      	adds	r3, r3, r2
    8e6a:	7018      	strb	r0, [r3, #0]
    8e6c:	7823      	ldrb	r3, [r4, #0]
    8e6e:	2b2a      	cmp	r3, #42	; 0x2a
    8e70:	d02c      	beq.n	8ecc <_vfiprintf_r+0x11c>
    8e72:	2000      	movs	r0, #0
    8e74:	210a      	movs	r1, #10
    8e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8e78:	7822      	ldrb	r2, [r4, #0]
    8e7a:	3a30      	subs	r2, #48	; 0x30
    8e7c:	2a09      	cmp	r2, #9
    8e7e:	d800      	bhi.n	8e82 <_vfiprintf_r+0xd2>
    8e80:	e06b      	b.n	8f5a <_vfiprintf_r+0x1aa>
    8e82:	2800      	cmp	r0, #0
    8e84:	d02a      	beq.n	8edc <_vfiprintf_r+0x12c>
    8e86:	9309      	str	r3, [sp, #36]	; 0x24
    8e88:	e028      	b.n	8edc <_vfiprintf_r+0x12c>
    8e8a:	4b51      	ldr	r3, [pc, #324]	; (8fd0 <_vfiprintf_r+0x220>)
    8e8c:	429f      	cmp	r7, r3
    8e8e:	d101      	bne.n	8e94 <_vfiprintf_r+0xe4>
    8e90:	68b7      	ldr	r7, [r6, #8]
    8e92:	e79e      	b.n	8dd2 <_vfiprintf_r+0x22>
    8e94:	4b4f      	ldr	r3, [pc, #316]	; (8fd4 <_vfiprintf_r+0x224>)
    8e96:	429f      	cmp	r7, r3
    8e98:	d19b      	bne.n	8dd2 <_vfiprintf_r+0x22>
    8e9a:	68f7      	ldr	r7, [r6, #12]
    8e9c:	e799      	b.n	8dd2 <_vfiprintf_r+0x22>
    8e9e:	0039      	movs	r1, r7
    8ea0:	0030      	movs	r0, r6
    8ea2:	f7ff fad5 	bl	8450 <__swsetup_r>
    8ea6:	2800      	cmp	r0, #0
    8ea8:	d099      	beq.n	8dde <_vfiprintf_r+0x2e>
    8eaa:	2001      	movs	r0, #1
    8eac:	4240      	negs	r0, r0
    8eae:	b01f      	add	sp, #124	; 0x7c
    8eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8eb2:	2b25      	cmp	r3, #37	; 0x25
    8eb4:	d09f      	beq.n	8df6 <_vfiprintf_r+0x46>
    8eb6:	3401      	adds	r4, #1
    8eb8:	e79a      	b.n	8df0 <_vfiprintf_r+0x40>
    8eba:	4b44      	ldr	r3, [pc, #272]	; (8fcc <_vfiprintf_r+0x21c>)
    8ebc:	6829      	ldr	r1, [r5, #0]
    8ebe:	1ac0      	subs	r0, r0, r3
    8ec0:	2301      	movs	r3, #1
    8ec2:	4083      	lsls	r3, r0
    8ec4:	430b      	orrs	r3, r1
    8ec6:	602b      	str	r3, [r5, #0]
    8ec8:	4664      	mov	r4, ip
    8eca:	e7b7      	b.n	8e3c <_vfiprintf_r+0x8c>
    8ecc:	9b05      	ldr	r3, [sp, #20]
    8ece:	1d18      	adds	r0, r3, #4
    8ed0:	681b      	ldr	r3, [r3, #0]
    8ed2:	9005      	str	r0, [sp, #20]
    8ed4:	2b00      	cmp	r3, #0
    8ed6:	db3a      	blt.n	8f4e <_vfiprintf_r+0x19e>
    8ed8:	9309      	str	r3, [sp, #36]	; 0x24
    8eda:	4664      	mov	r4, ip
    8edc:	7823      	ldrb	r3, [r4, #0]
    8ede:	2b2e      	cmp	r3, #46	; 0x2e
    8ee0:	d10b      	bne.n	8efa <_vfiprintf_r+0x14a>
    8ee2:	7863      	ldrb	r3, [r4, #1]
    8ee4:	1c62      	adds	r2, r4, #1
    8ee6:	2b2a      	cmp	r3, #42	; 0x2a
    8ee8:	d13f      	bne.n	8f6a <_vfiprintf_r+0x1ba>
    8eea:	9b05      	ldr	r3, [sp, #20]
    8eec:	3402      	adds	r4, #2
    8eee:	1d1a      	adds	r2, r3, #4
    8ef0:	681b      	ldr	r3, [r3, #0]
    8ef2:	9205      	str	r2, [sp, #20]
    8ef4:	2b00      	cmp	r3, #0
    8ef6:	db35      	blt.n	8f64 <_vfiprintf_r+0x1b4>
    8ef8:	9307      	str	r3, [sp, #28]
    8efa:	7821      	ldrb	r1, [r4, #0]
    8efc:	2203      	movs	r2, #3
    8efe:	4836      	ldr	r0, [pc, #216]	; (8fd8 <_vfiprintf_r+0x228>)
    8f00:	f000 fab6 	bl	9470 <memchr>
    8f04:	2800      	cmp	r0, #0
    8f06:	d007      	beq.n	8f18 <_vfiprintf_r+0x168>
    8f08:	4b33      	ldr	r3, [pc, #204]	; (8fd8 <_vfiprintf_r+0x228>)
    8f0a:	682a      	ldr	r2, [r5, #0]
    8f0c:	1ac0      	subs	r0, r0, r3
    8f0e:	2340      	movs	r3, #64	; 0x40
    8f10:	4083      	lsls	r3, r0
    8f12:	4313      	orrs	r3, r2
    8f14:	602b      	str	r3, [r5, #0]
    8f16:	3401      	adds	r4, #1
    8f18:	7821      	ldrb	r1, [r4, #0]
    8f1a:	1c63      	adds	r3, r4, #1
    8f1c:	2206      	movs	r2, #6
    8f1e:	482f      	ldr	r0, [pc, #188]	; (8fdc <_vfiprintf_r+0x22c>)
    8f20:	9302      	str	r3, [sp, #8]
    8f22:	7629      	strb	r1, [r5, #24]
    8f24:	f000 faa4 	bl	9470 <memchr>
    8f28:	2800      	cmp	r0, #0
    8f2a:	d044      	beq.n	8fb6 <_vfiprintf_r+0x206>
    8f2c:	4b2c      	ldr	r3, [pc, #176]	; (8fe0 <_vfiprintf_r+0x230>)
    8f2e:	2b00      	cmp	r3, #0
    8f30:	d12f      	bne.n	8f92 <_vfiprintf_r+0x1e2>
    8f32:	6829      	ldr	r1, [r5, #0]
    8f34:	9b05      	ldr	r3, [sp, #20]
    8f36:	2207      	movs	r2, #7
    8f38:	05c9      	lsls	r1, r1, #23
    8f3a:	d528      	bpl.n	8f8e <_vfiprintf_r+0x1de>
    8f3c:	189b      	adds	r3, r3, r2
    8f3e:	4393      	bics	r3, r2
    8f40:	3308      	adds	r3, #8
    8f42:	9305      	str	r3, [sp, #20]
    8f44:	696b      	ldr	r3, [r5, #20]
    8f46:	9a03      	ldr	r2, [sp, #12]
    8f48:	189b      	adds	r3, r3, r2
    8f4a:	616b      	str	r3, [r5, #20]
    8f4c:	e74f      	b.n	8dee <_vfiprintf_r+0x3e>
    8f4e:	425b      	negs	r3, r3
    8f50:	60eb      	str	r3, [r5, #12]
    8f52:	2302      	movs	r3, #2
    8f54:	430b      	orrs	r3, r1
    8f56:	602b      	str	r3, [r5, #0]
    8f58:	e7bf      	b.n	8eda <_vfiprintf_r+0x12a>
    8f5a:	434b      	muls	r3, r1
    8f5c:	3401      	adds	r4, #1
    8f5e:	189b      	adds	r3, r3, r2
    8f60:	2001      	movs	r0, #1
    8f62:	e789      	b.n	8e78 <_vfiprintf_r+0xc8>
    8f64:	2301      	movs	r3, #1
    8f66:	425b      	negs	r3, r3
    8f68:	e7c6      	b.n	8ef8 <_vfiprintf_r+0x148>
    8f6a:	2300      	movs	r3, #0
    8f6c:	0014      	movs	r4, r2
    8f6e:	200a      	movs	r0, #10
    8f70:	001a      	movs	r2, r3
    8f72:	606b      	str	r3, [r5, #4]
    8f74:	7821      	ldrb	r1, [r4, #0]
    8f76:	3930      	subs	r1, #48	; 0x30
    8f78:	2909      	cmp	r1, #9
    8f7a:	d903      	bls.n	8f84 <_vfiprintf_r+0x1d4>
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	d0bc      	beq.n	8efa <_vfiprintf_r+0x14a>
    8f80:	9207      	str	r2, [sp, #28]
    8f82:	e7ba      	b.n	8efa <_vfiprintf_r+0x14a>
    8f84:	4342      	muls	r2, r0
    8f86:	3401      	adds	r4, #1
    8f88:	1852      	adds	r2, r2, r1
    8f8a:	2301      	movs	r3, #1
    8f8c:	e7f2      	b.n	8f74 <_vfiprintf_r+0x1c4>
    8f8e:	3307      	adds	r3, #7
    8f90:	e7d5      	b.n	8f3e <_vfiprintf_r+0x18e>
    8f92:	ab05      	add	r3, sp, #20
    8f94:	9300      	str	r3, [sp, #0]
    8f96:	003a      	movs	r2, r7
    8f98:	4b12      	ldr	r3, [pc, #72]	; (8fe4 <_vfiprintf_r+0x234>)
    8f9a:	0029      	movs	r1, r5
    8f9c:	0030      	movs	r0, r6
    8f9e:	e000      	b.n	8fa2 <_vfiprintf_r+0x1f2>
    8fa0:	bf00      	nop
    8fa2:	9003      	str	r0, [sp, #12]
    8fa4:	9b03      	ldr	r3, [sp, #12]
    8fa6:	3301      	adds	r3, #1
    8fa8:	d1cc      	bne.n	8f44 <_vfiprintf_r+0x194>
    8faa:	89bb      	ldrh	r3, [r7, #12]
    8fac:	065b      	lsls	r3, r3, #25
    8fae:	d500      	bpl.n	8fb2 <_vfiprintf_r+0x202>
    8fb0:	e77b      	b.n	8eaa <_vfiprintf_r+0xfa>
    8fb2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8fb4:	e77b      	b.n	8eae <_vfiprintf_r+0xfe>
    8fb6:	ab05      	add	r3, sp, #20
    8fb8:	9300      	str	r3, [sp, #0]
    8fba:	003a      	movs	r2, r7
    8fbc:	4b09      	ldr	r3, [pc, #36]	; (8fe4 <_vfiprintf_r+0x234>)
    8fbe:	0029      	movs	r1, r5
    8fc0:	0030      	movs	r0, r6
    8fc2:	f000 f87f 	bl	90c4 <_printf_i>
    8fc6:	e7ec      	b.n	8fa2 <_vfiprintf_r+0x1f2>
    8fc8:	0000a1ac 	.word	0x0000a1ac
    8fcc:	0000a1ec 	.word	0x0000a1ec
    8fd0:	0000a1cc 	.word	0x0000a1cc
    8fd4:	0000a18c 	.word	0x0000a18c
    8fd8:	0000a1f2 	.word	0x0000a1f2
    8fdc:	0000a1f6 	.word	0x0000a1f6
    8fe0:	00000000 	.word	0x00000000
    8fe4:	00008d8b 	.word	0x00008d8b

00008fe8 <_printf_common>:
    8fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8fea:	0015      	movs	r5, r2
    8fec:	9301      	str	r3, [sp, #4]
    8fee:	688a      	ldr	r2, [r1, #8]
    8ff0:	690b      	ldr	r3, [r1, #16]
    8ff2:	9000      	str	r0, [sp, #0]
    8ff4:	000c      	movs	r4, r1
    8ff6:	4293      	cmp	r3, r2
    8ff8:	da00      	bge.n	8ffc <_printf_common+0x14>
    8ffa:	0013      	movs	r3, r2
    8ffc:	0022      	movs	r2, r4
    8ffe:	602b      	str	r3, [r5, #0]
    9000:	3243      	adds	r2, #67	; 0x43
    9002:	7812      	ldrb	r2, [r2, #0]
    9004:	2a00      	cmp	r2, #0
    9006:	d001      	beq.n	900c <_printf_common+0x24>
    9008:	3301      	adds	r3, #1
    900a:	602b      	str	r3, [r5, #0]
    900c:	6823      	ldr	r3, [r4, #0]
    900e:	069b      	lsls	r3, r3, #26
    9010:	d502      	bpl.n	9018 <_printf_common+0x30>
    9012:	682b      	ldr	r3, [r5, #0]
    9014:	3302      	adds	r3, #2
    9016:	602b      	str	r3, [r5, #0]
    9018:	2706      	movs	r7, #6
    901a:	6823      	ldr	r3, [r4, #0]
    901c:	401f      	ands	r7, r3
    901e:	d027      	beq.n	9070 <_printf_common+0x88>
    9020:	0023      	movs	r3, r4
    9022:	3343      	adds	r3, #67	; 0x43
    9024:	781b      	ldrb	r3, [r3, #0]
    9026:	1e5a      	subs	r2, r3, #1
    9028:	4193      	sbcs	r3, r2
    902a:	6822      	ldr	r2, [r4, #0]
    902c:	0692      	lsls	r2, r2, #26
    902e:	d430      	bmi.n	9092 <_printf_common+0xaa>
    9030:	0022      	movs	r2, r4
    9032:	9901      	ldr	r1, [sp, #4]
    9034:	3243      	adds	r2, #67	; 0x43
    9036:	9800      	ldr	r0, [sp, #0]
    9038:	9e08      	ldr	r6, [sp, #32]
    903a:	47b0      	blx	r6
    903c:	1c43      	adds	r3, r0, #1
    903e:	d025      	beq.n	908c <_printf_common+0xa4>
    9040:	2306      	movs	r3, #6
    9042:	6820      	ldr	r0, [r4, #0]
    9044:	682a      	ldr	r2, [r5, #0]
    9046:	68e1      	ldr	r1, [r4, #12]
    9048:	4003      	ands	r3, r0
    904a:	2500      	movs	r5, #0
    904c:	2b04      	cmp	r3, #4
    904e:	d103      	bne.n	9058 <_printf_common+0x70>
    9050:	1a8d      	subs	r5, r1, r2
    9052:	43eb      	mvns	r3, r5
    9054:	17db      	asrs	r3, r3, #31
    9056:	401d      	ands	r5, r3
    9058:	68a3      	ldr	r3, [r4, #8]
    905a:	6922      	ldr	r2, [r4, #16]
    905c:	4293      	cmp	r3, r2
    905e:	dd01      	ble.n	9064 <_printf_common+0x7c>
    9060:	1a9b      	subs	r3, r3, r2
    9062:	18ed      	adds	r5, r5, r3
    9064:	2700      	movs	r7, #0
    9066:	42bd      	cmp	r5, r7
    9068:	d120      	bne.n	90ac <_printf_common+0xc4>
    906a:	2000      	movs	r0, #0
    906c:	e010      	b.n	9090 <_printf_common+0xa8>
    906e:	3701      	adds	r7, #1
    9070:	68e3      	ldr	r3, [r4, #12]
    9072:	682a      	ldr	r2, [r5, #0]
    9074:	1a9b      	subs	r3, r3, r2
    9076:	429f      	cmp	r7, r3
    9078:	dad2      	bge.n	9020 <_printf_common+0x38>
    907a:	0022      	movs	r2, r4
    907c:	2301      	movs	r3, #1
    907e:	3219      	adds	r2, #25
    9080:	9901      	ldr	r1, [sp, #4]
    9082:	9800      	ldr	r0, [sp, #0]
    9084:	9e08      	ldr	r6, [sp, #32]
    9086:	47b0      	blx	r6
    9088:	1c43      	adds	r3, r0, #1
    908a:	d1f0      	bne.n	906e <_printf_common+0x86>
    908c:	2001      	movs	r0, #1
    908e:	4240      	negs	r0, r0
    9090:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9092:	2030      	movs	r0, #48	; 0x30
    9094:	18e1      	adds	r1, r4, r3
    9096:	3143      	adds	r1, #67	; 0x43
    9098:	7008      	strb	r0, [r1, #0]
    909a:	0021      	movs	r1, r4
    909c:	1c5a      	adds	r2, r3, #1
    909e:	3145      	adds	r1, #69	; 0x45
    90a0:	7809      	ldrb	r1, [r1, #0]
    90a2:	18a2      	adds	r2, r4, r2
    90a4:	3243      	adds	r2, #67	; 0x43
    90a6:	3302      	adds	r3, #2
    90a8:	7011      	strb	r1, [r2, #0]
    90aa:	e7c1      	b.n	9030 <_printf_common+0x48>
    90ac:	0022      	movs	r2, r4
    90ae:	2301      	movs	r3, #1
    90b0:	321a      	adds	r2, #26
    90b2:	9901      	ldr	r1, [sp, #4]
    90b4:	9800      	ldr	r0, [sp, #0]
    90b6:	9e08      	ldr	r6, [sp, #32]
    90b8:	47b0      	blx	r6
    90ba:	1c43      	adds	r3, r0, #1
    90bc:	d0e6      	beq.n	908c <_printf_common+0xa4>
    90be:	3701      	adds	r7, #1
    90c0:	e7d1      	b.n	9066 <_printf_common+0x7e>
	...

000090c4 <_printf_i>:
    90c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    90c6:	b08b      	sub	sp, #44	; 0x2c
    90c8:	9206      	str	r2, [sp, #24]
    90ca:	000a      	movs	r2, r1
    90cc:	3243      	adds	r2, #67	; 0x43
    90ce:	9307      	str	r3, [sp, #28]
    90d0:	9005      	str	r0, [sp, #20]
    90d2:	9204      	str	r2, [sp, #16]
    90d4:	7e0a      	ldrb	r2, [r1, #24]
    90d6:	000c      	movs	r4, r1
    90d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    90da:	2a6e      	cmp	r2, #110	; 0x6e
    90dc:	d100      	bne.n	90e0 <_printf_i+0x1c>
    90de:	e08f      	b.n	9200 <_printf_i+0x13c>
    90e0:	d817      	bhi.n	9112 <_printf_i+0x4e>
    90e2:	2a63      	cmp	r2, #99	; 0x63
    90e4:	d02c      	beq.n	9140 <_printf_i+0x7c>
    90e6:	d808      	bhi.n	90fa <_printf_i+0x36>
    90e8:	2a00      	cmp	r2, #0
    90ea:	d100      	bne.n	90ee <_printf_i+0x2a>
    90ec:	e099      	b.n	9222 <_printf_i+0x15e>
    90ee:	2a58      	cmp	r2, #88	; 0x58
    90f0:	d054      	beq.n	919c <_printf_i+0xd8>
    90f2:	0026      	movs	r6, r4
    90f4:	3642      	adds	r6, #66	; 0x42
    90f6:	7032      	strb	r2, [r6, #0]
    90f8:	e029      	b.n	914e <_printf_i+0x8a>
    90fa:	2a64      	cmp	r2, #100	; 0x64
    90fc:	d001      	beq.n	9102 <_printf_i+0x3e>
    90fe:	2a69      	cmp	r2, #105	; 0x69
    9100:	d1f7      	bne.n	90f2 <_printf_i+0x2e>
    9102:	6821      	ldr	r1, [r4, #0]
    9104:	681a      	ldr	r2, [r3, #0]
    9106:	0608      	lsls	r0, r1, #24
    9108:	d523      	bpl.n	9152 <_printf_i+0x8e>
    910a:	1d11      	adds	r1, r2, #4
    910c:	6019      	str	r1, [r3, #0]
    910e:	6815      	ldr	r5, [r2, #0]
    9110:	e025      	b.n	915e <_printf_i+0x9a>
    9112:	2a73      	cmp	r2, #115	; 0x73
    9114:	d100      	bne.n	9118 <_printf_i+0x54>
    9116:	e088      	b.n	922a <_printf_i+0x166>
    9118:	d808      	bhi.n	912c <_printf_i+0x68>
    911a:	2a6f      	cmp	r2, #111	; 0x6f
    911c:	d029      	beq.n	9172 <_printf_i+0xae>
    911e:	2a70      	cmp	r2, #112	; 0x70
    9120:	d1e7      	bne.n	90f2 <_printf_i+0x2e>
    9122:	2220      	movs	r2, #32
    9124:	6809      	ldr	r1, [r1, #0]
    9126:	430a      	orrs	r2, r1
    9128:	6022      	str	r2, [r4, #0]
    912a:	e003      	b.n	9134 <_printf_i+0x70>
    912c:	2a75      	cmp	r2, #117	; 0x75
    912e:	d020      	beq.n	9172 <_printf_i+0xae>
    9130:	2a78      	cmp	r2, #120	; 0x78
    9132:	d1de      	bne.n	90f2 <_printf_i+0x2e>
    9134:	0022      	movs	r2, r4
    9136:	2178      	movs	r1, #120	; 0x78
    9138:	3245      	adds	r2, #69	; 0x45
    913a:	7011      	strb	r1, [r2, #0]
    913c:	4a6c      	ldr	r2, [pc, #432]	; (92f0 <_printf_i+0x22c>)
    913e:	e030      	b.n	91a2 <_printf_i+0xde>
    9140:	000e      	movs	r6, r1
    9142:	681a      	ldr	r2, [r3, #0]
    9144:	3642      	adds	r6, #66	; 0x42
    9146:	1d11      	adds	r1, r2, #4
    9148:	6019      	str	r1, [r3, #0]
    914a:	6813      	ldr	r3, [r2, #0]
    914c:	7033      	strb	r3, [r6, #0]
    914e:	2301      	movs	r3, #1
    9150:	e079      	b.n	9246 <_printf_i+0x182>
    9152:	0649      	lsls	r1, r1, #25
    9154:	d5d9      	bpl.n	910a <_printf_i+0x46>
    9156:	1d11      	adds	r1, r2, #4
    9158:	6019      	str	r1, [r3, #0]
    915a:	2300      	movs	r3, #0
    915c:	5ed5      	ldrsh	r5, [r2, r3]
    915e:	2d00      	cmp	r5, #0
    9160:	da03      	bge.n	916a <_printf_i+0xa6>
    9162:	232d      	movs	r3, #45	; 0x2d
    9164:	9a04      	ldr	r2, [sp, #16]
    9166:	426d      	negs	r5, r5
    9168:	7013      	strb	r3, [r2, #0]
    916a:	4b62      	ldr	r3, [pc, #392]	; (92f4 <_printf_i+0x230>)
    916c:	270a      	movs	r7, #10
    916e:	9303      	str	r3, [sp, #12]
    9170:	e02f      	b.n	91d2 <_printf_i+0x10e>
    9172:	6820      	ldr	r0, [r4, #0]
    9174:	6819      	ldr	r1, [r3, #0]
    9176:	0605      	lsls	r5, r0, #24
    9178:	d503      	bpl.n	9182 <_printf_i+0xbe>
    917a:	1d08      	adds	r0, r1, #4
    917c:	6018      	str	r0, [r3, #0]
    917e:	680d      	ldr	r5, [r1, #0]
    9180:	e005      	b.n	918e <_printf_i+0xca>
    9182:	0640      	lsls	r0, r0, #25
    9184:	d5f9      	bpl.n	917a <_printf_i+0xb6>
    9186:	680d      	ldr	r5, [r1, #0]
    9188:	1d08      	adds	r0, r1, #4
    918a:	6018      	str	r0, [r3, #0]
    918c:	b2ad      	uxth	r5, r5
    918e:	4b59      	ldr	r3, [pc, #356]	; (92f4 <_printf_i+0x230>)
    9190:	2708      	movs	r7, #8
    9192:	9303      	str	r3, [sp, #12]
    9194:	2a6f      	cmp	r2, #111	; 0x6f
    9196:	d018      	beq.n	91ca <_printf_i+0x106>
    9198:	270a      	movs	r7, #10
    919a:	e016      	b.n	91ca <_printf_i+0x106>
    919c:	3145      	adds	r1, #69	; 0x45
    919e:	700a      	strb	r2, [r1, #0]
    91a0:	4a54      	ldr	r2, [pc, #336]	; (92f4 <_printf_i+0x230>)
    91a2:	9203      	str	r2, [sp, #12]
    91a4:	681a      	ldr	r2, [r3, #0]
    91a6:	6821      	ldr	r1, [r4, #0]
    91a8:	1d10      	adds	r0, r2, #4
    91aa:	6018      	str	r0, [r3, #0]
    91ac:	6815      	ldr	r5, [r2, #0]
    91ae:	0608      	lsls	r0, r1, #24
    91b0:	d522      	bpl.n	91f8 <_printf_i+0x134>
    91b2:	07cb      	lsls	r3, r1, #31
    91b4:	d502      	bpl.n	91bc <_printf_i+0xf8>
    91b6:	2320      	movs	r3, #32
    91b8:	4319      	orrs	r1, r3
    91ba:	6021      	str	r1, [r4, #0]
    91bc:	2710      	movs	r7, #16
    91be:	2d00      	cmp	r5, #0
    91c0:	d103      	bne.n	91ca <_printf_i+0x106>
    91c2:	2320      	movs	r3, #32
    91c4:	6822      	ldr	r2, [r4, #0]
    91c6:	439a      	bics	r2, r3
    91c8:	6022      	str	r2, [r4, #0]
    91ca:	0023      	movs	r3, r4
    91cc:	2200      	movs	r2, #0
    91ce:	3343      	adds	r3, #67	; 0x43
    91d0:	701a      	strb	r2, [r3, #0]
    91d2:	6863      	ldr	r3, [r4, #4]
    91d4:	60a3      	str	r3, [r4, #8]
    91d6:	2b00      	cmp	r3, #0
    91d8:	db5c      	blt.n	9294 <_printf_i+0x1d0>
    91da:	2204      	movs	r2, #4
    91dc:	6821      	ldr	r1, [r4, #0]
    91de:	4391      	bics	r1, r2
    91e0:	6021      	str	r1, [r4, #0]
    91e2:	2d00      	cmp	r5, #0
    91e4:	d158      	bne.n	9298 <_printf_i+0x1d4>
    91e6:	9e04      	ldr	r6, [sp, #16]
    91e8:	2b00      	cmp	r3, #0
    91ea:	d064      	beq.n	92b6 <_printf_i+0x1f2>
    91ec:	0026      	movs	r6, r4
    91ee:	9b03      	ldr	r3, [sp, #12]
    91f0:	3642      	adds	r6, #66	; 0x42
    91f2:	781b      	ldrb	r3, [r3, #0]
    91f4:	7033      	strb	r3, [r6, #0]
    91f6:	e05e      	b.n	92b6 <_printf_i+0x1f2>
    91f8:	0648      	lsls	r0, r1, #25
    91fa:	d5da      	bpl.n	91b2 <_printf_i+0xee>
    91fc:	b2ad      	uxth	r5, r5
    91fe:	e7d8      	b.n	91b2 <_printf_i+0xee>
    9200:	6809      	ldr	r1, [r1, #0]
    9202:	681a      	ldr	r2, [r3, #0]
    9204:	0608      	lsls	r0, r1, #24
    9206:	d505      	bpl.n	9214 <_printf_i+0x150>
    9208:	1d11      	adds	r1, r2, #4
    920a:	6019      	str	r1, [r3, #0]
    920c:	6813      	ldr	r3, [r2, #0]
    920e:	6962      	ldr	r2, [r4, #20]
    9210:	601a      	str	r2, [r3, #0]
    9212:	e006      	b.n	9222 <_printf_i+0x15e>
    9214:	0649      	lsls	r1, r1, #25
    9216:	d5f7      	bpl.n	9208 <_printf_i+0x144>
    9218:	1d11      	adds	r1, r2, #4
    921a:	6019      	str	r1, [r3, #0]
    921c:	6813      	ldr	r3, [r2, #0]
    921e:	8aa2      	ldrh	r2, [r4, #20]
    9220:	801a      	strh	r2, [r3, #0]
    9222:	2300      	movs	r3, #0
    9224:	9e04      	ldr	r6, [sp, #16]
    9226:	6123      	str	r3, [r4, #16]
    9228:	e054      	b.n	92d4 <_printf_i+0x210>
    922a:	681a      	ldr	r2, [r3, #0]
    922c:	1d11      	adds	r1, r2, #4
    922e:	6019      	str	r1, [r3, #0]
    9230:	6816      	ldr	r6, [r2, #0]
    9232:	2100      	movs	r1, #0
    9234:	6862      	ldr	r2, [r4, #4]
    9236:	0030      	movs	r0, r6
    9238:	f000 f91a 	bl	9470 <memchr>
    923c:	2800      	cmp	r0, #0
    923e:	d001      	beq.n	9244 <_printf_i+0x180>
    9240:	1b80      	subs	r0, r0, r6
    9242:	6060      	str	r0, [r4, #4]
    9244:	6863      	ldr	r3, [r4, #4]
    9246:	6123      	str	r3, [r4, #16]
    9248:	2300      	movs	r3, #0
    924a:	9a04      	ldr	r2, [sp, #16]
    924c:	7013      	strb	r3, [r2, #0]
    924e:	e041      	b.n	92d4 <_printf_i+0x210>
    9250:	6923      	ldr	r3, [r4, #16]
    9252:	0032      	movs	r2, r6
    9254:	9906      	ldr	r1, [sp, #24]
    9256:	9805      	ldr	r0, [sp, #20]
    9258:	9d07      	ldr	r5, [sp, #28]
    925a:	47a8      	blx	r5
    925c:	1c43      	adds	r3, r0, #1
    925e:	d043      	beq.n	92e8 <_printf_i+0x224>
    9260:	6823      	ldr	r3, [r4, #0]
    9262:	2500      	movs	r5, #0
    9264:	079b      	lsls	r3, r3, #30
    9266:	d40f      	bmi.n	9288 <_printf_i+0x1c4>
    9268:	9b09      	ldr	r3, [sp, #36]	; 0x24
    926a:	68e0      	ldr	r0, [r4, #12]
    926c:	4298      	cmp	r0, r3
    926e:	da3d      	bge.n	92ec <_printf_i+0x228>
    9270:	0018      	movs	r0, r3
    9272:	e03b      	b.n	92ec <_printf_i+0x228>
    9274:	0022      	movs	r2, r4
    9276:	2301      	movs	r3, #1
    9278:	3219      	adds	r2, #25
    927a:	9906      	ldr	r1, [sp, #24]
    927c:	9805      	ldr	r0, [sp, #20]
    927e:	9e07      	ldr	r6, [sp, #28]
    9280:	47b0      	blx	r6
    9282:	1c43      	adds	r3, r0, #1
    9284:	d030      	beq.n	92e8 <_printf_i+0x224>
    9286:	3501      	adds	r5, #1
    9288:	68e3      	ldr	r3, [r4, #12]
    928a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    928c:	1a9b      	subs	r3, r3, r2
    928e:	429d      	cmp	r5, r3
    9290:	dbf0      	blt.n	9274 <_printf_i+0x1b0>
    9292:	e7e9      	b.n	9268 <_printf_i+0x1a4>
    9294:	2d00      	cmp	r5, #0
    9296:	d0a9      	beq.n	91ec <_printf_i+0x128>
    9298:	9e04      	ldr	r6, [sp, #16]
    929a:	0028      	movs	r0, r5
    929c:	0039      	movs	r1, r7
    929e:	f7fd f971 	bl	6584 <__aeabi_uidivmod>
    92a2:	9b03      	ldr	r3, [sp, #12]
    92a4:	3e01      	subs	r6, #1
    92a6:	5c5b      	ldrb	r3, [r3, r1]
    92a8:	0028      	movs	r0, r5
    92aa:	7033      	strb	r3, [r6, #0]
    92ac:	0039      	movs	r1, r7
    92ae:	f7fd f8e3 	bl	6478 <__udivsi3>
    92b2:	1e05      	subs	r5, r0, #0
    92b4:	d1f1      	bne.n	929a <_printf_i+0x1d6>
    92b6:	2f08      	cmp	r7, #8
    92b8:	d109      	bne.n	92ce <_printf_i+0x20a>
    92ba:	6823      	ldr	r3, [r4, #0]
    92bc:	07db      	lsls	r3, r3, #31
    92be:	d506      	bpl.n	92ce <_printf_i+0x20a>
    92c0:	6863      	ldr	r3, [r4, #4]
    92c2:	6922      	ldr	r2, [r4, #16]
    92c4:	4293      	cmp	r3, r2
    92c6:	dc02      	bgt.n	92ce <_printf_i+0x20a>
    92c8:	2330      	movs	r3, #48	; 0x30
    92ca:	3e01      	subs	r6, #1
    92cc:	7033      	strb	r3, [r6, #0]
    92ce:	9b04      	ldr	r3, [sp, #16]
    92d0:	1b9b      	subs	r3, r3, r6
    92d2:	6123      	str	r3, [r4, #16]
    92d4:	9b07      	ldr	r3, [sp, #28]
    92d6:	aa09      	add	r2, sp, #36	; 0x24
    92d8:	9300      	str	r3, [sp, #0]
    92da:	0021      	movs	r1, r4
    92dc:	9b06      	ldr	r3, [sp, #24]
    92de:	9805      	ldr	r0, [sp, #20]
    92e0:	f7ff fe82 	bl	8fe8 <_printf_common>
    92e4:	1c43      	adds	r3, r0, #1
    92e6:	d1b3      	bne.n	9250 <_printf_i+0x18c>
    92e8:	2001      	movs	r0, #1
    92ea:	4240      	negs	r0, r0
    92ec:	b00b      	add	sp, #44	; 0x2c
    92ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92f0:	0000a20e 	.word	0x0000a20e
    92f4:	0000a1fd 	.word	0x0000a1fd

000092f8 <_sbrk_r>:
    92f8:	2300      	movs	r3, #0
    92fa:	b570      	push	{r4, r5, r6, lr}
    92fc:	4c06      	ldr	r4, [pc, #24]	; (9318 <_sbrk_r+0x20>)
    92fe:	0005      	movs	r5, r0
    9300:	0008      	movs	r0, r1
    9302:	6023      	str	r3, [r4, #0]
    9304:	f7fc ff5e 	bl	61c4 <_sbrk>
    9308:	1c43      	adds	r3, r0, #1
    930a:	d103      	bne.n	9314 <_sbrk_r+0x1c>
    930c:	6823      	ldr	r3, [r4, #0]
    930e:	2b00      	cmp	r3, #0
    9310:	d000      	beq.n	9314 <_sbrk_r+0x1c>
    9312:	602b      	str	r3, [r5, #0]
    9314:	bd70      	pop	{r4, r5, r6, pc}
    9316:	46c0      	nop			; (mov r8, r8)
    9318:	20000b98 	.word	0x20000b98

0000931c <__sread>:
    931c:	b570      	push	{r4, r5, r6, lr}
    931e:	000c      	movs	r4, r1
    9320:	250e      	movs	r5, #14
    9322:	5f49      	ldrsh	r1, [r1, r5]
    9324:	f000 f8ea 	bl	94fc <_read_r>
    9328:	2800      	cmp	r0, #0
    932a:	db03      	blt.n	9334 <__sread+0x18>
    932c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    932e:	181b      	adds	r3, r3, r0
    9330:	6563      	str	r3, [r4, #84]	; 0x54
    9332:	bd70      	pop	{r4, r5, r6, pc}
    9334:	89a3      	ldrh	r3, [r4, #12]
    9336:	4a02      	ldr	r2, [pc, #8]	; (9340 <__sread+0x24>)
    9338:	4013      	ands	r3, r2
    933a:	81a3      	strh	r3, [r4, #12]
    933c:	e7f9      	b.n	9332 <__sread+0x16>
    933e:	46c0      	nop			; (mov r8, r8)
    9340:	ffffefff 	.word	0xffffefff

00009344 <__swrite>:
    9344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9346:	001f      	movs	r7, r3
    9348:	898b      	ldrh	r3, [r1, #12]
    934a:	0005      	movs	r5, r0
    934c:	000c      	movs	r4, r1
    934e:	0016      	movs	r6, r2
    9350:	05db      	lsls	r3, r3, #23
    9352:	d505      	bpl.n	9360 <__swrite+0x1c>
    9354:	230e      	movs	r3, #14
    9356:	5ec9      	ldrsh	r1, [r1, r3]
    9358:	2200      	movs	r2, #0
    935a:	2302      	movs	r3, #2
    935c:	f000 f874 	bl	9448 <_lseek_r>
    9360:	89a3      	ldrh	r3, [r4, #12]
    9362:	4a05      	ldr	r2, [pc, #20]	; (9378 <__swrite+0x34>)
    9364:	0028      	movs	r0, r5
    9366:	4013      	ands	r3, r2
    9368:	81a3      	strh	r3, [r4, #12]
    936a:	0032      	movs	r2, r6
    936c:	230e      	movs	r3, #14
    936e:	5ee1      	ldrsh	r1, [r4, r3]
    9370:	003b      	movs	r3, r7
    9372:	f000 f81f 	bl	93b4 <_write_r>
    9376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9378:	ffffefff 	.word	0xffffefff

0000937c <__sseek>:
    937c:	b570      	push	{r4, r5, r6, lr}
    937e:	000c      	movs	r4, r1
    9380:	250e      	movs	r5, #14
    9382:	5f49      	ldrsh	r1, [r1, r5]
    9384:	f000 f860 	bl	9448 <_lseek_r>
    9388:	89a3      	ldrh	r3, [r4, #12]
    938a:	1c42      	adds	r2, r0, #1
    938c:	d103      	bne.n	9396 <__sseek+0x1a>
    938e:	4a05      	ldr	r2, [pc, #20]	; (93a4 <__sseek+0x28>)
    9390:	4013      	ands	r3, r2
    9392:	81a3      	strh	r3, [r4, #12]
    9394:	bd70      	pop	{r4, r5, r6, pc}
    9396:	2280      	movs	r2, #128	; 0x80
    9398:	0152      	lsls	r2, r2, #5
    939a:	4313      	orrs	r3, r2
    939c:	81a3      	strh	r3, [r4, #12]
    939e:	6560      	str	r0, [r4, #84]	; 0x54
    93a0:	e7f8      	b.n	9394 <__sseek+0x18>
    93a2:	46c0      	nop			; (mov r8, r8)
    93a4:	ffffefff 	.word	0xffffefff

000093a8 <__sclose>:
    93a8:	b510      	push	{r4, lr}
    93aa:	230e      	movs	r3, #14
    93ac:	5ec9      	ldrsh	r1, [r1, r3]
    93ae:	f000 f815 	bl	93dc <_close_r>
    93b2:	bd10      	pop	{r4, pc}

000093b4 <_write_r>:
    93b4:	b570      	push	{r4, r5, r6, lr}
    93b6:	0005      	movs	r5, r0
    93b8:	0008      	movs	r0, r1
    93ba:	0011      	movs	r1, r2
    93bc:	2200      	movs	r2, #0
    93be:	4c06      	ldr	r4, [pc, #24]	; (93d8 <_write_r+0x24>)
    93c0:	6022      	str	r2, [r4, #0]
    93c2:	001a      	movs	r2, r3
    93c4:	f7f8 fb90 	bl	1ae8 <_write>
    93c8:	1c43      	adds	r3, r0, #1
    93ca:	d103      	bne.n	93d4 <_write_r+0x20>
    93cc:	6823      	ldr	r3, [r4, #0]
    93ce:	2b00      	cmp	r3, #0
    93d0:	d000      	beq.n	93d4 <_write_r+0x20>
    93d2:	602b      	str	r3, [r5, #0]
    93d4:	bd70      	pop	{r4, r5, r6, pc}
    93d6:	46c0      	nop			; (mov r8, r8)
    93d8:	20000b98 	.word	0x20000b98

000093dc <_close_r>:
    93dc:	2300      	movs	r3, #0
    93de:	b570      	push	{r4, r5, r6, lr}
    93e0:	4c06      	ldr	r4, [pc, #24]	; (93fc <_close_r+0x20>)
    93e2:	0005      	movs	r5, r0
    93e4:	0008      	movs	r0, r1
    93e6:	6023      	str	r3, [r4, #0]
    93e8:	f7fc fefe 	bl	61e8 <_close>
    93ec:	1c43      	adds	r3, r0, #1
    93ee:	d103      	bne.n	93f8 <_close_r+0x1c>
    93f0:	6823      	ldr	r3, [r4, #0]
    93f2:	2b00      	cmp	r3, #0
    93f4:	d000      	beq.n	93f8 <_close_r+0x1c>
    93f6:	602b      	str	r3, [r5, #0]
    93f8:	bd70      	pop	{r4, r5, r6, pc}
    93fa:	46c0      	nop			; (mov r8, r8)
    93fc:	20000b98 	.word	0x20000b98

00009400 <_fstat_r>:
    9400:	2300      	movs	r3, #0
    9402:	b570      	push	{r4, r5, r6, lr}
    9404:	4c06      	ldr	r4, [pc, #24]	; (9420 <_fstat_r+0x20>)
    9406:	0005      	movs	r5, r0
    9408:	0008      	movs	r0, r1
    940a:	0011      	movs	r1, r2
    940c:	6023      	str	r3, [r4, #0]
    940e:	f7fc feee 	bl	61ee <_fstat>
    9412:	1c43      	adds	r3, r0, #1
    9414:	d103      	bne.n	941e <_fstat_r+0x1e>
    9416:	6823      	ldr	r3, [r4, #0]
    9418:	2b00      	cmp	r3, #0
    941a:	d000      	beq.n	941e <_fstat_r+0x1e>
    941c:	602b      	str	r3, [r5, #0]
    941e:	bd70      	pop	{r4, r5, r6, pc}
    9420:	20000b98 	.word	0x20000b98

00009424 <_isatty_r>:
    9424:	2300      	movs	r3, #0
    9426:	b570      	push	{r4, r5, r6, lr}
    9428:	4c06      	ldr	r4, [pc, #24]	; (9444 <_isatty_r+0x20>)
    942a:	0005      	movs	r5, r0
    942c:	0008      	movs	r0, r1
    942e:	6023      	str	r3, [r4, #0]
    9430:	f7fc fee2 	bl	61f8 <_isatty>
    9434:	1c43      	adds	r3, r0, #1
    9436:	d103      	bne.n	9440 <_isatty_r+0x1c>
    9438:	6823      	ldr	r3, [r4, #0]
    943a:	2b00      	cmp	r3, #0
    943c:	d000      	beq.n	9440 <_isatty_r+0x1c>
    943e:	602b      	str	r3, [r5, #0]
    9440:	bd70      	pop	{r4, r5, r6, pc}
    9442:	46c0      	nop			; (mov r8, r8)
    9444:	20000b98 	.word	0x20000b98

00009448 <_lseek_r>:
    9448:	b570      	push	{r4, r5, r6, lr}
    944a:	0005      	movs	r5, r0
    944c:	0008      	movs	r0, r1
    944e:	0011      	movs	r1, r2
    9450:	2200      	movs	r2, #0
    9452:	4c06      	ldr	r4, [pc, #24]	; (946c <_lseek_r+0x24>)
    9454:	6022      	str	r2, [r4, #0]
    9456:	001a      	movs	r2, r3
    9458:	f7fc fed0 	bl	61fc <_lseek>
    945c:	1c43      	adds	r3, r0, #1
    945e:	d103      	bne.n	9468 <_lseek_r+0x20>
    9460:	6823      	ldr	r3, [r4, #0]
    9462:	2b00      	cmp	r3, #0
    9464:	d000      	beq.n	9468 <_lseek_r+0x20>
    9466:	602b      	str	r3, [r5, #0]
    9468:	bd70      	pop	{r4, r5, r6, pc}
    946a:	46c0      	nop			; (mov r8, r8)
    946c:	20000b98 	.word	0x20000b98

00009470 <memchr>:
    9470:	b2c9      	uxtb	r1, r1
    9472:	1882      	adds	r2, r0, r2
    9474:	4290      	cmp	r0, r2
    9476:	d101      	bne.n	947c <memchr+0xc>
    9478:	2000      	movs	r0, #0
    947a:	4770      	bx	lr
    947c:	7803      	ldrb	r3, [r0, #0]
    947e:	428b      	cmp	r3, r1
    9480:	d0fb      	beq.n	947a <memchr+0xa>
    9482:	3001      	adds	r0, #1
    9484:	e7f6      	b.n	9474 <memchr+0x4>

00009486 <memmove>:
    9486:	b510      	push	{r4, lr}
    9488:	4288      	cmp	r0, r1
    948a:	d902      	bls.n	9492 <memmove+0xc>
    948c:	188b      	adds	r3, r1, r2
    948e:	4298      	cmp	r0, r3
    9490:	d308      	bcc.n	94a4 <memmove+0x1e>
    9492:	2300      	movs	r3, #0
    9494:	429a      	cmp	r2, r3
    9496:	d007      	beq.n	94a8 <memmove+0x22>
    9498:	5ccc      	ldrb	r4, [r1, r3]
    949a:	54c4      	strb	r4, [r0, r3]
    949c:	3301      	adds	r3, #1
    949e:	e7f9      	b.n	9494 <memmove+0xe>
    94a0:	5c8b      	ldrb	r3, [r1, r2]
    94a2:	5483      	strb	r3, [r0, r2]
    94a4:	3a01      	subs	r2, #1
    94a6:	d2fb      	bcs.n	94a0 <memmove+0x1a>
    94a8:	bd10      	pop	{r4, pc}

000094aa <__malloc_lock>:
    94aa:	4770      	bx	lr

000094ac <__malloc_unlock>:
    94ac:	4770      	bx	lr

000094ae <_realloc_r>:
    94ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94b0:	0007      	movs	r7, r0
    94b2:	000d      	movs	r5, r1
    94b4:	0016      	movs	r6, r2
    94b6:	2900      	cmp	r1, #0
    94b8:	d105      	bne.n	94c6 <_realloc_r+0x18>
    94ba:	0011      	movs	r1, r2
    94bc:	f7ff fa8c 	bl	89d8 <_malloc_r>
    94c0:	0004      	movs	r4, r0
    94c2:	0020      	movs	r0, r4
    94c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94c6:	2a00      	cmp	r2, #0
    94c8:	d103      	bne.n	94d2 <_realloc_r+0x24>
    94ca:	f7ff fa3b 	bl	8944 <_free_r>
    94ce:	0034      	movs	r4, r6
    94d0:	e7f7      	b.n	94c2 <_realloc_r+0x14>
    94d2:	f000 f827 	bl	9524 <_malloc_usable_size_r>
    94d6:	002c      	movs	r4, r5
    94d8:	4286      	cmp	r6, r0
    94da:	d9f2      	bls.n	94c2 <_realloc_r+0x14>
    94dc:	0031      	movs	r1, r6
    94de:	0038      	movs	r0, r7
    94e0:	f7ff fa7a 	bl	89d8 <_malloc_r>
    94e4:	1e04      	subs	r4, r0, #0
    94e6:	d0ec      	beq.n	94c2 <_realloc_r+0x14>
    94e8:	0029      	movs	r1, r5
    94ea:	0032      	movs	r2, r6
    94ec:	f7fe fdec 	bl	80c8 <memcpy>
    94f0:	0029      	movs	r1, r5
    94f2:	0038      	movs	r0, r7
    94f4:	f7ff fa26 	bl	8944 <_free_r>
    94f8:	e7e3      	b.n	94c2 <_realloc_r+0x14>
	...

000094fc <_read_r>:
    94fc:	b570      	push	{r4, r5, r6, lr}
    94fe:	0005      	movs	r5, r0
    9500:	0008      	movs	r0, r1
    9502:	0011      	movs	r1, r2
    9504:	2200      	movs	r2, #0
    9506:	4c06      	ldr	r4, [pc, #24]	; (9520 <_read_r+0x24>)
    9508:	6022      	str	r2, [r4, #0]
    950a:	001a      	movs	r2, r3
    950c:	f7f8 faca 	bl	1aa4 <_read>
    9510:	1c43      	adds	r3, r0, #1
    9512:	d103      	bne.n	951c <_read_r+0x20>
    9514:	6823      	ldr	r3, [r4, #0]
    9516:	2b00      	cmp	r3, #0
    9518:	d000      	beq.n	951c <_read_r+0x20>
    951a:	602b      	str	r3, [r5, #0]
    951c:	bd70      	pop	{r4, r5, r6, pc}
    951e:	46c0      	nop			; (mov r8, r8)
    9520:	20000b98 	.word	0x20000b98

00009524 <_malloc_usable_size_r>:
    9524:	1f0b      	subs	r3, r1, #4
    9526:	681b      	ldr	r3, [r3, #0]
    9528:	1f18      	subs	r0, r3, #4
    952a:	2b00      	cmp	r3, #0
    952c:	da01      	bge.n	9532 <_malloc_usable_size_r+0xe>
    952e:	580b      	ldr	r3, [r1, r0]
    9530:	18c0      	adds	r0, r0, r3
    9532:	4770      	bx	lr

00009534 <__func__.15637>:
    9534:	6d6d 5f63 7073 5f69 706f 635f 6e6f 0064     mmc_spi_op_cond.

00009544 <__func__.15654>:
    9544:	6473 735f 6970 6f5f 5f70 6f63 646e 0000     sd_spi_op_cond..

00009554 <__func__.15700>:
    9554:	6473 635f 646d 0038                         sd_cmd8.

0000955c <__func__.15748>:
    955c:	6473 6d5f 636d 635f 646d 3331 0000 0000     sd_mmc_cmd13....

0000956c <mmc_trans_multipliers>:
    956c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    957c:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    958c:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    959c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
    95ac:	7453 7261 2074 4453 6320 7261 2064 6e69     Start SD card in
    95bc:	7473 6c61 0a6c 000d 7325 203a 4d43 3844     stall...%s: CMD8
    95cc:	7220 7365 3370 2032 7830 3025 7838 5520      resp32 0x%08x U
    95dc:	554e 4153 4c42 2045 4143 4452 0d0a 0000     NUSABLE CARD....
    95ec:	4453 6320 7261 2064 3256 0d0a 0000 0000     SD card V2......
    95fc:	7325 203a 4d43 3544 2035 6146 6c69 0d0a     %s: CMD55 Fail..
    960c:	0000 0000 7325 203a 4341 444d 3134 4620     ....%s: ACMD41 F
    961c:	6961 0a6c 000d 0000 7325 203a 4341 444d     ail.....%s: ACMD
    962c:	3134 5420 6d69 6f65 7475 6f20 206e 7562     41 Timeout on bu
    963c:	7973 202c 6572 7073 3233 3020 2578 3830     sy, resp32 0x%08
    964c:	2078 0d0a 0000 0000 7325 203a 4d43 3544     x ......%s: CMD5
    965c:	2038 6146 6c69 0d0a 0000 0000 7325 203a     8 Fail......%s: 
    966c:	4d43 3144 5320 4950 4620 6961 206c 202d     CMD1 SPI Fail - 
    967c:	7542 7973 7220 7465 7972 2520 0a64 000d     Busy retry %d...
    968c:	7325 203a 4d43 3144 5420 6d69 6f65 7475     %s: CMD1 Timeout
    969c:	6f20 206e 7562 7973 0d0a 0000 4453 4d2f      on busy....SD/M
    96ac:	434d 6320 7261 2064 6e69 7469 6169 696c     MC card initiali
    96bc:	617a 6974 6e6f 6620 6961 656c 0a64 000d     zation failed...
    96cc:	7453 7261 2074 4d4d 2043 6e49 7473 6c61     Start MMC Instal
    96dc:	0a6c 000d 4453 4d2f 434d 6320 7261 2064     l...SD/MMC card 
    96ec:	6572 6461 0a79 000d 7325 203a 4d43 3144     ready...%s: CMD1
    96fc:	2033 7542 7973 7420 6d69 6f65 7475 0d0a     3 Busy timeout..
    970c:	0000 0000                                   ....

00009710 <sd_mmc_trans_units>:
    9710:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0000972c <sd_trans_multipliers>:
    972c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    973c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    974c:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    975c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
    976c:	0d0a 4520 7478 6e65 6564 2064 656d 7373     .. Extended mess
    977c:	6761 2065 6572 6563 7669 6465 6920 206e     age received in 
    978c:	7852 6220 6675 6566 2e72 5420 6568 7220     Rx buffer. The r
    979c:	6365 6965 6576 2064 6164 6174 6920 3a73     eceived data is:
    97ac:	0d20 0000 0d0a 5320 6174 646e 7261 2064      ..... Standard 
    97bc:	656d 7373 6761 2065 6572 6563 7669 6465     message received
    97cc:	6920 206e 7852 6220 6675 6566 2e72 5420      in Rx buffer. T
    97dc:	6568 7220 6365 6965 6576 2064 6164 6174     he received data
    97ec:	6920 3a73 0d20 0000 2020 6425 0000 0000      is: ...  %d....
    97fc:	0a0d 000d 7250 746f 636f 6c6f 6520 7272     ....Protocol err
    980c:	726f 202c 6c70 6165 6573 6420 756f 6c62     or, please doubl
    981c:	2065 6863 6365 206b 6874 2065 6c63 636f     e check the cloc
    982c:	206b 6e69 7420 6f77 6220 616f 6472 2e73     k in two boards.
    983c:	0d20 0d0a 0000 0000 5344 3331 3730 6320      .......DS1307 c
    984c:	6e6f 6966 7567 6172 6974 6e6f 6620 6961     onfiguration fai
    985c:	656c 0064 5344 3331 3730 7220 6165 6964     led.DS1307 readi
    986c:	676e 6620 6961 656c 0064 0000 3831 333a     ng failed...18:3
    987c:	3a39 3132 0000 0000 6553 2070 3732 3220     9:21....Sep 27 2
    988c:	3130 0039 6e49 7469 6169 696c 697a 676e     019.Initializing
    989c:	7420 206f 7325 2520 0d73 000a 7055 6164      to %s %s...Upda
    98ac:	6574 2064 6974 656d 6f20 206e 5452 0d43     ted time on RTC.
    98bc:	0000 0000 5452 2043 6e69 7469 6169 696c     ....RTC initiali
    98cc:	657a 2064 7461 2520 3230 2f64 3025 6432     zed at %02d/%02d
    98dc:	252f 3430 2064 3025 6432 253a 3230 3a64     /%04d %02d:%02d:
    98ec:	3025 6432 000a 0000                         %02d....

000098f4 <lun_desc>:
    98f4:	0b61 0000 0ba1 0000 0bc1 0000 0bd9 0000     a...............
    9904:	0bf9 0000 0c45 0000 0cb1 0000 9934 0000     ....E.......4...
    9914:	0b71 0000 0bb1 0000 0bcd 0000 0be9 0000     q...............
    9924:	0bfd 0000 0c59 0000 0cc5 0000 994c 0000     ....Y.......L...
    9934:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
    9944:	2074 2230 0000 0000 5322 2f44 4d4d 2043     t 0"...."SD/MMC 
    9954:	6143 6472 5320 6f6c 2074 2231 0000 0000     Card Slot 1"....

00009964 <Tbl>:
    9964:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
    9974:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
    9984:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
    9994:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
    99a4:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
    99b4:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
    99c4:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
    99d4:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
    99e4:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
    99f4:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
    9a04:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
    9a14:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
    9a24:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
    9a34:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
    9a44:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
    9a54:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00009a64 <tbl_lower.4309>:
    9a64:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
    9a74:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
    9a84:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
    9a94:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
    9aa4:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
    9ab4:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
    9ac4:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
    9ad4:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
    9ae4:	0103 0105 0107 0109 010b 010d 010f 0111     ................
    9af4:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
    9b04:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
    9b14:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
    9b24:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
    9b34:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
    9b44:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
    9b54:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
    9b64:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
    9b74:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
    9b84:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
    9b94:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
    9ba4:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
    9bb4:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
    9bc4:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
    9bd4:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
    9be4:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
    9bf4:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
    9c04:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
    9c14:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
    9c24:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
    9c34:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00009c44 <tbl_upper.4310>:
    9c44:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
    9c54:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
    9c64:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
    9c74:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
    9c84:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
    9c94:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
    9ca4:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
    9cb4:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
    9cc4:	0102 0104 0106 0108 010a 010c 010e 0110     ................
    9cd4:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
    9ce4:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
    9cf4:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
    9d04:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
    9d14:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
    9d24:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
    9d34:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
    9d44:	0393 0394 0395 0396 0397 0398 0399 039a     ................
    9d54:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
    9d64:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
    9d74:	0411 0412 0413 0414 0415 0416 0417 0418     ................
    9d84:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
    9d94:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
    9da4:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
    9db4:	0402 0403 0404 0405 0406 0407 0408 0409     ................
    9dc4:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
    9dd4:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
    9de4:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
    9df4:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
    9e04:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
    9e14:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...

00009e24 <LfnOfs>:
    9e24:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

00009e34 <excvt.4559>:
    9e34:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
    9e44:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
    9e54:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
    9e64:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    9e74:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
    9e84:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    9e94:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
    9ea4:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
    9eb4:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
    9ec4:	5d5b 0000 0400 4200 0800 4200 0c00 4200     [].....B...B...B
    9ed4:	1000 4200 5a4a 0000 5a46 0000 5a46 0000     ...BJZ..FZ..FZ..
    9ee4:	5a78 0000 5a78 0000 5a62 0000 5a50 0000     xZ..xZ..bZ..PZ..
    9ef4:	5a68 0000 5c3c 0000 5c1c 0000 5c1c 0000     hZ..<\...\...\..
    9f04:	5c72 0000 5c2e 0000 5c4a 0000 5c20 0000     r\...\..J\.. \..
    9f14:	5c58 0000 6c50 6165 6573 7020 756c 2067     X\..Please plug 
    9f24:	6e61 5320 2c44 4d20 434d 6f20 2072 4453     an SD, MMC or SD
    9f34:	4f49 6320 7261 2064 6e69 7320 6f6c 2e74     IO card in slot.
    9f44:	0d0a 0000 6146 6c69 6465 7420 206f 6e69     ....Failed to in
    9f54:	7469 6169 696c 657a 5320 2044 6163 6472     itialize SD card
    9f64:	5b20 6425 2c5d 7020 656c 7361 2065 6572      [%d], please re
    9f74:	692d 736e 7265 2074 6874 2065 6163 6472     -insert the card
    9f84:	0d2e 000a 6146 6c69 6465 7420 206f 6f6d     ....Failed to mo
    9f94:	6e75 2074 4146 3354 2032 6966 656c 7973     unt FAT32 filesy
    9fa4:	7473 6d65 6f20 206e 4453 6320 7261 2064     stem on SD card 
    9fb4:	255b 5d64 202c 6c70 6165 6573 6320 6568     [%d], please che
    9fc4:	6b63 7420 6168 0d74 000a 0000 3a30 4f4c     ck that.....0:LO
    9fd4:	2547 3530 2e64 5343 0056 0000 6146 6c69     G%05d.CSV...Fail
    9fe4:	6465 7420 206f 6966 646e 6e20 7765 6620     ed to find new f
    9ff4:	6c69 2065 6e6f 6320 7261 2064 255b 5d64     ile on card [%d]
    a004:	0a0d 0000 6146 6c69 6465 7420 206f 7263     ....Failed to cr
    a014:	6165 6574 6620 6c69 2065 6e6f 6320 7261     eate file on car
    a024:	2064 255b 5d64 0a0d 0000 0000 7453 7261     d [%d]......Star
    a034:	6974 676e 6420 7461 2061 6f6c 6767 6e69     ting data loggin
    a044:	2e67 2e2e 000d 0000 6579 7261 6d2c 6e6f     g.......year,mon
    a054:	6874 642c 7961 682c 756f 2c72 696d 2c6e     th,day,hour,min,
    a064:	6573 2c63 736d 692c 2c64 6164 6174 000a     sec,ms,id,data..
    a074:	3231 3433 3635 3837 3039 3231 3433 3635     1234567890123456
    a084:	3837 3039 3231 3433 3635 3837 3039 3231     7890123456789012
    a094:	3433 3635 3837 3039 3231 3433 3635 3837     3456789012345678
    a0a4:	3039 3231 3433 3635 3837 3039 3231 3433     9012345678901234
    a0b4:	3635 3837 3039 3231 3433 3635 3837 3039     5678901234567890
    a0c4:	3231 3433 3635 3837 3039 3231 3433 3635     1234567890123456
    a0d4:	3837 3039 0000 0000 3231 3433 3635 3837     7890....12345678
    a0e4:	3039 3231 0000 0000 6c50 6165 6573 7520     9012....Please u
    a0f4:	706e 756c 2067 6874 2065 6163 6472 0d2e     nplug the card..
    a104:	0000 0000 6fd0 0000 6fb2 0000 6f6c 0000     .....o...o..lo..
    a114:	6e8a 0000 6f6c 0000 6fa4 0000 6f6c 0000     .n..lo...o..lo..
    a124:	6e8a 0000 6fb2 0000 6fb2 0000 6fa4 0000     .n...o...o...o..
    a134:	6e8a 0000 6e82 0000 6e82 0000 6e82 0000     .n...n...n...n..
    a144:	71e8 0000 7630 0000 74f0 0000 74f0 0000     .q..0v...t...t..
    a154:	74ec 0000 7608 0000 7608 0000 75fa 0000     .t...v...v...u..
    a164:	74ec 0000 7608 0000 75fa 0000 7608 0000     .t...v...u...v..
    a174:	74ec 0000 7610 0000 7610 0000 7610 0000     .t...v...v...v..
    a184:	7814 0000                                   .x..

0000a188 <_global_impure_ptr>:
    a188:	0034 2000                                   4.. 

0000a18c <__sf_fake_stderr>:
	...

0000a1ac <__sf_fake_stdin>:
	...

0000a1cc <__sf_fake_stdout>:
	...
    a1ec:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    a1fc:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    a20c:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    a21c:	6665 0000                                   ef..

0000a220 <_init>:
    a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a222:	46c0      	nop			; (mov r8, r8)
    a224:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a226:	bc08      	pop	{r3}
    a228:	469e      	mov	lr, r3
    a22a:	4770      	bx	lr

0000a22c <__init_array_start>:
    a22c:	000000e5 	.word	0x000000e5

0000a230 <_fini>:
    a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a232:	46c0      	nop			; (mov r8, r8)
    a234:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a236:	bc08      	pop	{r3}
    a238:	469e      	mov	lr, r3
    a23a:	4770      	bx	lr

0000a23c <__fini_array_start>:
    a23c:	000000bd 	.word	0x000000bd
